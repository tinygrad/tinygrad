# mypy: ignore-errors
# -*- coding: utf-8 -*-
#
# TARGET arch is: ['-DHAVE_ENDIAN_H', '-DHAVE_STRUCT_TIMESPEC', '-DHAVE_PTHREAD', '-I/tmp/mesa-9e0991eff5aea2e064fc16d5c7fa0ee6cd52d894/src', '-I/tmp/mesa-9e0991eff5aea2e064fc16d5c7fa0ee6cd52d894/include', '-I/tmp/mesa-9e0991eff5aea2e064fc16d5c7fa0ee6cd52d894/gen', '-I/tmp/mesa-9e0991eff5aea2e064fc16d5c7fa0ee6cd52d894/src/compiler/nir', '-I/tmp/mesa-9e0991eff5aea2e064fc16d5c7fa0ee6cd52d894/src/gallium/auxiliary', '-I/tmp/mesa-9e0991eff5aea2e064fc16d5c7fa0ee6cd52d894/src/gallium/include', '-I/usr/lib/llvm-14/include']
# WORD_SIZE is: 8
# POINTER_SIZE is: 8
# LONGDOUBLE_SIZE is: 16
#
import ctypes, tinygrad.runtime.support.mesa as mesa_support


class AsDictMixin:
    @classmethod
    def as_dict(cls, self):
        result = {}
        if not isinstance(self, AsDictMixin):
            # not a structure, assume it's already a python object
            return self
        if not hasattr(cls, "_fields_"):
            return result
        # sys.version_info >= (3, 5)
        # for (field, *_) in cls._fields_:  # noqa
        for field_tuple in cls._fields_:  # noqa
            field = field_tuple[0]
            if field.startswith('PADDING_'):
                continue
            value = getattr(self, field)
            type_ = type(value)
            if hasattr(value, "_length_") and hasattr(value, "_type_"):
                # array
                if not hasattr(type_, "as_dict"):
                    value = [v for v in value]
                else:
                    type_ = type_._type_
                    value = [type_.as_dict(v) for v in value]
            elif hasattr(value, "contents") and hasattr(value, "_type_"):
                # pointer
                try:
                    if not hasattr(type_, "as_dict"):
                        value = value.contents
                    else:
                        type_ = type_._type_
                        value = type_.as_dict(value.contents)
                except ValueError:
                    # nullptr
                    value = None
            elif isinstance(value, AsDictMixin):
                # other structure
                value = type_.as_dict(value)
            result[field] = value
        return result


class Structure(ctypes.Structure, AsDictMixin):

    def __init__(self, *args, **kwds):
        # We don't want to use positional arguments fill PADDING_* fields

        args = dict(zip(self.__class__._field_names_(), args))
        args.update(kwds)
        super(Structure, self).__init__(**args)

    @classmethod
    def _field_names_(cls):
        if hasattr(cls, '_fields_'):
            return (f[0] for f in cls._fields_ if not f[0].startswith('PADDING'))
        else:
            return ()

    @classmethod
    def get_type(cls, field):
        for f in cls._fields_:
            if f[0] == field:
                return f[1]
        return None

    @classmethod
    def bind(cls, bound_fields):
        fields = {}
        for name, type_ in cls._fields_:
            if hasattr(type_, "restype"):
                if name in bound_fields:
                    if bound_fields[name] is None:
                        fields[name] = type_()
                    else:
                        # use a closure to capture the callback from the loop scope
                        fields[name] = (
                            type_((lambda callback: lambda *args: callback(*args))(
                                bound_fields[name]))
                        )
                    del bound_fields[name]
                else:
                    # default callback implementation (does nothing)
                    try:
                        default_ = type_(0).restype().value
                    except TypeError:
                        default_ = None
                    fields[name] = type_((
                        lambda default_: lambda *args: default_)(default_))
            else:
                # not a callback function, use default initialization
                if name in bound_fields:
                    fields[name] = bound_fields[name]
                    del bound_fields[name]
                else:
                    fields[name] = type_()
        if len(bound_fields) != 0:
            raise ValueError(
                "Cannot bind the following unknown callback(s) {}.{}".format(
                    cls.__name__, bound_fields.keys()
            ))
        return cls(**fields)


class Union(ctypes.Union, AsDictMixin):
    pass



c_int128 = ctypes.c_ubyte*16
c_uint128 = c_int128
void = None
if ctypes.sizeof(ctypes.c_longdouble) == 16:
    c_long_double_t = ctypes.c_longdouble
else:
    c_long_double_t = ctypes.c_ubyte*16

class FunctionFactoryStub:
    def __getattr__(self, _):
      return ctypes.CFUNCTYPE(lambda y:y)

# libraries['FIXME_STUB'] explanation
# As you did not list (-l libraryname.so) a library that exports this function
# This is a non-working stub instead.
# You can either re-run clan2py with -l /path/to/library.so
# Or manually fix this by comment the ctypes.CDLL loading
_libraries = {}
_libraries['FIXME_STUB'] = mesa_support.lvp #  ctypes.CDLL('FIXME_STUB')
def string_cast(char_pointer, encoding='utf-8', errors='strict'):
    value = ctypes.cast(char_pointer, ctypes.c_char_p).value
    if value is not None and encoding is not None:
        value = value.decode(encoding, errors=errors)
    return value


def char_pointer_cast(string, encoding='utf-8'):
    if encoding is not None:
        try:
            string = string.encode(encoding)
        except AttributeError:
            # In Python3, bytes has no encode attribute
            pass
    string = ctypes.c_char_p(string)
    return ctypes.cast(string, ctypes.POINTER(ctypes.c_char))





class struct_lp_context_ref(Structure):
    pass

class struct_LLVMOpaqueContext(Structure):
    pass

struct_lp_context_ref._pack_ = 1 # source:False
struct_lp_context_ref._fields_ = [
    ('ref', ctypes.POINTER(struct_LLVMOpaqueContext)),
    ('owned', ctypes.c_bool),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

lp_context_ref = struct_lp_context_ref
try:
    lp_context_create = _libraries['FIXME_STUB'].lp_context_create
    lp_context_create.restype = None
    lp_context_create.argtypes = [ctypes.POINTER(struct_lp_context_ref)]
except AttributeError:
    pass
try:
    lp_context_destroy = _libraries['FIXME_STUB'].lp_context_destroy
    lp_context_destroy.restype = None
    lp_context_destroy.argtypes = [ctypes.POINTER(struct_lp_context_ref)]
except AttributeError:
    pass
lp_native_vector_width = 0 # Variable ctypes.c_uint32
class struct_lp_type(Structure):
    pass

struct_lp_type._pack_ = 1 # source:False
struct_lp_type._fields_ = [
    ('floating', ctypes.c_uint64, 1),
    ('fixed', ctypes.c_uint64, 1),
    ('sign', ctypes.c_uint64, 1),
    ('norm', ctypes.c_uint64, 1),
    ('signed_zero_preserve', ctypes.c_uint64, 1),
    ('nan_preserve', ctypes.c_uint64, 1),
    ('width', ctypes.c_uint64, 14),
    ('PADDING_0', ctypes.c_uint16, 12),
    ('length', ctypes.c_uint64, 14),
    ('PADDING_1', ctypes.c_uint32, 18),
]

class struct_lp_build_context(Structure):
    pass

class struct_gallivm_state(Structure):
    pass

class struct_LLVMOpaqueType(Structure):
    pass

class struct_LLVMOpaqueValue(Structure):
    pass

struct_lp_build_context._pack_ = 1 # source:False
struct_lp_build_context._fields_ = [
    ('gallivm', ctypes.POINTER(struct_gallivm_state)),
    ('type', struct_lp_type),
    ('elem_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('vec_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('int_elem_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('int_vec_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('undef', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('zero', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('one', ctypes.POINTER(struct_LLVMOpaqueValue)),
]

class struct_LLVMOpaqueModule(Structure):
    pass

class struct_LLVMOpaqueTargetData(Structure):
    pass

class struct_LLVMOpaqueExecutionEngine(Structure):
    pass

class struct_lp_passmgr(Structure):
    pass

class struct_LLVMOpaqueMCJITMemoryManager(Structure):
    pass

class struct_lp_generated_code(Structure):
    pass

class struct_LLVMOpaqueBuilder(Structure):
    pass

class struct_LLVMOpaqueDIBuilder(Structure):
    pass

class struct_lp_cached_code(Structure):
    pass

class struct_LLVMOpaqueMetadata(Structure):
    pass

class struct_lp_jit_texture(Structure):
    pass

struct_gallivm_state._pack_ = 1 # source:False
struct_gallivm_state._fields_ = [
    ('module_name', ctypes.POINTER(ctypes.c_char)),
    ('file_name', ctypes.POINTER(ctypes.c_char)),
    ('module', ctypes.POINTER(struct_LLVMOpaqueModule)),
    ('target', ctypes.POINTER(struct_LLVMOpaqueTargetData)),
    ('engine', ctypes.POINTER(struct_LLVMOpaqueExecutionEngine)),
    ('passmgr', ctypes.POINTER(struct_lp_passmgr)),
    ('memorymgr', ctypes.POINTER(struct_LLVMOpaqueMCJITMemoryManager)),
    ('code', ctypes.POINTER(struct_lp_generated_code)),
    ('context', ctypes.POINTER(struct_LLVMOpaqueContext)),
    ('builder', ctypes.POINTER(struct_LLVMOpaqueBuilder)),
    ('di_builder', ctypes.POINTER(struct_LLVMOpaqueDIBuilder)),
    ('cache', ctypes.POINTER(struct_lp_cached_code)),
    ('compiled', ctypes.c_uint32),
    ('coro_malloc_hook', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('coro_free_hook', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('debug_printf_hook', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('coro_malloc_hook_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('coro_free_hook_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('di_function', ctypes.POINTER(struct_LLVMOpaqueMetadata)),
    ('file', ctypes.POINTER(struct_LLVMOpaqueMetadata)),
    ('get_time_hook', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('texture_descriptor', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('texture_dynamic_state', ctypes.POINTER(struct_lp_jit_texture)),
    ('sampler_descriptor', ctypes.POINTER(struct_LLVMOpaqueValue)),
]

class struct_util_format_description(Structure):
    pass


# values for enumeration 'pipe_format'
pipe_format__enumvalues = {
    0: 'PIPE_FORMAT_NONE',
    1: 'PIPE_FORMAT_R64_UINT',
    2: 'PIPE_FORMAT_R64G64_UINT',
    3: 'PIPE_FORMAT_R64G64B64_UINT',
    4: 'PIPE_FORMAT_R64G64B64A64_UINT',
    5: 'PIPE_FORMAT_R64_SINT',
    6: 'PIPE_FORMAT_R64G64_SINT',
    7: 'PIPE_FORMAT_R64G64B64_SINT',
    8: 'PIPE_FORMAT_R64G64B64A64_SINT',
    9: 'PIPE_FORMAT_R64_FLOAT',
    10: 'PIPE_FORMAT_R64G64_FLOAT',
    11: 'PIPE_FORMAT_R64G64B64_FLOAT',
    12: 'PIPE_FORMAT_R64G64B64A64_FLOAT',
    13: 'PIPE_FORMAT_R32_FLOAT',
    14: 'PIPE_FORMAT_R32G32_FLOAT',
    15: 'PIPE_FORMAT_R32G32B32_FLOAT',
    16: 'PIPE_FORMAT_R32G32B32A32_FLOAT',
    17: 'PIPE_FORMAT_R32_UNORM',
    18: 'PIPE_FORMAT_R32G32_UNORM',
    19: 'PIPE_FORMAT_R32G32B32_UNORM',
    20: 'PIPE_FORMAT_R32G32B32A32_UNORM',
    21: 'PIPE_FORMAT_R32_USCALED',
    22: 'PIPE_FORMAT_R32G32_USCALED',
    23: 'PIPE_FORMAT_R32G32B32_USCALED',
    24: 'PIPE_FORMAT_R32G32B32A32_USCALED',
    25: 'PIPE_FORMAT_R32_SNORM',
    26: 'PIPE_FORMAT_R32G32_SNORM',
    27: 'PIPE_FORMAT_R32G32B32_SNORM',
    28: 'PIPE_FORMAT_R32G32B32A32_SNORM',
    29: 'PIPE_FORMAT_R32_SSCALED',
    30: 'PIPE_FORMAT_R32G32_SSCALED',
    31: 'PIPE_FORMAT_R32G32B32_SSCALED',
    32: 'PIPE_FORMAT_R32G32B32A32_SSCALED',
    33: 'PIPE_FORMAT_R16_UNORM',
    34: 'PIPE_FORMAT_R16G16_UNORM',
    35: 'PIPE_FORMAT_R16G16B16_UNORM',
    36: 'PIPE_FORMAT_R16G16B16A16_UNORM',
    37: 'PIPE_FORMAT_R16_USCALED',
    38: 'PIPE_FORMAT_R16G16_USCALED',
    39: 'PIPE_FORMAT_R16G16B16_USCALED',
    40: 'PIPE_FORMAT_R16G16B16A16_USCALED',
    41: 'PIPE_FORMAT_R16_SNORM',
    42: 'PIPE_FORMAT_R16G16_SNORM',
    43: 'PIPE_FORMAT_R16G16B16_SNORM',
    44: 'PIPE_FORMAT_R16G16B16A16_SNORM',
    45: 'PIPE_FORMAT_R16_SSCALED',
    46: 'PIPE_FORMAT_R16G16_SSCALED',
    47: 'PIPE_FORMAT_R16G16B16_SSCALED',
    48: 'PIPE_FORMAT_R16G16B16A16_SSCALED',
    49: 'PIPE_FORMAT_R8_UNORM',
    50: 'PIPE_FORMAT_R8G8_UNORM',
    51: 'PIPE_FORMAT_R8G8B8_UNORM',
    52: 'PIPE_FORMAT_B8G8R8_UNORM',
    53: 'PIPE_FORMAT_R8G8B8A8_UNORM',
    54: 'PIPE_FORMAT_B8G8R8A8_UNORM',
    55: 'PIPE_FORMAT_R8_USCALED',
    56: 'PIPE_FORMAT_R8G8_USCALED',
    57: 'PIPE_FORMAT_R8G8B8_USCALED',
    58: 'PIPE_FORMAT_B8G8R8_USCALED',
    59: 'PIPE_FORMAT_R8G8B8A8_USCALED',
    60: 'PIPE_FORMAT_B8G8R8A8_USCALED',
    61: 'PIPE_FORMAT_A8B8G8R8_USCALED',
    62: 'PIPE_FORMAT_R8_SNORM',
    63: 'PIPE_FORMAT_R8G8_SNORM',
    64: 'PIPE_FORMAT_R8G8B8_SNORM',
    65: 'PIPE_FORMAT_B8G8R8_SNORM',
    66: 'PIPE_FORMAT_R8G8B8A8_SNORM',
    67: 'PIPE_FORMAT_B8G8R8A8_SNORM',
    68: 'PIPE_FORMAT_R8_SSCALED',
    69: 'PIPE_FORMAT_R8G8_SSCALED',
    70: 'PIPE_FORMAT_R8G8B8_SSCALED',
    71: 'PIPE_FORMAT_B8G8R8_SSCALED',
    72: 'PIPE_FORMAT_R8G8B8A8_SSCALED',
    73: 'PIPE_FORMAT_B8G8R8A8_SSCALED',
    74: 'PIPE_FORMAT_A8B8G8R8_SSCALED',
    75: 'PIPE_FORMAT_A8R8G8B8_UNORM',
    76: 'PIPE_FORMAT_R32_FIXED',
    77: 'PIPE_FORMAT_R32G32_FIXED',
    78: 'PIPE_FORMAT_R32G32B32_FIXED',
    79: 'PIPE_FORMAT_R32G32B32A32_FIXED',
    80: 'PIPE_FORMAT_R16_FLOAT',
    81: 'PIPE_FORMAT_R16G16_FLOAT',
    82: 'PIPE_FORMAT_R16G16B16_FLOAT',
    83: 'PIPE_FORMAT_R16G16B16A16_FLOAT',
    84: 'PIPE_FORMAT_R8_UINT',
    85: 'PIPE_FORMAT_R8G8_UINT',
    86: 'PIPE_FORMAT_R8G8B8_UINT',
    87: 'PIPE_FORMAT_B8G8R8_UINT',
    88: 'PIPE_FORMAT_R8G8B8A8_UINT',
    89: 'PIPE_FORMAT_B8G8R8A8_UINT',
    90: 'PIPE_FORMAT_R8_SINT',
    91: 'PIPE_FORMAT_R8G8_SINT',
    92: 'PIPE_FORMAT_R8G8B8_SINT',
    93: 'PIPE_FORMAT_B8G8R8_SINT',
    94: 'PIPE_FORMAT_R8G8B8A8_SINT',
    95: 'PIPE_FORMAT_B8G8R8A8_SINT',
    96: 'PIPE_FORMAT_R16_UINT',
    97: 'PIPE_FORMAT_R16G16_UINT',
    98: 'PIPE_FORMAT_R16G16B16_UINT',
    99: 'PIPE_FORMAT_R16G16B16A16_UINT',
    100: 'PIPE_FORMAT_R16_SINT',
    101: 'PIPE_FORMAT_R16G16_SINT',
    102: 'PIPE_FORMAT_R16G16B16_SINT',
    103: 'PIPE_FORMAT_R16G16B16A16_SINT',
    104: 'PIPE_FORMAT_R32_UINT',
    105: 'PIPE_FORMAT_R32G32_UINT',
    106: 'PIPE_FORMAT_R32G32B32_UINT',
    107: 'PIPE_FORMAT_R32G32B32A32_UINT',
    108: 'PIPE_FORMAT_R32_SINT',
    109: 'PIPE_FORMAT_R32G32_SINT',
    110: 'PIPE_FORMAT_R32G32B32_SINT',
    111: 'PIPE_FORMAT_R32G32B32A32_SINT',
    112: 'PIPE_FORMAT_R10G10B10A2_UNORM',
    113: 'PIPE_FORMAT_R10G10B10A2_SNORM',
    114: 'PIPE_FORMAT_R10G10B10A2_USCALED',
    115: 'PIPE_FORMAT_R10G10B10A2_SSCALED',
    116: 'PIPE_FORMAT_B10G10R10A2_UNORM',
    117: 'PIPE_FORMAT_B10G10R10A2_SNORM',
    118: 'PIPE_FORMAT_B10G10R10A2_USCALED',
    119: 'PIPE_FORMAT_B10G10R10A2_SSCALED',
    120: 'PIPE_FORMAT_R11G11B10_FLOAT',
    121: 'PIPE_FORMAT_R10G10B10A2_UINT',
    122: 'PIPE_FORMAT_R10G10B10A2_SINT',
    123: 'PIPE_FORMAT_B10G10R10A2_UINT',
    124: 'PIPE_FORMAT_B10G10R10A2_SINT',
    125: 'PIPE_FORMAT_B8G8R8X8_UNORM',
    126: 'PIPE_FORMAT_X8B8G8R8_UNORM',
    127: 'PIPE_FORMAT_X8R8G8B8_UNORM',
    128: 'PIPE_FORMAT_B5G5R5A1_UNORM',
    129: 'PIPE_FORMAT_R4G4B4A4_UNORM',
    130: 'PIPE_FORMAT_B4G4R4A4_UNORM',
    131: 'PIPE_FORMAT_R5G6B5_UNORM',
    132: 'PIPE_FORMAT_B5G6R5_UNORM',
    133: 'PIPE_FORMAT_L8_UNORM',
    134: 'PIPE_FORMAT_A8_UNORM',
    135: 'PIPE_FORMAT_I8_UNORM',
    136: 'PIPE_FORMAT_L8A8_UNORM',
    137: 'PIPE_FORMAT_L16_UNORM',
    138: 'PIPE_FORMAT_UYVY',
    139: 'PIPE_FORMAT_VYUY',
    140: 'PIPE_FORMAT_YUYV',
    141: 'PIPE_FORMAT_YVYU',
    142: 'PIPE_FORMAT_Z16_UNORM',
    143: 'PIPE_FORMAT_Z16_UNORM_S8_UINT',
    144: 'PIPE_FORMAT_Z32_UNORM',
    145: 'PIPE_FORMAT_Z32_FLOAT',
    146: 'PIPE_FORMAT_Z24_UNORM_S8_UINT',
    147: 'PIPE_FORMAT_S8_UINT_Z24_UNORM',
    148: 'PIPE_FORMAT_Z24X8_UNORM',
    149: 'PIPE_FORMAT_X8Z24_UNORM',
    150: 'PIPE_FORMAT_S8_UINT',
    151: 'PIPE_FORMAT_L8_SRGB',
    152: 'PIPE_FORMAT_R8_SRGB',
    153: 'PIPE_FORMAT_L8A8_SRGB',
    154: 'PIPE_FORMAT_R8G8_SRGB',
    155: 'PIPE_FORMAT_R8G8B8_SRGB',
    156: 'PIPE_FORMAT_B8G8R8_SRGB',
    157: 'PIPE_FORMAT_A8B8G8R8_SRGB',
    158: 'PIPE_FORMAT_X8B8G8R8_SRGB',
    159: 'PIPE_FORMAT_B8G8R8A8_SRGB',
    160: 'PIPE_FORMAT_B8G8R8X8_SRGB',
    161: 'PIPE_FORMAT_A8R8G8B8_SRGB',
    162: 'PIPE_FORMAT_X8R8G8B8_SRGB',
    163: 'PIPE_FORMAT_R8G8B8A8_SRGB',
    164: 'PIPE_FORMAT_DXT1_RGB',
    165: 'PIPE_FORMAT_DXT1_RGBA',
    166: 'PIPE_FORMAT_DXT3_RGBA',
    167: 'PIPE_FORMAT_DXT5_RGBA',
    168: 'PIPE_FORMAT_DXT1_SRGB',
    169: 'PIPE_FORMAT_DXT1_SRGBA',
    170: 'PIPE_FORMAT_DXT3_SRGBA',
    171: 'PIPE_FORMAT_DXT5_SRGBA',
    172: 'PIPE_FORMAT_RGTC1_UNORM',
    173: 'PIPE_FORMAT_RGTC1_SNORM',
    174: 'PIPE_FORMAT_RGTC2_UNORM',
    175: 'PIPE_FORMAT_RGTC2_SNORM',
    176: 'PIPE_FORMAT_R8G8_B8G8_UNORM',
    177: 'PIPE_FORMAT_G8R8_G8B8_UNORM',
    178: 'PIPE_FORMAT_X6G10_X6B10X6R10_420_UNORM',
    179: 'PIPE_FORMAT_X4G12_X4B12X4R12_420_UNORM',
    180: 'PIPE_FORMAT_X6R10_UNORM',
    181: 'PIPE_FORMAT_X6R10X6G10_UNORM',
    182: 'PIPE_FORMAT_X4R12_UNORM',
    183: 'PIPE_FORMAT_X4R12X4G12_UNORM',
    184: 'PIPE_FORMAT_R8SG8SB8UX8U_NORM',
    185: 'PIPE_FORMAT_R5SG5SB6U_NORM',
    186: 'PIPE_FORMAT_A8B8G8R8_UNORM',
    187: 'PIPE_FORMAT_B5G5R5X1_UNORM',
    188: 'PIPE_FORMAT_R9G9B9E5_FLOAT',
    189: 'PIPE_FORMAT_Z32_FLOAT_S8X24_UINT',
    190: 'PIPE_FORMAT_R1_UNORM',
    191: 'PIPE_FORMAT_R10G10B10X2_USCALED',
    192: 'PIPE_FORMAT_R10G10B10X2_SNORM',
    193: 'PIPE_FORMAT_L4A4_UNORM',
    194: 'PIPE_FORMAT_A2R10G10B10_UNORM',
    195: 'PIPE_FORMAT_A2B10G10R10_UNORM',
    196: 'PIPE_FORMAT_R10SG10SB10SA2U_NORM',
    197: 'PIPE_FORMAT_R8G8Bx_SNORM',
    198: 'PIPE_FORMAT_R8G8B8X8_UNORM',
    199: 'PIPE_FORMAT_B4G4R4X4_UNORM',
    200: 'PIPE_FORMAT_X24S8_UINT',
    201: 'PIPE_FORMAT_S8X24_UINT',
    202: 'PIPE_FORMAT_X32_S8X24_UINT',
    203: 'PIPE_FORMAT_R3G3B2_UNORM',
    204: 'PIPE_FORMAT_B2G3R3_UNORM',
    205: 'PIPE_FORMAT_L16A16_UNORM',
    206: 'PIPE_FORMAT_A16_UNORM',
    207: 'PIPE_FORMAT_I16_UNORM',
    208: 'PIPE_FORMAT_LATC1_UNORM',
    209: 'PIPE_FORMAT_LATC1_SNORM',
    210: 'PIPE_FORMAT_LATC2_UNORM',
    211: 'PIPE_FORMAT_LATC2_SNORM',
    212: 'PIPE_FORMAT_A8_SNORM',
    213: 'PIPE_FORMAT_L8_SNORM',
    214: 'PIPE_FORMAT_L8A8_SNORM',
    215: 'PIPE_FORMAT_I8_SNORM',
    216: 'PIPE_FORMAT_A16_SNORM',
    217: 'PIPE_FORMAT_L16_SNORM',
    218: 'PIPE_FORMAT_L16A16_SNORM',
    219: 'PIPE_FORMAT_I16_SNORM',
    220: 'PIPE_FORMAT_A16_FLOAT',
    221: 'PIPE_FORMAT_L16_FLOAT',
    222: 'PIPE_FORMAT_L16A16_FLOAT',
    223: 'PIPE_FORMAT_I16_FLOAT',
    224: 'PIPE_FORMAT_A32_FLOAT',
    225: 'PIPE_FORMAT_L32_FLOAT',
    226: 'PIPE_FORMAT_L32A32_FLOAT',
    227: 'PIPE_FORMAT_I32_FLOAT',
    228: 'PIPE_FORMAT_YV12',
    229: 'PIPE_FORMAT_YV16',
    230: 'PIPE_FORMAT_IYUV',
    231: 'PIPE_FORMAT_NV12',
    232: 'PIPE_FORMAT_NV21',
    233: 'PIPE_FORMAT_NV16',
    234: 'PIPE_FORMAT_NV15',
    235: 'PIPE_FORMAT_NV20',
    236: 'PIPE_FORMAT_Y8_400_UNORM',
    237: 'PIPE_FORMAT_Y8_U8_V8_422_UNORM',
    238: 'PIPE_FORMAT_Y8_U8_V8_444_UNORM',
    239: 'PIPE_FORMAT_Y8_U8_V8_440_UNORM',
    240: 'PIPE_FORMAT_Y10X6_U10X6_V10X6_420_UNORM',
    241: 'PIPE_FORMAT_Y10X6_U10X6_V10X6_422_UNORM',
    242: 'PIPE_FORMAT_Y10X6_U10X6_V10X6_444_UNORM',
    243: 'PIPE_FORMAT_Y12X4_U12X4_V12X4_420_UNORM',
    244: 'PIPE_FORMAT_Y12X4_U12X4_V12X4_422_UNORM',
    245: 'PIPE_FORMAT_Y12X4_U12X4_V12X4_444_UNORM',
    246: 'PIPE_FORMAT_Y16_U16_V16_420_UNORM',
    247: 'PIPE_FORMAT_Y16_U16_V16_422_UNORM',
    248: 'PIPE_FORMAT_Y16_U16V16_422_UNORM',
    249: 'PIPE_FORMAT_Y16_U16_V16_444_UNORM',
    250: 'PIPE_FORMAT_Y8U8V8_420_UNORM_PACKED',
    251: 'PIPE_FORMAT_Y10U10V10_420_UNORM_PACKED',
    252: 'PIPE_FORMAT_A4R4_UNORM',
    253: 'PIPE_FORMAT_R4A4_UNORM',
    254: 'PIPE_FORMAT_R8A8_UNORM',
    255: 'PIPE_FORMAT_A8R8_UNORM',
    256: 'PIPE_FORMAT_A8_UINT',
    257: 'PIPE_FORMAT_I8_UINT',
    258: 'PIPE_FORMAT_L8_UINT',
    259: 'PIPE_FORMAT_L8A8_UINT',
    260: 'PIPE_FORMAT_A8_SINT',
    261: 'PIPE_FORMAT_I8_SINT',
    262: 'PIPE_FORMAT_L8_SINT',
    263: 'PIPE_FORMAT_L8A8_SINT',
    264: 'PIPE_FORMAT_A16_UINT',
    265: 'PIPE_FORMAT_I16_UINT',
    266: 'PIPE_FORMAT_L16_UINT',
    267: 'PIPE_FORMAT_L16A16_UINT',
    268: 'PIPE_FORMAT_A16_SINT',
    269: 'PIPE_FORMAT_I16_SINT',
    270: 'PIPE_FORMAT_L16_SINT',
    271: 'PIPE_FORMAT_L16A16_SINT',
    272: 'PIPE_FORMAT_A32_UINT',
    273: 'PIPE_FORMAT_I32_UINT',
    274: 'PIPE_FORMAT_L32_UINT',
    275: 'PIPE_FORMAT_L32A32_UINT',
    276: 'PIPE_FORMAT_A32_SINT',
    277: 'PIPE_FORMAT_I32_SINT',
    278: 'PIPE_FORMAT_L32_SINT',
    279: 'PIPE_FORMAT_L32A32_SINT',
    280: 'PIPE_FORMAT_A8R8G8B8_UINT',
    281: 'PIPE_FORMAT_A8B8G8R8_UINT',
    282: 'PIPE_FORMAT_A2R10G10B10_UINT',
    283: 'PIPE_FORMAT_A2B10G10R10_UINT',
    284: 'PIPE_FORMAT_R5G6B5_UINT',
    285: 'PIPE_FORMAT_B5G6R5_UINT',
    286: 'PIPE_FORMAT_R5G5B5A1_UINT',
    287: 'PIPE_FORMAT_B5G5R5A1_UINT',
    288: 'PIPE_FORMAT_A1R5G5B5_UINT',
    289: 'PIPE_FORMAT_A1B5G5R5_UINT',
    290: 'PIPE_FORMAT_R4G4B4A4_UINT',
    291: 'PIPE_FORMAT_B4G4R4A4_UINT',
    292: 'PIPE_FORMAT_A4R4G4B4_UINT',
    293: 'PIPE_FORMAT_A4B4G4R4_UINT',
    294: 'PIPE_FORMAT_R3G3B2_UINT',
    295: 'PIPE_FORMAT_B2G3R3_UINT',
    296: 'PIPE_FORMAT_ETC1_RGB8',
    297: 'PIPE_FORMAT_R8G8_R8B8_UNORM',
    298: 'PIPE_FORMAT_R8B8_R8G8_UNORM',
    299: 'PIPE_FORMAT_G8R8_B8R8_UNORM',
    300: 'PIPE_FORMAT_B8R8_G8R8_UNORM',
    301: 'PIPE_FORMAT_G8B8_G8R8_UNORM',
    302: 'PIPE_FORMAT_B8G8_R8G8_UNORM',
    303: 'PIPE_FORMAT_R8G8B8X8_SNORM',
    304: 'PIPE_FORMAT_R8G8B8X8_SRGB',
    305: 'PIPE_FORMAT_R8G8B8X8_UINT',
    306: 'PIPE_FORMAT_R8G8B8X8_SINT',
    307: 'PIPE_FORMAT_B10G10R10X2_UNORM',
    308: 'PIPE_FORMAT_R16G16B16X16_UNORM',
    309: 'PIPE_FORMAT_R16G16B16X16_SNORM',
    310: 'PIPE_FORMAT_R16G16B16X16_FLOAT',
    311: 'PIPE_FORMAT_R16G16B16X16_UINT',
    312: 'PIPE_FORMAT_R16G16B16X16_SINT',
    313: 'PIPE_FORMAT_R32G32B32X32_FLOAT',
    314: 'PIPE_FORMAT_R32G32B32X32_UINT',
    315: 'PIPE_FORMAT_R32G32B32X32_SINT',
    316: 'PIPE_FORMAT_R8A8_SNORM',
    317: 'PIPE_FORMAT_R16A16_UNORM',
    318: 'PIPE_FORMAT_R16A16_SNORM',
    319: 'PIPE_FORMAT_R16A16_FLOAT',
    320: 'PIPE_FORMAT_R32A32_FLOAT',
    321: 'PIPE_FORMAT_R8A8_UINT',
    322: 'PIPE_FORMAT_R8A8_SINT',
    323: 'PIPE_FORMAT_R16A16_UINT',
    324: 'PIPE_FORMAT_R16A16_SINT',
    325: 'PIPE_FORMAT_R32A32_UINT',
    326: 'PIPE_FORMAT_R32A32_SINT',
    327: 'PIPE_FORMAT_B5G6R5_SRGB',
    328: 'PIPE_FORMAT_BPTC_RGBA_UNORM',
    329: 'PIPE_FORMAT_BPTC_SRGBA',
    330: 'PIPE_FORMAT_BPTC_RGB_FLOAT',
    331: 'PIPE_FORMAT_BPTC_RGB_UFLOAT',
    332: 'PIPE_FORMAT_G8R8_UNORM',
    333: 'PIPE_FORMAT_G8R8_SNORM',
    334: 'PIPE_FORMAT_G16R16_UNORM',
    335: 'PIPE_FORMAT_G16R16_SNORM',
    336: 'PIPE_FORMAT_A8B8G8R8_SNORM',
    337: 'PIPE_FORMAT_X8B8G8R8_SNORM',
    338: 'PIPE_FORMAT_ETC2_RGB8',
    339: 'PIPE_FORMAT_ETC2_SRGB8',
    340: 'PIPE_FORMAT_ETC2_RGB8A1',
    341: 'PIPE_FORMAT_ETC2_SRGB8A1',
    342: 'PIPE_FORMAT_ETC2_RGBA8',
    343: 'PIPE_FORMAT_ETC2_SRGBA8',
    344: 'PIPE_FORMAT_ETC2_R11_UNORM',
    345: 'PIPE_FORMAT_ETC2_R11_SNORM',
    346: 'PIPE_FORMAT_ETC2_RG11_UNORM',
    347: 'PIPE_FORMAT_ETC2_RG11_SNORM',
    348: 'PIPE_FORMAT_ASTC_4x4',
    349: 'PIPE_FORMAT_ASTC_5x4',
    350: 'PIPE_FORMAT_ASTC_5x5',
    351: 'PIPE_FORMAT_ASTC_6x5',
    352: 'PIPE_FORMAT_ASTC_6x6',
    353: 'PIPE_FORMAT_ASTC_8x5',
    354: 'PIPE_FORMAT_ASTC_8x6',
    355: 'PIPE_FORMAT_ASTC_8x8',
    356: 'PIPE_FORMAT_ASTC_10x5',
    357: 'PIPE_FORMAT_ASTC_10x6',
    358: 'PIPE_FORMAT_ASTC_10x8',
    359: 'PIPE_FORMAT_ASTC_10x10',
    360: 'PIPE_FORMAT_ASTC_12x10',
    361: 'PIPE_FORMAT_ASTC_12x12',
    362: 'PIPE_FORMAT_ASTC_4x4_SRGB',
    363: 'PIPE_FORMAT_ASTC_5x4_SRGB',
    364: 'PIPE_FORMAT_ASTC_5x5_SRGB',
    365: 'PIPE_FORMAT_ASTC_6x5_SRGB',
    366: 'PIPE_FORMAT_ASTC_6x6_SRGB',
    367: 'PIPE_FORMAT_ASTC_8x5_SRGB',
    368: 'PIPE_FORMAT_ASTC_8x6_SRGB',
    369: 'PIPE_FORMAT_ASTC_8x8_SRGB',
    370: 'PIPE_FORMAT_ASTC_10x5_SRGB',
    371: 'PIPE_FORMAT_ASTC_10x6_SRGB',
    372: 'PIPE_FORMAT_ASTC_10x8_SRGB',
    373: 'PIPE_FORMAT_ASTC_10x10_SRGB',
    374: 'PIPE_FORMAT_ASTC_12x10_SRGB',
    375: 'PIPE_FORMAT_ASTC_12x12_SRGB',
    376: 'PIPE_FORMAT_ASTC_3x3x3',
    377: 'PIPE_FORMAT_ASTC_4x3x3',
    378: 'PIPE_FORMAT_ASTC_4x4x3',
    379: 'PIPE_FORMAT_ASTC_4x4x4',
    380: 'PIPE_FORMAT_ASTC_5x4x4',
    381: 'PIPE_FORMAT_ASTC_5x5x4',
    382: 'PIPE_FORMAT_ASTC_5x5x5',
    383: 'PIPE_FORMAT_ASTC_6x5x5',
    384: 'PIPE_FORMAT_ASTC_6x6x5',
    385: 'PIPE_FORMAT_ASTC_6x6x6',
    386: 'PIPE_FORMAT_ASTC_3x3x3_SRGB',
    387: 'PIPE_FORMAT_ASTC_4x3x3_SRGB',
    388: 'PIPE_FORMAT_ASTC_4x4x3_SRGB',
    389: 'PIPE_FORMAT_ASTC_4x4x4_SRGB',
    390: 'PIPE_FORMAT_ASTC_5x4x4_SRGB',
    391: 'PIPE_FORMAT_ASTC_5x5x4_SRGB',
    392: 'PIPE_FORMAT_ASTC_5x5x5_SRGB',
    393: 'PIPE_FORMAT_ASTC_6x5x5_SRGB',
    394: 'PIPE_FORMAT_ASTC_6x6x5_SRGB',
    395: 'PIPE_FORMAT_ASTC_6x6x6_SRGB',
    396: 'PIPE_FORMAT_ASTC_4x4_FLOAT',
    397: 'PIPE_FORMAT_ASTC_5x4_FLOAT',
    398: 'PIPE_FORMAT_ASTC_5x5_FLOAT',
    399: 'PIPE_FORMAT_ASTC_6x5_FLOAT',
    400: 'PIPE_FORMAT_ASTC_6x6_FLOAT',
    401: 'PIPE_FORMAT_ASTC_8x5_FLOAT',
    402: 'PIPE_FORMAT_ASTC_8x6_FLOAT',
    403: 'PIPE_FORMAT_ASTC_8x8_FLOAT',
    404: 'PIPE_FORMAT_ASTC_10x5_FLOAT',
    405: 'PIPE_FORMAT_ASTC_10x6_FLOAT',
    406: 'PIPE_FORMAT_ASTC_10x8_FLOAT',
    407: 'PIPE_FORMAT_ASTC_10x10_FLOAT',
    408: 'PIPE_FORMAT_ASTC_12x10_FLOAT',
    409: 'PIPE_FORMAT_ASTC_12x12_FLOAT',
    410: 'PIPE_FORMAT_FXT1_RGB',
    411: 'PIPE_FORMAT_FXT1_RGBA',
    412: 'PIPE_FORMAT_P010',
    413: 'PIPE_FORMAT_P012',
    414: 'PIPE_FORMAT_P016',
    415: 'PIPE_FORMAT_P030',
    416: 'PIPE_FORMAT_Y210',
    417: 'PIPE_FORMAT_Y212',
    418: 'PIPE_FORMAT_Y216',
    419: 'PIPE_FORMAT_Y410',
    420: 'PIPE_FORMAT_Y412',
    421: 'PIPE_FORMAT_Y416',
    422: 'PIPE_FORMAT_R10G10B10X2_UNORM',
    423: 'PIPE_FORMAT_A1R5G5B5_UNORM',
    424: 'PIPE_FORMAT_A1B5G5R5_UNORM',
    425: 'PIPE_FORMAT_X1B5G5R5_UNORM',
    426: 'PIPE_FORMAT_R5G5B5A1_UNORM',
    427: 'PIPE_FORMAT_A4R4G4B4_UNORM',
    428: 'PIPE_FORMAT_A4B4G4R4_UNORM',
    429: 'PIPE_FORMAT_G8R8_SINT',
    430: 'PIPE_FORMAT_A8B8G8R8_SINT',
    431: 'PIPE_FORMAT_X8B8G8R8_SINT',
    432: 'PIPE_FORMAT_ATC_RGB',
    433: 'PIPE_FORMAT_ATC_RGBA_EXPLICIT',
    434: 'PIPE_FORMAT_ATC_RGBA_INTERPOLATED',
    435: 'PIPE_FORMAT_Z24_UNORM_S8_UINT_AS_R8G8B8A8',
    436: 'PIPE_FORMAT_AYUV',
    437: 'PIPE_FORMAT_XYUV',
    438: 'PIPE_FORMAT_R8G8B8_420_UNORM_PACKED',
    439: 'PIPE_FORMAT_R8_G8B8_420_UNORM',
    440: 'PIPE_FORMAT_R8_B8G8_420_UNORM',
    441: 'PIPE_FORMAT_G8_B8R8_420_UNORM',
    442: 'PIPE_FORMAT_R10G10B10_420_UNORM_PACKED',
    443: 'PIPE_FORMAT_R10_G10B10_420_UNORM',
    444: 'PIPE_FORMAT_R10_G10B10_422_UNORM',
    445: 'PIPE_FORMAT_R8_G8_B8_420_UNORM',
    446: 'PIPE_FORMAT_R8_B8_G8_420_UNORM',
    447: 'PIPE_FORMAT_G8_B8_R8_420_UNORM',
    448: 'PIPE_FORMAT_R8_G8B8_422_UNORM',
    449: 'PIPE_FORMAT_R8_B8G8_422_UNORM',
    450: 'PIPE_FORMAT_G8_B8R8_422_UNORM',
    451: 'PIPE_FORMAT_R8_G8_B8_UNORM',
    452: 'PIPE_FORMAT_Y8_UNORM',
    453: 'PIPE_FORMAT_B8G8R8X8_SNORM',
    454: 'PIPE_FORMAT_B8G8R8X8_UINT',
    455: 'PIPE_FORMAT_B8G8R8X8_SINT',
    456: 'PIPE_FORMAT_A8R8G8B8_SNORM',
    457: 'PIPE_FORMAT_A8R8G8B8_SINT',
    458: 'PIPE_FORMAT_X8R8G8B8_SNORM',
    459: 'PIPE_FORMAT_X8R8G8B8_SINT',
    460: 'PIPE_FORMAT_R5G5B5X1_UNORM',
    461: 'PIPE_FORMAT_X1R5G5B5_UNORM',
    462: 'PIPE_FORMAT_R4G4B4X4_UNORM',
    463: 'PIPE_FORMAT_B10G10R10X2_SNORM',
    464: 'PIPE_FORMAT_R5G6B5_SRGB',
    465: 'PIPE_FORMAT_R10G10B10X2_SINT',
    466: 'PIPE_FORMAT_B10G10R10X2_SINT',
    467: 'PIPE_FORMAT_G16R16_SINT',
    468: 'PIPE_FORMAT_COUNT',
}
PIPE_FORMAT_NONE = 0
PIPE_FORMAT_R64_UINT = 1
PIPE_FORMAT_R64G64_UINT = 2
PIPE_FORMAT_R64G64B64_UINT = 3
PIPE_FORMAT_R64G64B64A64_UINT = 4
PIPE_FORMAT_R64_SINT = 5
PIPE_FORMAT_R64G64_SINT = 6
PIPE_FORMAT_R64G64B64_SINT = 7
PIPE_FORMAT_R64G64B64A64_SINT = 8
PIPE_FORMAT_R64_FLOAT = 9
PIPE_FORMAT_R64G64_FLOAT = 10
PIPE_FORMAT_R64G64B64_FLOAT = 11
PIPE_FORMAT_R64G64B64A64_FLOAT = 12
PIPE_FORMAT_R32_FLOAT = 13
PIPE_FORMAT_R32G32_FLOAT = 14
PIPE_FORMAT_R32G32B32_FLOAT = 15
PIPE_FORMAT_R32G32B32A32_FLOAT = 16
PIPE_FORMAT_R32_UNORM = 17
PIPE_FORMAT_R32G32_UNORM = 18
PIPE_FORMAT_R32G32B32_UNORM = 19
PIPE_FORMAT_R32G32B32A32_UNORM = 20
PIPE_FORMAT_R32_USCALED = 21
PIPE_FORMAT_R32G32_USCALED = 22
PIPE_FORMAT_R32G32B32_USCALED = 23
PIPE_FORMAT_R32G32B32A32_USCALED = 24
PIPE_FORMAT_R32_SNORM = 25
PIPE_FORMAT_R32G32_SNORM = 26
PIPE_FORMAT_R32G32B32_SNORM = 27
PIPE_FORMAT_R32G32B32A32_SNORM = 28
PIPE_FORMAT_R32_SSCALED = 29
PIPE_FORMAT_R32G32_SSCALED = 30
PIPE_FORMAT_R32G32B32_SSCALED = 31
PIPE_FORMAT_R32G32B32A32_SSCALED = 32
PIPE_FORMAT_R16_UNORM = 33
PIPE_FORMAT_R16G16_UNORM = 34
PIPE_FORMAT_R16G16B16_UNORM = 35
PIPE_FORMAT_R16G16B16A16_UNORM = 36
PIPE_FORMAT_R16_USCALED = 37
PIPE_FORMAT_R16G16_USCALED = 38
PIPE_FORMAT_R16G16B16_USCALED = 39
PIPE_FORMAT_R16G16B16A16_USCALED = 40
PIPE_FORMAT_R16_SNORM = 41
PIPE_FORMAT_R16G16_SNORM = 42
PIPE_FORMAT_R16G16B16_SNORM = 43
PIPE_FORMAT_R16G16B16A16_SNORM = 44
PIPE_FORMAT_R16_SSCALED = 45
PIPE_FORMAT_R16G16_SSCALED = 46
PIPE_FORMAT_R16G16B16_SSCALED = 47
PIPE_FORMAT_R16G16B16A16_SSCALED = 48
PIPE_FORMAT_R8_UNORM = 49
PIPE_FORMAT_R8G8_UNORM = 50
PIPE_FORMAT_R8G8B8_UNORM = 51
PIPE_FORMAT_B8G8R8_UNORM = 52
PIPE_FORMAT_R8G8B8A8_UNORM = 53
PIPE_FORMAT_B8G8R8A8_UNORM = 54
PIPE_FORMAT_R8_USCALED = 55
PIPE_FORMAT_R8G8_USCALED = 56
PIPE_FORMAT_R8G8B8_USCALED = 57
PIPE_FORMAT_B8G8R8_USCALED = 58
PIPE_FORMAT_R8G8B8A8_USCALED = 59
PIPE_FORMAT_B8G8R8A8_USCALED = 60
PIPE_FORMAT_A8B8G8R8_USCALED = 61
PIPE_FORMAT_R8_SNORM = 62
PIPE_FORMAT_R8G8_SNORM = 63
PIPE_FORMAT_R8G8B8_SNORM = 64
PIPE_FORMAT_B8G8R8_SNORM = 65
PIPE_FORMAT_R8G8B8A8_SNORM = 66
PIPE_FORMAT_B8G8R8A8_SNORM = 67
PIPE_FORMAT_R8_SSCALED = 68
PIPE_FORMAT_R8G8_SSCALED = 69
PIPE_FORMAT_R8G8B8_SSCALED = 70
PIPE_FORMAT_B8G8R8_SSCALED = 71
PIPE_FORMAT_R8G8B8A8_SSCALED = 72
PIPE_FORMAT_B8G8R8A8_SSCALED = 73
PIPE_FORMAT_A8B8G8R8_SSCALED = 74
PIPE_FORMAT_A8R8G8B8_UNORM = 75
PIPE_FORMAT_R32_FIXED = 76
PIPE_FORMAT_R32G32_FIXED = 77
PIPE_FORMAT_R32G32B32_FIXED = 78
PIPE_FORMAT_R32G32B32A32_FIXED = 79
PIPE_FORMAT_R16_FLOAT = 80
PIPE_FORMAT_R16G16_FLOAT = 81
PIPE_FORMAT_R16G16B16_FLOAT = 82
PIPE_FORMAT_R16G16B16A16_FLOAT = 83
PIPE_FORMAT_R8_UINT = 84
PIPE_FORMAT_R8G8_UINT = 85
PIPE_FORMAT_R8G8B8_UINT = 86
PIPE_FORMAT_B8G8R8_UINT = 87
PIPE_FORMAT_R8G8B8A8_UINT = 88
PIPE_FORMAT_B8G8R8A8_UINT = 89
PIPE_FORMAT_R8_SINT = 90
PIPE_FORMAT_R8G8_SINT = 91
PIPE_FORMAT_R8G8B8_SINT = 92
PIPE_FORMAT_B8G8R8_SINT = 93
PIPE_FORMAT_R8G8B8A8_SINT = 94
PIPE_FORMAT_B8G8R8A8_SINT = 95
PIPE_FORMAT_R16_UINT = 96
PIPE_FORMAT_R16G16_UINT = 97
PIPE_FORMAT_R16G16B16_UINT = 98
PIPE_FORMAT_R16G16B16A16_UINT = 99
PIPE_FORMAT_R16_SINT = 100
PIPE_FORMAT_R16G16_SINT = 101
PIPE_FORMAT_R16G16B16_SINT = 102
PIPE_FORMAT_R16G16B16A16_SINT = 103
PIPE_FORMAT_R32_UINT = 104
PIPE_FORMAT_R32G32_UINT = 105
PIPE_FORMAT_R32G32B32_UINT = 106
PIPE_FORMAT_R32G32B32A32_UINT = 107
PIPE_FORMAT_R32_SINT = 108
PIPE_FORMAT_R32G32_SINT = 109
PIPE_FORMAT_R32G32B32_SINT = 110
PIPE_FORMAT_R32G32B32A32_SINT = 111
PIPE_FORMAT_R10G10B10A2_UNORM = 112
PIPE_FORMAT_R10G10B10A2_SNORM = 113
PIPE_FORMAT_R10G10B10A2_USCALED = 114
PIPE_FORMAT_R10G10B10A2_SSCALED = 115
PIPE_FORMAT_B10G10R10A2_UNORM = 116
PIPE_FORMAT_B10G10R10A2_SNORM = 117
PIPE_FORMAT_B10G10R10A2_USCALED = 118
PIPE_FORMAT_B10G10R10A2_SSCALED = 119
PIPE_FORMAT_R11G11B10_FLOAT = 120
PIPE_FORMAT_R10G10B10A2_UINT = 121
PIPE_FORMAT_R10G10B10A2_SINT = 122
PIPE_FORMAT_B10G10R10A2_UINT = 123
PIPE_FORMAT_B10G10R10A2_SINT = 124
PIPE_FORMAT_B8G8R8X8_UNORM = 125
PIPE_FORMAT_X8B8G8R8_UNORM = 126
PIPE_FORMAT_X8R8G8B8_UNORM = 127
PIPE_FORMAT_B5G5R5A1_UNORM = 128
PIPE_FORMAT_R4G4B4A4_UNORM = 129
PIPE_FORMAT_B4G4R4A4_UNORM = 130
PIPE_FORMAT_R5G6B5_UNORM = 131
PIPE_FORMAT_B5G6R5_UNORM = 132
PIPE_FORMAT_L8_UNORM = 133
PIPE_FORMAT_A8_UNORM = 134
PIPE_FORMAT_I8_UNORM = 135
PIPE_FORMAT_L8A8_UNORM = 136
PIPE_FORMAT_L16_UNORM = 137
PIPE_FORMAT_UYVY = 138
PIPE_FORMAT_VYUY = 139
PIPE_FORMAT_YUYV = 140
PIPE_FORMAT_YVYU = 141
PIPE_FORMAT_Z16_UNORM = 142
PIPE_FORMAT_Z16_UNORM_S8_UINT = 143
PIPE_FORMAT_Z32_UNORM = 144
PIPE_FORMAT_Z32_FLOAT = 145
PIPE_FORMAT_Z24_UNORM_S8_UINT = 146
PIPE_FORMAT_S8_UINT_Z24_UNORM = 147
PIPE_FORMAT_Z24X8_UNORM = 148
PIPE_FORMAT_X8Z24_UNORM = 149
PIPE_FORMAT_S8_UINT = 150
PIPE_FORMAT_L8_SRGB = 151
PIPE_FORMAT_R8_SRGB = 152
PIPE_FORMAT_L8A8_SRGB = 153
PIPE_FORMAT_R8G8_SRGB = 154
PIPE_FORMAT_R8G8B8_SRGB = 155
PIPE_FORMAT_B8G8R8_SRGB = 156
PIPE_FORMAT_A8B8G8R8_SRGB = 157
PIPE_FORMAT_X8B8G8R8_SRGB = 158
PIPE_FORMAT_B8G8R8A8_SRGB = 159
PIPE_FORMAT_B8G8R8X8_SRGB = 160
PIPE_FORMAT_A8R8G8B8_SRGB = 161
PIPE_FORMAT_X8R8G8B8_SRGB = 162
PIPE_FORMAT_R8G8B8A8_SRGB = 163
PIPE_FORMAT_DXT1_RGB = 164
PIPE_FORMAT_DXT1_RGBA = 165
PIPE_FORMAT_DXT3_RGBA = 166
PIPE_FORMAT_DXT5_RGBA = 167
PIPE_FORMAT_DXT1_SRGB = 168
PIPE_FORMAT_DXT1_SRGBA = 169
PIPE_FORMAT_DXT3_SRGBA = 170
PIPE_FORMAT_DXT5_SRGBA = 171
PIPE_FORMAT_RGTC1_UNORM = 172
PIPE_FORMAT_RGTC1_SNORM = 173
PIPE_FORMAT_RGTC2_UNORM = 174
PIPE_FORMAT_RGTC2_SNORM = 175
PIPE_FORMAT_R8G8_B8G8_UNORM = 176
PIPE_FORMAT_G8R8_G8B8_UNORM = 177
PIPE_FORMAT_X6G10_X6B10X6R10_420_UNORM = 178
PIPE_FORMAT_X4G12_X4B12X4R12_420_UNORM = 179
PIPE_FORMAT_X6R10_UNORM = 180
PIPE_FORMAT_X6R10X6G10_UNORM = 181
PIPE_FORMAT_X4R12_UNORM = 182
PIPE_FORMAT_X4R12X4G12_UNORM = 183
PIPE_FORMAT_R8SG8SB8UX8U_NORM = 184
PIPE_FORMAT_R5SG5SB6U_NORM = 185
PIPE_FORMAT_A8B8G8R8_UNORM = 186
PIPE_FORMAT_B5G5R5X1_UNORM = 187
PIPE_FORMAT_R9G9B9E5_FLOAT = 188
PIPE_FORMAT_Z32_FLOAT_S8X24_UINT = 189
PIPE_FORMAT_R1_UNORM = 190
PIPE_FORMAT_R10G10B10X2_USCALED = 191
PIPE_FORMAT_R10G10B10X2_SNORM = 192
PIPE_FORMAT_L4A4_UNORM = 193
PIPE_FORMAT_A2R10G10B10_UNORM = 194
PIPE_FORMAT_A2B10G10R10_UNORM = 195
PIPE_FORMAT_R10SG10SB10SA2U_NORM = 196
PIPE_FORMAT_R8G8Bx_SNORM = 197
PIPE_FORMAT_R8G8B8X8_UNORM = 198
PIPE_FORMAT_B4G4R4X4_UNORM = 199
PIPE_FORMAT_X24S8_UINT = 200
PIPE_FORMAT_S8X24_UINT = 201
PIPE_FORMAT_X32_S8X24_UINT = 202
PIPE_FORMAT_R3G3B2_UNORM = 203
PIPE_FORMAT_B2G3R3_UNORM = 204
PIPE_FORMAT_L16A16_UNORM = 205
PIPE_FORMAT_A16_UNORM = 206
PIPE_FORMAT_I16_UNORM = 207
PIPE_FORMAT_LATC1_UNORM = 208
PIPE_FORMAT_LATC1_SNORM = 209
PIPE_FORMAT_LATC2_UNORM = 210
PIPE_FORMAT_LATC2_SNORM = 211
PIPE_FORMAT_A8_SNORM = 212
PIPE_FORMAT_L8_SNORM = 213
PIPE_FORMAT_L8A8_SNORM = 214
PIPE_FORMAT_I8_SNORM = 215
PIPE_FORMAT_A16_SNORM = 216
PIPE_FORMAT_L16_SNORM = 217
PIPE_FORMAT_L16A16_SNORM = 218
PIPE_FORMAT_I16_SNORM = 219
PIPE_FORMAT_A16_FLOAT = 220
PIPE_FORMAT_L16_FLOAT = 221
PIPE_FORMAT_L16A16_FLOAT = 222
PIPE_FORMAT_I16_FLOAT = 223
PIPE_FORMAT_A32_FLOAT = 224
PIPE_FORMAT_L32_FLOAT = 225
PIPE_FORMAT_L32A32_FLOAT = 226
PIPE_FORMAT_I32_FLOAT = 227
PIPE_FORMAT_YV12 = 228
PIPE_FORMAT_YV16 = 229
PIPE_FORMAT_IYUV = 230
PIPE_FORMAT_NV12 = 231
PIPE_FORMAT_NV21 = 232
PIPE_FORMAT_NV16 = 233
PIPE_FORMAT_NV15 = 234
PIPE_FORMAT_NV20 = 235
PIPE_FORMAT_Y8_400_UNORM = 236
PIPE_FORMAT_Y8_U8_V8_422_UNORM = 237
PIPE_FORMAT_Y8_U8_V8_444_UNORM = 238
PIPE_FORMAT_Y8_U8_V8_440_UNORM = 239
PIPE_FORMAT_Y10X6_U10X6_V10X6_420_UNORM = 240
PIPE_FORMAT_Y10X6_U10X6_V10X6_422_UNORM = 241
PIPE_FORMAT_Y10X6_U10X6_V10X6_444_UNORM = 242
PIPE_FORMAT_Y12X4_U12X4_V12X4_420_UNORM = 243
PIPE_FORMAT_Y12X4_U12X4_V12X4_422_UNORM = 244
PIPE_FORMAT_Y12X4_U12X4_V12X4_444_UNORM = 245
PIPE_FORMAT_Y16_U16_V16_420_UNORM = 246
PIPE_FORMAT_Y16_U16_V16_422_UNORM = 247
PIPE_FORMAT_Y16_U16V16_422_UNORM = 248
PIPE_FORMAT_Y16_U16_V16_444_UNORM = 249
PIPE_FORMAT_Y8U8V8_420_UNORM_PACKED = 250
PIPE_FORMAT_Y10U10V10_420_UNORM_PACKED = 251
PIPE_FORMAT_A4R4_UNORM = 252
PIPE_FORMAT_R4A4_UNORM = 253
PIPE_FORMAT_R8A8_UNORM = 254
PIPE_FORMAT_A8R8_UNORM = 255
PIPE_FORMAT_A8_UINT = 256
PIPE_FORMAT_I8_UINT = 257
PIPE_FORMAT_L8_UINT = 258
PIPE_FORMAT_L8A8_UINT = 259
PIPE_FORMAT_A8_SINT = 260
PIPE_FORMAT_I8_SINT = 261
PIPE_FORMAT_L8_SINT = 262
PIPE_FORMAT_L8A8_SINT = 263
PIPE_FORMAT_A16_UINT = 264
PIPE_FORMAT_I16_UINT = 265
PIPE_FORMAT_L16_UINT = 266
PIPE_FORMAT_L16A16_UINT = 267
PIPE_FORMAT_A16_SINT = 268
PIPE_FORMAT_I16_SINT = 269
PIPE_FORMAT_L16_SINT = 270
PIPE_FORMAT_L16A16_SINT = 271
PIPE_FORMAT_A32_UINT = 272
PIPE_FORMAT_I32_UINT = 273
PIPE_FORMAT_L32_UINT = 274
PIPE_FORMAT_L32A32_UINT = 275
PIPE_FORMAT_A32_SINT = 276
PIPE_FORMAT_I32_SINT = 277
PIPE_FORMAT_L32_SINT = 278
PIPE_FORMAT_L32A32_SINT = 279
PIPE_FORMAT_A8R8G8B8_UINT = 280
PIPE_FORMAT_A8B8G8R8_UINT = 281
PIPE_FORMAT_A2R10G10B10_UINT = 282
PIPE_FORMAT_A2B10G10R10_UINT = 283
PIPE_FORMAT_R5G6B5_UINT = 284
PIPE_FORMAT_B5G6R5_UINT = 285
PIPE_FORMAT_R5G5B5A1_UINT = 286
PIPE_FORMAT_B5G5R5A1_UINT = 287
PIPE_FORMAT_A1R5G5B5_UINT = 288
PIPE_FORMAT_A1B5G5R5_UINT = 289
PIPE_FORMAT_R4G4B4A4_UINT = 290
PIPE_FORMAT_B4G4R4A4_UINT = 291
PIPE_FORMAT_A4R4G4B4_UINT = 292
PIPE_FORMAT_A4B4G4R4_UINT = 293
PIPE_FORMAT_R3G3B2_UINT = 294
PIPE_FORMAT_B2G3R3_UINT = 295
PIPE_FORMAT_ETC1_RGB8 = 296
PIPE_FORMAT_R8G8_R8B8_UNORM = 297
PIPE_FORMAT_R8B8_R8G8_UNORM = 298
PIPE_FORMAT_G8R8_B8R8_UNORM = 299
PIPE_FORMAT_B8R8_G8R8_UNORM = 300
PIPE_FORMAT_G8B8_G8R8_UNORM = 301
PIPE_FORMAT_B8G8_R8G8_UNORM = 302
PIPE_FORMAT_R8G8B8X8_SNORM = 303
PIPE_FORMAT_R8G8B8X8_SRGB = 304
PIPE_FORMAT_R8G8B8X8_UINT = 305
PIPE_FORMAT_R8G8B8X8_SINT = 306
PIPE_FORMAT_B10G10R10X2_UNORM = 307
PIPE_FORMAT_R16G16B16X16_UNORM = 308
PIPE_FORMAT_R16G16B16X16_SNORM = 309
PIPE_FORMAT_R16G16B16X16_FLOAT = 310
PIPE_FORMAT_R16G16B16X16_UINT = 311
PIPE_FORMAT_R16G16B16X16_SINT = 312
PIPE_FORMAT_R32G32B32X32_FLOAT = 313
PIPE_FORMAT_R32G32B32X32_UINT = 314
PIPE_FORMAT_R32G32B32X32_SINT = 315
PIPE_FORMAT_R8A8_SNORM = 316
PIPE_FORMAT_R16A16_UNORM = 317
PIPE_FORMAT_R16A16_SNORM = 318
PIPE_FORMAT_R16A16_FLOAT = 319
PIPE_FORMAT_R32A32_FLOAT = 320
PIPE_FORMAT_R8A8_UINT = 321
PIPE_FORMAT_R8A8_SINT = 322
PIPE_FORMAT_R16A16_UINT = 323
PIPE_FORMAT_R16A16_SINT = 324
PIPE_FORMAT_R32A32_UINT = 325
PIPE_FORMAT_R32A32_SINT = 326
PIPE_FORMAT_B5G6R5_SRGB = 327
PIPE_FORMAT_BPTC_RGBA_UNORM = 328
PIPE_FORMAT_BPTC_SRGBA = 329
PIPE_FORMAT_BPTC_RGB_FLOAT = 330
PIPE_FORMAT_BPTC_RGB_UFLOAT = 331
PIPE_FORMAT_G8R8_UNORM = 332
PIPE_FORMAT_G8R8_SNORM = 333
PIPE_FORMAT_G16R16_UNORM = 334
PIPE_FORMAT_G16R16_SNORM = 335
PIPE_FORMAT_A8B8G8R8_SNORM = 336
PIPE_FORMAT_X8B8G8R8_SNORM = 337
PIPE_FORMAT_ETC2_RGB8 = 338
PIPE_FORMAT_ETC2_SRGB8 = 339
PIPE_FORMAT_ETC2_RGB8A1 = 340
PIPE_FORMAT_ETC2_SRGB8A1 = 341
PIPE_FORMAT_ETC2_RGBA8 = 342
PIPE_FORMAT_ETC2_SRGBA8 = 343
PIPE_FORMAT_ETC2_R11_UNORM = 344
PIPE_FORMAT_ETC2_R11_SNORM = 345
PIPE_FORMAT_ETC2_RG11_UNORM = 346
PIPE_FORMAT_ETC2_RG11_SNORM = 347
PIPE_FORMAT_ASTC_4x4 = 348
PIPE_FORMAT_ASTC_5x4 = 349
PIPE_FORMAT_ASTC_5x5 = 350
PIPE_FORMAT_ASTC_6x5 = 351
PIPE_FORMAT_ASTC_6x6 = 352
PIPE_FORMAT_ASTC_8x5 = 353
PIPE_FORMAT_ASTC_8x6 = 354
PIPE_FORMAT_ASTC_8x8 = 355
PIPE_FORMAT_ASTC_10x5 = 356
PIPE_FORMAT_ASTC_10x6 = 357
PIPE_FORMAT_ASTC_10x8 = 358
PIPE_FORMAT_ASTC_10x10 = 359
PIPE_FORMAT_ASTC_12x10 = 360
PIPE_FORMAT_ASTC_12x12 = 361
PIPE_FORMAT_ASTC_4x4_SRGB = 362
PIPE_FORMAT_ASTC_5x4_SRGB = 363
PIPE_FORMAT_ASTC_5x5_SRGB = 364
PIPE_FORMAT_ASTC_6x5_SRGB = 365
PIPE_FORMAT_ASTC_6x6_SRGB = 366
PIPE_FORMAT_ASTC_8x5_SRGB = 367
PIPE_FORMAT_ASTC_8x6_SRGB = 368
PIPE_FORMAT_ASTC_8x8_SRGB = 369
PIPE_FORMAT_ASTC_10x5_SRGB = 370
PIPE_FORMAT_ASTC_10x6_SRGB = 371
PIPE_FORMAT_ASTC_10x8_SRGB = 372
PIPE_FORMAT_ASTC_10x10_SRGB = 373
PIPE_FORMAT_ASTC_12x10_SRGB = 374
PIPE_FORMAT_ASTC_12x12_SRGB = 375
PIPE_FORMAT_ASTC_3x3x3 = 376
PIPE_FORMAT_ASTC_4x3x3 = 377
PIPE_FORMAT_ASTC_4x4x3 = 378
PIPE_FORMAT_ASTC_4x4x4 = 379
PIPE_FORMAT_ASTC_5x4x4 = 380
PIPE_FORMAT_ASTC_5x5x4 = 381
PIPE_FORMAT_ASTC_5x5x5 = 382
PIPE_FORMAT_ASTC_6x5x5 = 383
PIPE_FORMAT_ASTC_6x6x5 = 384
PIPE_FORMAT_ASTC_6x6x6 = 385
PIPE_FORMAT_ASTC_3x3x3_SRGB = 386
PIPE_FORMAT_ASTC_4x3x3_SRGB = 387
PIPE_FORMAT_ASTC_4x4x3_SRGB = 388
PIPE_FORMAT_ASTC_4x4x4_SRGB = 389
PIPE_FORMAT_ASTC_5x4x4_SRGB = 390
PIPE_FORMAT_ASTC_5x5x4_SRGB = 391
PIPE_FORMAT_ASTC_5x5x5_SRGB = 392
PIPE_FORMAT_ASTC_6x5x5_SRGB = 393
PIPE_FORMAT_ASTC_6x6x5_SRGB = 394
PIPE_FORMAT_ASTC_6x6x6_SRGB = 395
PIPE_FORMAT_ASTC_4x4_FLOAT = 396
PIPE_FORMAT_ASTC_5x4_FLOAT = 397
PIPE_FORMAT_ASTC_5x5_FLOAT = 398
PIPE_FORMAT_ASTC_6x5_FLOAT = 399
PIPE_FORMAT_ASTC_6x6_FLOAT = 400
PIPE_FORMAT_ASTC_8x5_FLOAT = 401
PIPE_FORMAT_ASTC_8x6_FLOAT = 402
PIPE_FORMAT_ASTC_8x8_FLOAT = 403
PIPE_FORMAT_ASTC_10x5_FLOAT = 404
PIPE_FORMAT_ASTC_10x6_FLOAT = 405
PIPE_FORMAT_ASTC_10x8_FLOAT = 406
PIPE_FORMAT_ASTC_10x10_FLOAT = 407
PIPE_FORMAT_ASTC_12x10_FLOAT = 408
PIPE_FORMAT_ASTC_12x12_FLOAT = 409
PIPE_FORMAT_FXT1_RGB = 410
PIPE_FORMAT_FXT1_RGBA = 411
PIPE_FORMAT_P010 = 412
PIPE_FORMAT_P012 = 413
PIPE_FORMAT_P016 = 414
PIPE_FORMAT_P030 = 415
PIPE_FORMAT_Y210 = 416
PIPE_FORMAT_Y212 = 417
PIPE_FORMAT_Y216 = 418
PIPE_FORMAT_Y410 = 419
PIPE_FORMAT_Y412 = 420
PIPE_FORMAT_Y416 = 421
PIPE_FORMAT_R10G10B10X2_UNORM = 422
PIPE_FORMAT_A1R5G5B5_UNORM = 423
PIPE_FORMAT_A1B5G5R5_UNORM = 424
PIPE_FORMAT_X1B5G5R5_UNORM = 425
PIPE_FORMAT_R5G5B5A1_UNORM = 426
PIPE_FORMAT_A4R4G4B4_UNORM = 427
PIPE_FORMAT_A4B4G4R4_UNORM = 428
PIPE_FORMAT_G8R8_SINT = 429
PIPE_FORMAT_A8B8G8R8_SINT = 430
PIPE_FORMAT_X8B8G8R8_SINT = 431
PIPE_FORMAT_ATC_RGB = 432
PIPE_FORMAT_ATC_RGBA_EXPLICIT = 433
PIPE_FORMAT_ATC_RGBA_INTERPOLATED = 434
PIPE_FORMAT_Z24_UNORM_S8_UINT_AS_R8G8B8A8 = 435
PIPE_FORMAT_AYUV = 436
PIPE_FORMAT_XYUV = 437
PIPE_FORMAT_R8G8B8_420_UNORM_PACKED = 438
PIPE_FORMAT_R8_G8B8_420_UNORM = 439
PIPE_FORMAT_R8_B8G8_420_UNORM = 440
PIPE_FORMAT_G8_B8R8_420_UNORM = 441
PIPE_FORMAT_R10G10B10_420_UNORM_PACKED = 442
PIPE_FORMAT_R10_G10B10_420_UNORM = 443
PIPE_FORMAT_R10_G10B10_422_UNORM = 444
PIPE_FORMAT_R8_G8_B8_420_UNORM = 445
PIPE_FORMAT_R8_B8_G8_420_UNORM = 446
PIPE_FORMAT_G8_B8_R8_420_UNORM = 447
PIPE_FORMAT_R8_G8B8_422_UNORM = 448
PIPE_FORMAT_R8_B8G8_422_UNORM = 449
PIPE_FORMAT_G8_B8R8_422_UNORM = 450
PIPE_FORMAT_R8_G8_B8_UNORM = 451
PIPE_FORMAT_Y8_UNORM = 452
PIPE_FORMAT_B8G8R8X8_SNORM = 453
PIPE_FORMAT_B8G8R8X8_UINT = 454
PIPE_FORMAT_B8G8R8X8_SINT = 455
PIPE_FORMAT_A8R8G8B8_SNORM = 456
PIPE_FORMAT_A8R8G8B8_SINT = 457
PIPE_FORMAT_X8R8G8B8_SNORM = 458
PIPE_FORMAT_X8R8G8B8_SINT = 459
PIPE_FORMAT_R5G5B5X1_UNORM = 460
PIPE_FORMAT_X1R5G5B5_UNORM = 461
PIPE_FORMAT_R4G4B4X4_UNORM = 462
PIPE_FORMAT_B10G10R10X2_SNORM = 463
PIPE_FORMAT_R5G6B5_SRGB = 464
PIPE_FORMAT_R10G10B10X2_SINT = 465
PIPE_FORMAT_B10G10R10X2_SINT = 466
PIPE_FORMAT_G16R16_SINT = 467
PIPE_FORMAT_COUNT = 468
pipe_format = ctypes.c_uint32 # enum
class struct_util_format_block(Structure):
    pass

struct_util_format_block._pack_ = 1 # source:False
struct_util_format_block._fields_ = [
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint32),
    ('depth', ctypes.c_uint32),
    ('bits', ctypes.c_uint32),
]


# values for enumeration 'util_format_layout'
util_format_layout__enumvalues = {
    0: 'UTIL_FORMAT_LAYOUT_PLAIN',
    1: 'UTIL_FORMAT_LAYOUT_SUBSAMPLED',
    2: 'UTIL_FORMAT_LAYOUT_S3TC',
    3: 'UTIL_FORMAT_LAYOUT_RGTC',
    4: 'UTIL_FORMAT_LAYOUT_ETC',
    5: 'UTIL_FORMAT_LAYOUT_BPTC',
    6: 'UTIL_FORMAT_LAYOUT_ASTC',
    7: 'UTIL_FORMAT_LAYOUT_ATC',
    8: 'UTIL_FORMAT_LAYOUT_PLANAR2',
    9: 'UTIL_FORMAT_LAYOUT_PLANAR3',
    10: 'UTIL_FORMAT_LAYOUT_FXT1',
    11: 'UTIL_FORMAT_LAYOUT_OTHER',
}
UTIL_FORMAT_LAYOUT_PLAIN = 0
UTIL_FORMAT_LAYOUT_SUBSAMPLED = 1
UTIL_FORMAT_LAYOUT_S3TC = 2
UTIL_FORMAT_LAYOUT_RGTC = 3
UTIL_FORMAT_LAYOUT_ETC = 4
UTIL_FORMAT_LAYOUT_BPTC = 5
UTIL_FORMAT_LAYOUT_ASTC = 6
UTIL_FORMAT_LAYOUT_ATC = 7
UTIL_FORMAT_LAYOUT_PLANAR2 = 8
UTIL_FORMAT_LAYOUT_PLANAR3 = 9
UTIL_FORMAT_LAYOUT_FXT1 = 10
UTIL_FORMAT_LAYOUT_OTHER = 11
util_format_layout = ctypes.c_uint32 # enum
class struct_util_format_channel_description(Structure):
    pass

struct_util_format_channel_description._pack_ = 1 # source:False
struct_util_format_channel_description._fields_ = [
    ('type', ctypes.c_uint32, 5),
    ('normalized', ctypes.c_uint32, 1),
    ('pure_integer', ctypes.c_uint32, 1),
    ('size', ctypes.c_uint32, 9),
    ('shift', ctypes.c_uint32, 16),
]


# values for enumeration 'util_format_colorspace'
util_format_colorspace__enumvalues = {
    0: 'UTIL_FORMAT_COLORSPACE_RGB',
    1: 'UTIL_FORMAT_COLORSPACE_SRGB',
    2: 'UTIL_FORMAT_COLORSPACE_YUV',
    3: 'UTIL_FORMAT_COLORSPACE_ZS',
}
UTIL_FORMAT_COLORSPACE_RGB = 0
UTIL_FORMAT_COLORSPACE_SRGB = 1
UTIL_FORMAT_COLORSPACE_YUV = 2
UTIL_FORMAT_COLORSPACE_ZS = 3
util_format_colorspace = ctypes.c_uint32 # enum
class union_util_format_description_0(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('srgb_equivalent', pipe_format),
    ('linear_equivalent', pipe_format),
     ]

struct_util_format_description._pack_ = 1 # source:False
struct_util_format_description._anonymous_ = ('_0',)
struct_util_format_description._fields_ = [
    ('format', pipe_format),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('short_name', ctypes.POINTER(ctypes.c_char)),
    ('block', struct_util_format_block),
    ('layout', util_format_layout),
    ('nr_channels', ctypes.c_uint32, 3),
    ('is_array', ctypes.c_uint32, 1),
    ('is_bitmask', ctypes.c_uint32, 1),
    ('is_mixed', ctypes.c_uint32, 1),
    ('is_unorm', ctypes.c_uint32, 1),
    ('is_snorm', ctypes.c_uint32, 1),
    ('PADDING_1', ctypes.c_uint32, 24),
    ('channel', struct_util_format_channel_description * 4),
    ('swizzle', ctypes.c_ubyte * 4),
    ('colorspace', util_format_colorspace),
    ('_0', union_util_format_description_0),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

try:
    lp_type_from_format_desc = _libraries['FIXME_STUB'].lp_type_from_format_desc
    lp_type_from_format_desc.restype = None
    lp_type_from_format_desc.argtypes = [ctypes.POINTER(struct_lp_type), ctypes.POINTER(struct_util_format_description)]
except AttributeError:
    pass
try:
    lp_type_from_format = _libraries['FIXME_STUB'].lp_type_from_format
    lp_type_from_format.restype = None
    lp_type_from_format.argtypes = [ctypes.POINTER(struct_lp_type), pipe_format]
except AttributeError:
    pass
try:
    lp_type_width = _libraries['FIXME_STUB'].lp_type_width
    lp_type_width.restype = ctypes.c_uint32
    lp_type_width.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_type_float = _libraries['FIXME_STUB'].lp_type_float
    lp_type_float.restype = struct_lp_type
    lp_type_float.argtypes = [ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_type_float_vec = _libraries['FIXME_STUB'].lp_type_float_vec
    lp_type_float_vec.restype = struct_lp_type
    lp_type_float_vec.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_type_int = _libraries['FIXME_STUB'].lp_type_int
    lp_type_int.restype = struct_lp_type
    lp_type_int.argtypes = [ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_type_int_vec = _libraries['FIXME_STUB'].lp_type_int_vec
    lp_type_int_vec.restype = struct_lp_type
    lp_type_int_vec.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_type_uint = _libraries['FIXME_STUB'].lp_type_uint
    lp_type_uint.restype = struct_lp_type
    lp_type_uint.argtypes = [ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_type_uint_vec = _libraries['FIXME_STUB'].lp_type_uint_vec
    lp_type_uint_vec.restype = struct_lp_type
    lp_type_uint_vec.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_type_unorm = _libraries['FIXME_STUB'].lp_type_unorm
    lp_type_unorm.restype = struct_lp_type
    lp_type_unorm.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_type_fixed = _libraries['FIXME_STUB'].lp_type_fixed
    lp_type_fixed.restype = struct_lp_type
    lp_type_fixed.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_type_ufixed = _libraries['FIXME_STUB'].lp_type_ufixed
    lp_type_ufixed.restype = struct_lp_type
    lp_type_ufixed.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
except AttributeError:
    pass
LLVMTypeRef = ctypes.POINTER(struct_LLVMOpaqueType)
try:
    lp_build_elem_type = _libraries['FIXME_STUB'].lp_build_elem_type
    lp_build_elem_type.restype = LLVMTypeRef
    lp_build_elem_type.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type]
except AttributeError:
    pass
try:
    lp_build_vec_type = _libraries['FIXME_STUB'].lp_build_vec_type
    lp_build_vec_type.restype = LLVMTypeRef
    lp_build_vec_type.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type]
except AttributeError:
    pass
try:
    lp_check_elem_type = _libraries['FIXME_STUB'].lp_check_elem_type
    lp_check_elem_type.restype = ctypes.c_bool
    lp_check_elem_type.argtypes = [struct_lp_type, LLVMTypeRef]
except AttributeError:
    pass
try:
    lp_check_vec_type = _libraries['FIXME_STUB'].lp_check_vec_type
    lp_check_vec_type.restype = ctypes.c_bool
    lp_check_vec_type.argtypes = [struct_lp_type, LLVMTypeRef]
except AttributeError:
    pass
LLVMValueRef = ctypes.POINTER(struct_LLVMOpaqueValue)
try:
    lp_check_value = _libraries['FIXME_STUB'].lp_check_value
    lp_check_value.restype = ctypes.c_bool
    lp_check_value.argtypes = [struct_lp_type, LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_int_elem_type = _libraries['FIXME_STUB'].lp_build_int_elem_type
    lp_build_int_elem_type.restype = LLVMTypeRef
    lp_build_int_elem_type.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type]
except AttributeError:
    pass
try:
    lp_build_int_vec_type = _libraries['FIXME_STUB'].lp_build_int_vec_type
    lp_build_int_vec_type.restype = LLVMTypeRef
    lp_build_int_vec_type.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type]
except AttributeError:
    pass
try:
    lp_float32_vec4_type = _libraries['FIXME_STUB'].lp_float32_vec4_type
    lp_float32_vec4_type.restype = struct_lp_type
    lp_float32_vec4_type.argtypes = []
except AttributeError:
    pass
try:
    lp_int32_vec4_type = _libraries['FIXME_STUB'].lp_int32_vec4_type
    lp_int32_vec4_type.restype = struct_lp_type
    lp_int32_vec4_type.argtypes = []
except AttributeError:
    pass
try:
    lp_unorm8_vec4_type = _libraries['FIXME_STUB'].lp_unorm8_vec4_type
    lp_unorm8_vec4_type.restype = struct_lp_type
    lp_unorm8_vec4_type.argtypes = []
except AttributeError:
    pass
try:
    lp_elem_type = _libraries['FIXME_STUB'].lp_elem_type
    lp_elem_type.restype = struct_lp_type
    lp_elem_type.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_uint_type = _libraries['FIXME_STUB'].lp_uint_type
    lp_uint_type.restype = struct_lp_type
    lp_uint_type.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_int_type = _libraries['FIXME_STUB'].lp_int_type
    lp_int_type.restype = struct_lp_type
    lp_int_type.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_wider_type = _libraries['FIXME_STUB'].lp_wider_type
    lp_wider_type.restype = struct_lp_type
    lp_wider_type.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_sizeof_llvm_type = _libraries['FIXME_STUB'].lp_sizeof_llvm_type
    lp_sizeof_llvm_type.restype = ctypes.c_uint32
    lp_sizeof_llvm_type.argtypes = [LLVMTypeRef]
except AttributeError:
    pass

# values for enumeration 'c__EA_LLVMTypeKind'
c__EA_LLVMTypeKind__enumvalues = {
    0: 'LLVMVoidTypeKind',
    1: 'LLVMHalfTypeKind',
    2: 'LLVMFloatTypeKind',
    3: 'LLVMDoubleTypeKind',
    4: 'LLVMX86_FP80TypeKind',
    5: 'LLVMFP128TypeKind',
    6: 'LLVMPPC_FP128TypeKind',
    7: 'LLVMLabelTypeKind',
    8: 'LLVMIntegerTypeKind',
    9: 'LLVMFunctionTypeKind',
    10: 'LLVMStructTypeKind',
    11: 'LLVMArrayTypeKind',
    12: 'LLVMPointerTypeKind',
    13: 'LLVMVectorTypeKind',
    14: 'LLVMMetadataTypeKind',
    15: 'LLVMX86_MMXTypeKind',
    16: 'LLVMTokenTypeKind',
    17: 'LLVMScalableVectorTypeKind',
    18: 'LLVMBFloatTypeKind',
    19: 'LLVMX86_AMXTypeKind',
}
LLVMVoidTypeKind = 0
LLVMHalfTypeKind = 1
LLVMFloatTypeKind = 2
LLVMDoubleTypeKind = 3
LLVMX86_FP80TypeKind = 4
LLVMFP128TypeKind = 5
LLVMPPC_FP128TypeKind = 6
LLVMLabelTypeKind = 7
LLVMIntegerTypeKind = 8
LLVMFunctionTypeKind = 9
LLVMStructTypeKind = 10
LLVMArrayTypeKind = 11
LLVMPointerTypeKind = 12
LLVMVectorTypeKind = 13
LLVMMetadataTypeKind = 14
LLVMX86_MMXTypeKind = 15
LLVMTokenTypeKind = 16
LLVMScalableVectorTypeKind = 17
LLVMBFloatTypeKind = 18
LLVMX86_AMXTypeKind = 19
c__EA_LLVMTypeKind = ctypes.c_uint32 # enum
LLVMTypeKind = c__EA_LLVMTypeKind
LLVMTypeKind__enumvalues = c__EA_LLVMTypeKind__enumvalues
try:
    lp_typekind_name = _libraries['FIXME_STUB'].lp_typekind_name
    lp_typekind_name.restype = ctypes.POINTER(ctypes.c_char)
    lp_typekind_name.argtypes = [LLVMTypeKind]
except AttributeError:
    pass
try:
    lp_dump_llvmtype = _libraries['FIXME_STUB'].lp_dump_llvmtype
    lp_dump_llvmtype.restype = None
    lp_dump_llvmtype.argtypes = [LLVMTypeRef]
except AttributeError:
    pass
try:
    lp_build_context_init = _libraries['FIXME_STUB'].lp_build_context_init
    lp_build_context_init.restype = None
    lp_build_context_init.argtypes = [ctypes.POINTER(struct_lp_build_context), ctypes.POINTER(struct_gallivm_state), struct_lp_type]
except AttributeError:
    pass
LLVMModuleRef = ctypes.POINTER(struct_LLVMOpaqueModule)
try:
    lp_build_count_ir_module = _libraries['FIXME_STUB'].lp_build_count_ir_module
    lp_build_count_ir_module.restype = ctypes.c_uint32
    lp_build_count_ir_module.argtypes = [LLVMModuleRef]
except AttributeError:
    pass
class union_lp_jit_texture_0(Union):
    pass

class struct_lp_jit_texture_0_0(Structure):
    pass

struct_lp_jit_texture_0_0._pack_ = 1 # source:False
struct_lp_jit_texture_0_0._fields_ = [
    ('row_stride', ctypes.c_uint32 * 16),
    ('img_stride', ctypes.c_uint32 * 16),
]

union_lp_jit_texture_0._pack_ = 1 # source:False
union_lp_jit_texture_0._anonymous_ = ('_0',)
union_lp_jit_texture_0._fields_ = [
    ('_0', struct_lp_jit_texture_0_0),
    ('residency', ctypes.POINTER(None)),
    ('PADDING_0', ctypes.c_ubyte * 120),
]

struct_lp_jit_texture._pack_ = 1 # source:False
struct_lp_jit_texture._anonymous_ = ('_0',)
struct_lp_jit_texture._fields_ = [
    ('base', ctypes.POINTER(None)),
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint16),
    ('depth', ctypes.c_uint16),
    ('_0', union_lp_jit_texture_0),
    ('first_level', ctypes.c_ubyte),
    ('last_level', ctypes.c_ubyte),
    ('mip_offsets', ctypes.c_uint32 * 16),
    ('sampler_index', ctypes.c_uint32),
]

try:
    lp_build_init_native_width = _libraries['FIXME_STUB'].lp_build_init_native_width
    lp_build_init_native_width.restype = ctypes.c_uint32
    lp_build_init_native_width.argtypes = []
except AttributeError:
    pass
try:
    lp_build_init = _libraries['FIXME_STUB'].lp_build_init
    lp_build_init.restype = ctypes.c_bool
    lp_build_init.argtypes = []
except AttributeError:
    pass
try:
    gallivm_create = _libraries['FIXME_STUB'].gallivm_create
    gallivm_create.restype = ctypes.POINTER(struct_gallivm_state)
    gallivm_create.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_lp_context_ref), ctypes.POINTER(struct_lp_cached_code)]
except AttributeError:
    pass
try:
    gallivm_destroy = _libraries['FIXME_STUB'].gallivm_destroy
    gallivm_destroy.restype = None
    gallivm_destroy.argtypes = [ctypes.POINTER(struct_gallivm_state)]
except AttributeError:
    pass
try:
    gallivm_free_ir = _libraries['FIXME_STUB'].gallivm_free_ir
    gallivm_free_ir.restype = None
    gallivm_free_ir.argtypes = [ctypes.POINTER(struct_gallivm_state)]
except AttributeError:
    pass
try:
    gallivm_verify_function = _libraries['FIXME_STUB'].gallivm_verify_function
    gallivm_verify_function.restype = None
    gallivm_verify_function.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMValueRef]
except AttributeError:
    pass
try:
    gallivm_add_global_mapping = _libraries['FIXME_STUB'].gallivm_add_global_mapping
    gallivm_add_global_mapping.restype = None
    gallivm_add_global_mapping.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMValueRef, ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    gallivm_compile_module = _libraries['FIXME_STUB'].gallivm_compile_module
    gallivm_compile_module.restype = None
    gallivm_compile_module.argtypes = [ctypes.POINTER(struct_gallivm_state)]
except AttributeError:
    pass
func_pointer = ctypes.CFUNCTYPE(None)
try:
    gallivm_jit_function = _libraries['FIXME_STUB'].gallivm_jit_function
    gallivm_jit_function.restype = func_pointer
    gallivm_jit_function.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMValueRef, ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
try:
    gallivm_stub_func = _libraries['FIXME_STUB'].gallivm_stub_func
    gallivm_stub_func.restype = None
    gallivm_stub_func.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMValueRef]
except AttributeError:
    pass
try:
    gallivm_get_perf_flags = _libraries['FIXME_STUB'].gallivm_get_perf_flags
    gallivm_get_perf_flags.restype = ctypes.c_uint32
    gallivm_get_perf_flags.argtypes = []
except AttributeError:
    pass
try:
    lp_init_clock_hook = _libraries['FIXME_STUB'].lp_init_clock_hook
    lp_init_clock_hook.restype = None
    lp_init_clock_hook.argtypes = [ctypes.POINTER(struct_gallivm_state)]
except AttributeError:
    pass
try:
    lp_init_env_options = _libraries['FIXME_STUB'].lp_init_env_options
    lp_init_env_options.restype = None
    lp_init_env_options.argtypes = []
except AttributeError:
    pass
try:
    lp_bld_ppc_disable_denorms = _libraries['FIXME_STUB'].lp_bld_ppc_disable_denorms
    lp_bld_ppc_disable_denorms.restype = None
    lp_bld_ppc_disable_denorms.argtypes = []
except AttributeError:
    pass
class struct_lp_build_skip_context(Structure):
    pass

class struct_LLVMOpaqueBasicBlock(Structure):
    pass

struct_lp_build_skip_context._pack_ = 1 # source:False
struct_lp_build_skip_context._fields_ = [
    ('gallivm', ctypes.POINTER(struct_gallivm_state)),
    ('block', ctypes.POINTER(struct_LLVMOpaqueBasicBlock)),
]

try:
    lp_build_flow_skip_begin = _libraries['FIXME_STUB'].lp_build_flow_skip_begin
    lp_build_flow_skip_begin.restype = None
    lp_build_flow_skip_begin.argtypes = [ctypes.POINTER(struct_lp_build_skip_context), ctypes.POINTER(struct_gallivm_state)]
except AttributeError:
    pass
try:
    lp_build_flow_skip_cond_break = _libraries['FIXME_STUB'].lp_build_flow_skip_cond_break
    lp_build_flow_skip_cond_break.restype = None
    lp_build_flow_skip_cond_break.argtypes = [ctypes.POINTER(struct_lp_build_skip_context), LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_flow_skip_end = _libraries['FIXME_STUB'].lp_build_flow_skip_end
    lp_build_flow_skip_end.restype = None
    lp_build_flow_skip_end.argtypes = [ctypes.POINTER(struct_lp_build_skip_context)]
except AttributeError:
    pass
class struct_lp_build_mask_context(Structure):
    pass

struct_lp_build_mask_context._pack_ = 1 # source:False
struct_lp_build_mask_context._fields_ = [
    ('skip', struct_lp_build_skip_context),
    ('reg_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('var_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('var', ctypes.POINTER(struct_LLVMOpaqueValue)),
]

try:
    lp_build_mask_begin = _libraries['FIXME_STUB'].lp_build_mask_begin
    lp_build_mask_begin.restype = None
    lp_build_mask_begin.argtypes = [ctypes.POINTER(struct_lp_build_mask_context), ctypes.POINTER(struct_gallivm_state), struct_lp_type, LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_mask_value = _libraries['FIXME_STUB'].lp_build_mask_value
    lp_build_mask_value.restype = LLVMValueRef
    lp_build_mask_value.argtypes = [ctypes.POINTER(struct_lp_build_mask_context)]
except AttributeError:
    pass
try:
    lp_build_mask_update = _libraries['FIXME_STUB'].lp_build_mask_update
    lp_build_mask_update.restype = None
    lp_build_mask_update.argtypes = [ctypes.POINTER(struct_lp_build_mask_context), LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_mask_force = _libraries['FIXME_STUB'].lp_build_mask_force
    lp_build_mask_force.restype = None
    lp_build_mask_force.argtypes = [ctypes.POINTER(struct_lp_build_mask_context), LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_mask_check = _libraries['FIXME_STUB'].lp_build_mask_check
    lp_build_mask_check.restype = None
    lp_build_mask_check.argtypes = [ctypes.POINTER(struct_lp_build_mask_context)]
except AttributeError:
    pass
try:
    lp_build_mask_end = _libraries['FIXME_STUB'].lp_build_mask_end
    lp_build_mask_end.restype = LLVMValueRef
    lp_build_mask_end.argtypes = [ctypes.POINTER(struct_lp_build_mask_context)]
except AttributeError:
    pass
class struct_lp_build_loop_state(Structure):
    pass

struct_lp_build_loop_state._pack_ = 1 # source:False
struct_lp_build_loop_state._fields_ = [
    ('block', ctypes.POINTER(struct_LLVMOpaqueBasicBlock)),
    ('counter_var', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('counter', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('counter_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('gallivm', ctypes.POINTER(struct_gallivm_state)),
]

try:
    lp_build_loop_begin = _libraries['FIXME_STUB'].lp_build_loop_begin
    lp_build_loop_begin.restype = None
    lp_build_loop_begin.argtypes = [ctypes.POINTER(struct_lp_build_loop_state), ctypes.POINTER(struct_gallivm_state), LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_loop_end = _libraries['FIXME_STUB'].lp_build_loop_end
    lp_build_loop_end.restype = None
    lp_build_loop_end.argtypes = [ctypes.POINTER(struct_lp_build_loop_state), LLVMValueRef, LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_loop_force_set_counter = _libraries['FIXME_STUB'].lp_build_loop_force_set_counter
    lp_build_loop_force_set_counter.restype = None
    lp_build_loop_force_set_counter.argtypes = [ctypes.POINTER(struct_lp_build_loop_state), LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_loop_force_reload_counter = _libraries['FIXME_STUB'].lp_build_loop_force_reload_counter
    lp_build_loop_force_reload_counter.restype = None
    lp_build_loop_force_reload_counter.argtypes = [ctypes.POINTER(struct_lp_build_loop_state)]
except AttributeError:
    pass

# values for enumeration 'c__EA_LLVMIntPredicate'
c__EA_LLVMIntPredicate__enumvalues = {
    32: 'LLVMIntEQ',
    33: 'LLVMIntNE',
    34: 'LLVMIntUGT',
    35: 'LLVMIntUGE',
    36: 'LLVMIntULT',
    37: 'LLVMIntULE',
    38: 'LLVMIntSGT',
    39: 'LLVMIntSGE',
    40: 'LLVMIntSLT',
    41: 'LLVMIntSLE',
}
LLVMIntEQ = 32
LLVMIntNE = 33
LLVMIntUGT = 34
LLVMIntUGE = 35
LLVMIntULT = 36
LLVMIntULE = 37
LLVMIntSGT = 38
LLVMIntSGE = 39
LLVMIntSLT = 40
LLVMIntSLE = 41
c__EA_LLVMIntPredicate = ctypes.c_uint32 # enum
LLVMIntPredicate = c__EA_LLVMIntPredicate
LLVMIntPredicate__enumvalues = c__EA_LLVMIntPredicate__enumvalues
try:
    lp_build_loop_end_cond = _libraries['FIXME_STUB'].lp_build_loop_end_cond
    lp_build_loop_end_cond.restype = None
    lp_build_loop_end_cond.argtypes = [ctypes.POINTER(struct_lp_build_loop_state), LLVMValueRef, LLVMValueRef, LLVMIntPredicate]
except AttributeError:
    pass
class struct_lp_build_for_loop_state(Structure):
    pass

struct_lp_build_for_loop_state._pack_ = 1 # source:False
struct_lp_build_for_loop_state._fields_ = [
    ('begin', ctypes.POINTER(struct_LLVMOpaqueBasicBlock)),
    ('body', ctypes.POINTER(struct_LLVMOpaqueBasicBlock)),
    ('exit', ctypes.POINTER(struct_LLVMOpaqueBasicBlock)),
    ('counter_var', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('counter', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('counter_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('step', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('cond', LLVMIntPredicate),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('end', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('gallivm', ctypes.POINTER(struct_gallivm_state)),
]

try:
    lp_build_for_loop_begin = _libraries['FIXME_STUB'].lp_build_for_loop_begin
    lp_build_for_loop_begin.restype = None
    lp_build_for_loop_begin.argtypes = [ctypes.POINTER(struct_lp_build_for_loop_state), ctypes.POINTER(struct_gallivm_state), LLVMValueRef, LLVMIntPredicate, LLVMValueRef, LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_for_loop_end = _libraries['FIXME_STUB'].lp_build_for_loop_end
    lp_build_for_loop_end.restype = None
    lp_build_for_loop_end.argtypes = [ctypes.POINTER(struct_lp_build_for_loop_state)]
except AttributeError:
    pass
class struct_lp_build_if_state(Structure):
    pass

struct_lp_build_if_state._pack_ = 1 # source:False
struct_lp_build_if_state._fields_ = [
    ('gallivm', ctypes.POINTER(struct_gallivm_state)),
    ('condition', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('entry_block', ctypes.POINTER(struct_LLVMOpaqueBasicBlock)),
    ('true_block', ctypes.POINTER(struct_LLVMOpaqueBasicBlock)),
    ('false_block', ctypes.POINTER(struct_LLVMOpaqueBasicBlock)),
    ('merge_block', ctypes.POINTER(struct_LLVMOpaqueBasicBlock)),
]

try:
    lp_build_if = _libraries['FIXME_STUB'].lp_build_if
    lp_build_if.restype = None
    lp_build_if.argtypes = [ctypes.POINTER(struct_lp_build_if_state), ctypes.POINTER(struct_gallivm_state), LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_else = _libraries['FIXME_STUB'].lp_build_else
    lp_build_else.restype = None
    lp_build_else.argtypes = [ctypes.POINTER(struct_lp_build_if_state)]
except AttributeError:
    pass
try:
    lp_build_endif = _libraries['FIXME_STUB'].lp_build_endif
    lp_build_endif.restype = None
    lp_build_endif.argtypes = [ctypes.POINTER(struct_lp_build_if_state)]
except AttributeError:
    pass
LLVMBasicBlockRef = ctypes.POINTER(struct_LLVMOpaqueBasicBlock)
try:
    lp_build_insert_new_block = _libraries['FIXME_STUB'].lp_build_insert_new_block
    lp_build_insert_new_block.restype = LLVMBasicBlockRef
    lp_build_insert_new_block.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
LLVMBuilderRef = ctypes.POINTER(struct_LLVMOpaqueBuilder)
try:
    lp_create_builder_at_entry = _libraries['FIXME_STUB'].lp_create_builder_at_entry
    lp_create_builder_at_entry.restype = LLVMBuilderRef
    lp_create_builder_at_entry.argtypes = [ctypes.POINTER(struct_gallivm_state)]
except AttributeError:
    pass
try:
    lp_build_alloca = _libraries['FIXME_STUB'].lp_build_alloca
    lp_build_alloca.restype = LLVMValueRef
    lp_build_alloca.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMTypeRef, ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
try:
    lp_build_alloca_undef = _libraries['FIXME_STUB'].lp_build_alloca_undef
    lp_build_alloca_undef.restype = LLVMValueRef
    lp_build_alloca_undef.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMTypeRef, ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
try:
    lp_build_array_alloca = _libraries['FIXME_STUB'].lp_build_array_alloca
    lp_build_array_alloca.restype = LLVMValueRef
    lp_build_array_alloca.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMTypeRef, LLVMValueRef, ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
class struct_blob(Structure):
    pass

struct_blob._pack_ = 1 # source:False
struct_blob._fields_ = [
    ('data', ctypes.POINTER(ctypes.c_ubyte)),
    ('allocated', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
    ('fixed_allocation', ctypes.c_bool),
    ('out_of_memory', ctypes.c_bool),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

class struct_blob_reader(Structure):
    pass

struct_blob_reader._pack_ = 1 # source:False
struct_blob_reader._fields_ = [
    ('data', ctypes.POINTER(ctypes.c_ubyte)),
    ('end', ctypes.POINTER(ctypes.c_ubyte)),
    ('current', ctypes.POINTER(ctypes.c_ubyte)),
    ('overrun', ctypes.c_bool),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

try:
    blob_init = _libraries['FIXME_STUB'].blob_init
    blob_init.restype = None
    blob_init.argtypes = [ctypes.POINTER(struct_blob)]
except AttributeError:
    pass
size_t = ctypes.c_uint64
try:
    blob_init_fixed = _libraries['FIXME_STUB'].blob_init_fixed
    blob_init_fixed.restype = None
    blob_init_fixed.argtypes = [ctypes.POINTER(struct_blob), ctypes.POINTER(None), size_t]
except AttributeError:
    pass
try:
    blob_finish = _libraries['FIXME_STUB'].blob_finish
    blob_finish.restype = None
    blob_finish.argtypes = [ctypes.POINTER(struct_blob)]
except AttributeError:
    pass
try:
    blob_finish_get_buffer = _libraries['FIXME_STUB'].blob_finish_get_buffer
    blob_finish_get_buffer.restype = None
    blob_finish_get_buffer.argtypes = [ctypes.POINTER(struct_blob), ctypes.POINTER(ctypes.POINTER(None)), ctypes.POINTER(ctypes.c_uint64)]
except AttributeError:
    pass
try:
    blob_align = _libraries['FIXME_STUB'].blob_align
    blob_align.restype = ctypes.c_bool
    blob_align.argtypes = [ctypes.POINTER(struct_blob), size_t]
except AttributeError:
    pass
try:
    blob_write_bytes = _libraries['FIXME_STUB'].blob_write_bytes
    blob_write_bytes.restype = ctypes.c_bool
    blob_write_bytes.argtypes = [ctypes.POINTER(struct_blob), ctypes.POINTER(None), size_t]
except AttributeError:
    pass
intptr_t = ctypes.c_int64
try:
    blob_reserve_bytes = _libraries['FIXME_STUB'].blob_reserve_bytes
    blob_reserve_bytes.restype = intptr_t
    blob_reserve_bytes.argtypes = [ctypes.POINTER(struct_blob), size_t]
except AttributeError:
    pass
try:
    blob_reserve_uint32 = _libraries['FIXME_STUB'].blob_reserve_uint32
    blob_reserve_uint32.restype = intptr_t
    blob_reserve_uint32.argtypes = [ctypes.POINTER(struct_blob)]
except AttributeError:
    pass
try:
    blob_reserve_intptr = _libraries['FIXME_STUB'].blob_reserve_intptr
    blob_reserve_intptr.restype = intptr_t
    blob_reserve_intptr.argtypes = [ctypes.POINTER(struct_blob)]
except AttributeError:
    pass
try:
    blob_overwrite_bytes = _libraries['FIXME_STUB'].blob_overwrite_bytes
    blob_overwrite_bytes.restype = ctypes.c_bool
    blob_overwrite_bytes.argtypes = [ctypes.POINTER(struct_blob), size_t, ctypes.POINTER(None), size_t]
except AttributeError:
    pass
uint8_t = ctypes.c_uint8
try:
    blob_write_uint8 = _libraries['FIXME_STUB'].blob_write_uint8
    blob_write_uint8.restype = ctypes.c_bool
    blob_write_uint8.argtypes = [ctypes.POINTER(struct_blob), uint8_t]
except AttributeError:
    pass
try:
    blob_overwrite_uint8 = _libraries['FIXME_STUB'].blob_overwrite_uint8
    blob_overwrite_uint8.restype = ctypes.c_bool
    blob_overwrite_uint8.argtypes = [ctypes.POINTER(struct_blob), size_t, uint8_t]
except AttributeError:
    pass
uint16_t = ctypes.c_uint16
try:
    blob_write_uint16 = _libraries['FIXME_STUB'].blob_write_uint16
    blob_write_uint16.restype = ctypes.c_bool
    blob_write_uint16.argtypes = [ctypes.POINTER(struct_blob), uint16_t]
except AttributeError:
    pass
uint32_t = ctypes.c_uint32
try:
    blob_write_uint32 = _libraries['FIXME_STUB'].blob_write_uint32
    blob_write_uint32.restype = ctypes.c_bool
    blob_write_uint32.argtypes = [ctypes.POINTER(struct_blob), uint32_t]
except AttributeError:
    pass
try:
    blob_overwrite_uint32 = _libraries['FIXME_STUB'].blob_overwrite_uint32
    blob_overwrite_uint32.restype = ctypes.c_bool
    blob_overwrite_uint32.argtypes = [ctypes.POINTER(struct_blob), size_t, uint32_t]
except AttributeError:
    pass
uint64_t = ctypes.c_uint64
try:
    blob_write_uint64 = _libraries['FIXME_STUB'].blob_write_uint64
    blob_write_uint64.restype = ctypes.c_bool
    blob_write_uint64.argtypes = [ctypes.POINTER(struct_blob), uint64_t]
except AttributeError:
    pass
try:
    blob_write_intptr = _libraries['FIXME_STUB'].blob_write_intptr
    blob_write_intptr.restype = ctypes.c_bool
    blob_write_intptr.argtypes = [ctypes.POINTER(struct_blob), intptr_t]
except AttributeError:
    pass
try:
    blob_overwrite_intptr = _libraries['FIXME_STUB'].blob_overwrite_intptr
    blob_overwrite_intptr.restype = ctypes.c_bool
    blob_overwrite_intptr.argtypes = [ctypes.POINTER(struct_blob), size_t, intptr_t]
except AttributeError:
    pass
try:
    blob_write_string = _libraries['FIXME_STUB'].blob_write_string
    blob_write_string.restype = ctypes.c_bool
    blob_write_string.argtypes = [ctypes.POINTER(struct_blob), ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
try:
    blob_reader_init = _libraries['FIXME_STUB'].blob_reader_init
    blob_reader_init.restype = None
    blob_reader_init.argtypes = [ctypes.POINTER(struct_blob_reader), ctypes.POINTER(None), size_t]
except AttributeError:
    pass
try:
    blob_reader_align = _libraries['FIXME_STUB'].blob_reader_align
    blob_reader_align.restype = None
    blob_reader_align.argtypes = [ctypes.POINTER(struct_blob_reader), size_t]
except AttributeError:
    pass
try:
    blob_read_bytes = _libraries['FIXME_STUB'].blob_read_bytes
    blob_read_bytes.restype = ctypes.POINTER(None)
    blob_read_bytes.argtypes = [ctypes.POINTER(struct_blob_reader), size_t]
except AttributeError:
    pass
try:
    blob_copy_bytes = _libraries['FIXME_STUB'].blob_copy_bytes
    blob_copy_bytes.restype = None
    blob_copy_bytes.argtypes = [ctypes.POINTER(struct_blob_reader), ctypes.POINTER(None), size_t]
except AttributeError:
    pass
try:
    blob_skip_bytes = _libraries['FIXME_STUB'].blob_skip_bytes
    blob_skip_bytes.restype = None
    blob_skip_bytes.argtypes = [ctypes.POINTER(struct_blob_reader), size_t]
except AttributeError:
    pass
try:
    blob_read_uint8 = _libraries['FIXME_STUB'].blob_read_uint8
    blob_read_uint8.restype = uint8_t
    blob_read_uint8.argtypes = [ctypes.POINTER(struct_blob_reader)]
except AttributeError:
    pass
try:
    blob_read_uint16 = _libraries['FIXME_STUB'].blob_read_uint16
    blob_read_uint16.restype = uint16_t
    blob_read_uint16.argtypes = [ctypes.POINTER(struct_blob_reader)]
except AttributeError:
    pass
try:
    blob_read_uint32 = _libraries['FIXME_STUB'].blob_read_uint32
    blob_read_uint32.restype = uint32_t
    blob_read_uint32.argtypes = [ctypes.POINTER(struct_blob_reader)]
except AttributeError:
    pass
try:
    blob_read_uint64 = _libraries['FIXME_STUB'].blob_read_uint64
    blob_read_uint64.restype = uint64_t
    blob_read_uint64.argtypes = [ctypes.POINTER(struct_blob_reader)]
except AttributeError:
    pass
try:
    blob_read_intptr = _libraries['FIXME_STUB'].blob_read_intptr
    blob_read_intptr.restype = intptr_t
    blob_read_intptr.argtypes = [ctypes.POINTER(struct_blob_reader)]
except AttributeError:
    pass
try:
    blob_read_string = _libraries['FIXME_STUB'].blob_read_string
    blob_read_string.restype = ctypes.POINTER(ctypes.c_char)
    blob_read_string.argtypes = [ctypes.POINTER(struct_blob_reader)]
except AttributeError:
    pass

# values for enumeration 'c__EA_nir_lower_int64_options'
c__EA_nir_lower_int64_options__enumvalues = {
    1: 'nir_lower_imul64',
    2: 'nir_lower_isign64',
    4: 'nir_lower_divmod64',
    8: 'nir_lower_imul_high64',
    16: 'nir_lower_bcsel64',
    32: 'nir_lower_icmp64',
    64: 'nir_lower_iadd64',
    128: 'nir_lower_iabs64',
    256: 'nir_lower_ineg64',
    512: 'nir_lower_logic64',
    1024: 'nir_lower_minmax64',
    2048: 'nir_lower_shift64',
    4096: 'nir_lower_imul_2x32_64',
    8192: 'nir_lower_extract64',
    16384: 'nir_lower_ufind_msb64',
    32768: 'nir_lower_bit_count64',
    65536: 'nir_lower_subgroup_shuffle64',
    131072: 'nir_lower_scan_reduce_bitwise64',
    262144: 'nir_lower_scan_reduce_iadd64',
    524288: 'nir_lower_vote_ieq64',
    1048576: 'nir_lower_usub_sat64',
    2097152: 'nir_lower_iadd_sat64',
    4194304: 'nir_lower_find_lsb64',
    8388608: 'nir_lower_conv64',
    16777216: 'nir_lower_uadd_sat64',
    33554432: 'nir_lower_iadd3_64',
    67108864: 'nir_lower_bitfield_reverse64',
    134217728: 'nir_lower_bitfield_extract64',
}
nir_lower_imul64 = 1
nir_lower_isign64 = 2
nir_lower_divmod64 = 4
nir_lower_imul_high64 = 8
nir_lower_bcsel64 = 16
nir_lower_icmp64 = 32
nir_lower_iadd64 = 64
nir_lower_iabs64 = 128
nir_lower_ineg64 = 256
nir_lower_logic64 = 512
nir_lower_minmax64 = 1024
nir_lower_shift64 = 2048
nir_lower_imul_2x32_64 = 4096
nir_lower_extract64 = 8192
nir_lower_ufind_msb64 = 16384
nir_lower_bit_count64 = 32768
nir_lower_subgroup_shuffle64 = 65536
nir_lower_scan_reduce_bitwise64 = 131072
nir_lower_scan_reduce_iadd64 = 262144
nir_lower_vote_ieq64 = 524288
nir_lower_usub_sat64 = 1048576
nir_lower_iadd_sat64 = 2097152
nir_lower_find_lsb64 = 4194304
nir_lower_conv64 = 8388608
nir_lower_uadd_sat64 = 16777216
nir_lower_iadd3_64 = 33554432
nir_lower_bitfield_reverse64 = 67108864
nir_lower_bitfield_extract64 = 134217728
c__EA_nir_lower_int64_options = ctypes.c_uint32 # enum
nir_lower_int64_options = c__EA_nir_lower_int64_options
nir_lower_int64_options__enumvalues = c__EA_nir_lower_int64_options__enumvalues

# values for enumeration 'c__EA_nir_lower_doubles_options'
c__EA_nir_lower_doubles_options__enumvalues = {
    1: 'nir_lower_drcp',
    2: 'nir_lower_dsqrt',
    4: 'nir_lower_drsq',
    8: 'nir_lower_dtrunc',
    16: 'nir_lower_dfloor',
    32: 'nir_lower_dceil',
    64: 'nir_lower_dfract',
    128: 'nir_lower_dround_even',
    256: 'nir_lower_dmod',
    512: 'nir_lower_dsub',
    1024: 'nir_lower_ddiv',
    2048: 'nir_lower_dsign',
    4096: 'nir_lower_dminmax',
    8192: 'nir_lower_dsat',
    16384: 'nir_lower_fp64_full_software',
}
nir_lower_drcp = 1
nir_lower_dsqrt = 2
nir_lower_drsq = 4
nir_lower_dtrunc = 8
nir_lower_dfloor = 16
nir_lower_dceil = 32
nir_lower_dfract = 64
nir_lower_dround_even = 128
nir_lower_dmod = 256
nir_lower_dsub = 512
nir_lower_ddiv = 1024
nir_lower_dsign = 2048
nir_lower_dminmax = 4096
nir_lower_dsat = 8192
nir_lower_fp64_full_software = 16384
c__EA_nir_lower_doubles_options = ctypes.c_uint32 # enum
nir_lower_doubles_options = c__EA_nir_lower_doubles_options
nir_lower_doubles_options__enumvalues = c__EA_nir_lower_doubles_options__enumvalues

# values for enumeration 'c__EA_nir_divergence_options'
c__EA_nir_divergence_options__enumvalues = {
    1: 'nir_divergence_single_prim_per_subgroup',
    2: 'nir_divergence_single_patch_per_tcs_subgroup',
    4: 'nir_divergence_single_patch_per_tes_subgroup',
    8: 'nir_divergence_view_index_uniform',
    16: 'nir_divergence_single_frag_shading_rate_per_subgroup',
    32: 'nir_divergence_multiple_workgroup_per_compute_subgroup',
    64: 'nir_divergence_shader_record_ptr_uniform',
    128: 'nir_divergence_uniform_load_tears',
    256: 'nir_divergence_ignore_undef_if_phi_srcs',
    2048: 'nir_divergence_vertex',
}
nir_divergence_single_prim_per_subgroup = 1
nir_divergence_single_patch_per_tcs_subgroup = 2
nir_divergence_single_patch_per_tes_subgroup = 4
nir_divergence_view_index_uniform = 8
nir_divergence_single_frag_shading_rate_per_subgroup = 16
nir_divergence_multiple_workgroup_per_compute_subgroup = 32
nir_divergence_shader_record_ptr_uniform = 64
nir_divergence_uniform_load_tears = 128
nir_divergence_ignore_undef_if_phi_srcs = 256
nir_divergence_vertex = 2048
c__EA_nir_divergence_options = ctypes.c_uint32 # enum
nir_divergence_options = c__EA_nir_divergence_options
nir_divergence_options__enumvalues = c__EA_nir_divergence_options__enumvalues
class struct_nir_instr(Structure):
    pass

class struct_nir_block(Structure):
    pass

class struct_exec_node(Structure):
    pass

struct_exec_node._pack_ = 1 # source:False
struct_exec_node._fields_ = [
    ('next', ctypes.POINTER(struct_exec_node)),
    ('prev', ctypes.POINTER(struct_exec_node)),
]

struct_nir_instr._pack_ = 1 # source:False
struct_nir_instr._fields_ = [
    ('node', struct_exec_node),
    ('block', ctypes.POINTER(struct_nir_block)),
    ('type', ctypes.c_ubyte),
    ('pass_flags', ctypes.c_ubyte),
    ('has_debug_info', ctypes.c_bool),
    ('PADDING_0', ctypes.c_ubyte),
    ('index', ctypes.c_uint32),
]

class struct_set(Structure):
    pass

class struct_nir_cf_node(Structure):
    pass


# values for enumeration 'c__EA_nir_cf_node_type'
c__EA_nir_cf_node_type__enumvalues = {
    0: 'nir_cf_node_block',
    1: 'nir_cf_node_if',
    2: 'nir_cf_node_loop',
    3: 'nir_cf_node_function',
}
nir_cf_node_block = 0
nir_cf_node_if = 1
nir_cf_node_loop = 2
nir_cf_node_function = 3
c__EA_nir_cf_node_type = ctypes.c_uint32 # enum
struct_nir_cf_node._pack_ = 1 # source:False
struct_nir_cf_node._fields_ = [
    ('node', struct_exec_node),
    ('type', c__EA_nir_cf_node_type),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('parent', ctypes.POINTER(struct_nir_cf_node)),
]

class struct_exec_list(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('head_sentinel', struct_exec_node),
    ('tail_sentinel', struct_exec_node),
     ]

struct_nir_block._pack_ = 1 # source:False
struct_nir_block._fields_ = [
    ('cf_node', struct_nir_cf_node),
    ('instr_list', struct_exec_list),
    ('index', ctypes.c_uint32),
    ('divergent', ctypes.c_bool),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('successors', ctypes.POINTER(struct_nir_block) * 2),
    ('predecessors', ctypes.POINTER(struct_set)),
    ('imm_dom', ctypes.POINTER(struct_nir_block)),
    ('num_dom_children', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('dom_children', ctypes.POINTER(ctypes.POINTER(struct_nir_block))),
    ('dom_frontier', ctypes.POINTER(struct_set)),
    ('dom_pre_index', ctypes.c_uint32),
    ('dom_post_index', ctypes.c_uint32),
    ('start_ip', ctypes.c_uint32),
    ('end_ip', ctypes.c_uint32),
    ('live_in', ctypes.POINTER(ctypes.c_uint32)),
    ('live_out', ctypes.POINTER(ctypes.c_uint32)),
]

class struct_set_entry(Structure):
    pass

struct_set._pack_ = 1 # source:False
struct_set._fields_ = [
    ('mem_ctx', ctypes.POINTER(None)),
    ('table', ctypes.POINTER(struct_set_entry)),
    ('key_hash_function', ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None))),
    ('key_equals_function', ctypes.CFUNCTYPE(ctypes.c_bool, ctypes.POINTER(None), ctypes.POINTER(None))),
    ('size', ctypes.c_uint32),
    ('rehash', ctypes.c_uint32),
    ('size_magic', ctypes.c_uint64),
    ('rehash_magic', ctypes.c_uint64),
    ('max_entries', ctypes.c_uint32),
    ('size_index', ctypes.c_uint32),
    ('entries', ctypes.c_uint32),
    ('deleted_entries', ctypes.c_uint32),
]

struct_set_entry._pack_ = 1 # source:False
struct_set_entry._fields_ = [
    ('hash', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('key', ctypes.POINTER(None)),
]

nir_instr_filter_cb = ctypes.CFUNCTYPE(ctypes.c_bool, ctypes.POINTER(struct_nir_instr), ctypes.POINTER(None))

# values for enumeration 'c__EA_nir_io_options'
c__EA_nir_io_options__enumvalues = {
    1: 'nir_io_has_flexible_input_interpolation_except_flat',
    2: 'nir_io_dont_use_pos_for_non_fs_varyings',
    4: 'nir_io_16bit_input_output_support',
    8: 'nir_io_mediump_is_32bit',
    16: 'nir_io_prefer_scalar_fs_inputs',
    32: 'nir_io_mix_convergent_flat_with_interpolated',
    64: 'nir_io_vectorizer_ignores_types',
    128: 'nir_io_always_interpolate_convergent_fs_inputs',
    256: 'nir_io_compaction_rotates_color_channels',
    512: 'nir_io_compaction_groups_tes_inputs_into_pos_and_var_groups',
    1024: 'nir_io_radv_intrinsic_component_workaround',
    65536: 'nir_io_has_intrinsics',
    131072: 'nir_io_separate_clip_cull_distance_arrays',
}
nir_io_has_flexible_input_interpolation_except_flat = 1
nir_io_dont_use_pos_for_non_fs_varyings = 2
nir_io_16bit_input_output_support = 4
nir_io_mediump_is_32bit = 8
nir_io_prefer_scalar_fs_inputs = 16
nir_io_mix_convergent_flat_with_interpolated = 32
nir_io_vectorizer_ignores_types = 64
nir_io_always_interpolate_convergent_fs_inputs = 128
nir_io_compaction_rotates_color_channels = 256
nir_io_compaction_groups_tes_inputs_into_pos_and_var_groups = 512
nir_io_radv_intrinsic_component_workaround = 1024
nir_io_has_intrinsics = 65536
nir_io_separate_clip_cull_distance_arrays = 131072
c__EA_nir_io_options = ctypes.c_uint32 # enum
nir_io_options = c__EA_nir_io_options
nir_io_options__enumvalues = c__EA_nir_io_options__enumvalues

# values for enumeration 'c__EA_nir_lower_packing_op'
c__EA_nir_lower_packing_op__enumvalues = {
    0: 'nir_lower_packing_op_pack_64_2x32',
    1: 'nir_lower_packing_op_unpack_64_2x32',
    2: 'nir_lower_packing_op_pack_64_4x16',
    3: 'nir_lower_packing_op_unpack_64_4x16',
    4: 'nir_lower_packing_op_pack_32_2x16',
    5: 'nir_lower_packing_op_unpack_32_2x16',
    6: 'nir_lower_packing_op_pack_32_4x8',
    7: 'nir_lower_packing_op_unpack_32_4x8',
    8: 'nir_lower_packing_num_ops',
}
nir_lower_packing_op_pack_64_2x32 = 0
nir_lower_packing_op_unpack_64_2x32 = 1
nir_lower_packing_op_pack_64_4x16 = 2
nir_lower_packing_op_unpack_64_4x16 = 3
nir_lower_packing_op_pack_32_2x16 = 4
nir_lower_packing_op_unpack_32_2x16 = 5
nir_lower_packing_op_pack_32_4x8 = 6
nir_lower_packing_op_unpack_32_4x8 = 7
nir_lower_packing_num_ops = 8
c__EA_nir_lower_packing_op = ctypes.c_uint32 # enum
nir_lower_packing_op = c__EA_nir_lower_packing_op
nir_lower_packing_op__enumvalues = c__EA_nir_lower_packing_op__enumvalues
class struct_nir_shader_compiler_options(Structure):
    pass


# values for enumeration 'c__EA_nir_variable_mode'
c__EA_nir_variable_mode__enumvalues = {
    1: 'nir_var_system_value',
    2: 'nir_var_uniform',
    4: 'nir_var_shader_in',
    8: 'nir_var_shader_out',
    16: 'nir_var_image',
    32: 'nir_var_shader_call_data',
    64: 'nir_var_ray_hit_attrib',
    128: 'nir_var_mem_ubo',
    256: 'nir_var_mem_push_const',
    512: 'nir_var_mem_ssbo',
    1024: 'nir_var_mem_constant',
    2048: 'nir_var_mem_task_payload',
    4096: 'nir_var_mem_node_payload',
    8192: 'nir_var_mem_node_payload_in',
    16384: 'nir_var_function_in',
    32768: 'nir_var_function_out',
    65536: 'nir_var_function_inout',
    131072: 'nir_var_shader_temp',
    262144: 'nir_var_function_temp',
    524288: 'nir_var_mem_shared',
    1048576: 'nir_var_mem_global',
    1966080: 'nir_var_mem_generic',
    1159: 'nir_var_read_only_modes',
    1969033: 'nir_var_vec_indexable_modes',
    21: 'nir_num_variable_modes',
    2097151: 'nir_var_all',
}
nir_var_system_value = 1
nir_var_uniform = 2
nir_var_shader_in = 4
nir_var_shader_out = 8
nir_var_image = 16
nir_var_shader_call_data = 32
nir_var_ray_hit_attrib = 64
nir_var_mem_ubo = 128
nir_var_mem_push_const = 256
nir_var_mem_ssbo = 512
nir_var_mem_constant = 1024
nir_var_mem_task_payload = 2048
nir_var_mem_node_payload = 4096
nir_var_mem_node_payload_in = 8192
nir_var_function_in = 16384
nir_var_function_out = 32768
nir_var_function_inout = 65536
nir_var_shader_temp = 131072
nir_var_function_temp = 262144
nir_var_mem_shared = 524288
nir_var_mem_global = 1048576
nir_var_mem_generic = 1966080
nir_var_read_only_modes = 1159
nir_var_vec_indexable_modes = 1969033
nir_num_variable_modes = 21
nir_var_all = 2097151
c__EA_nir_variable_mode = ctypes.c_uint32 # enum
class struct_nir_shader(Structure):
    pass

struct_nir_shader_compiler_options._pack_ = 1 # source:False
struct_nir_shader_compiler_options._fields_ = [
    ('lower_fdiv', ctypes.c_bool),
    ('lower_ffma16', ctypes.c_bool),
    ('lower_ffma32', ctypes.c_bool),
    ('lower_ffma64', ctypes.c_bool),
    ('fuse_ffma16', ctypes.c_bool),
    ('fuse_ffma32', ctypes.c_bool),
    ('fuse_ffma64', ctypes.c_bool),
    ('lower_flrp16', ctypes.c_bool),
    ('lower_flrp32', ctypes.c_bool),
    ('lower_flrp64', ctypes.c_bool),
    ('lower_fpow', ctypes.c_bool),
    ('lower_fsat', ctypes.c_bool),
    ('lower_fsqrt', ctypes.c_bool),
    ('lower_sincos', ctypes.c_bool),
    ('lower_fmod', ctypes.c_bool),
    ('lower_bitfield_extract8', ctypes.c_bool),
    ('lower_bitfield_extract16', ctypes.c_bool),
    ('lower_bitfield_extract', ctypes.c_bool),
    ('lower_bitfield_insert', ctypes.c_bool),
    ('lower_bitfield_reverse', ctypes.c_bool),
    ('lower_bit_count', ctypes.c_bool),
    ('lower_ifind_msb', ctypes.c_bool),
    ('lower_ufind_msb', ctypes.c_bool),
    ('lower_find_lsb', ctypes.c_bool),
    ('lower_uadd_carry', ctypes.c_bool),
    ('lower_usub_borrow', ctypes.c_bool),
    ('lower_mul_high', ctypes.c_bool),
    ('lower_mul_high16', ctypes.c_bool),
    ('lower_fneg', ctypes.c_bool),
    ('lower_ineg', ctypes.c_bool),
    ('lower_fisnormal', ctypes.c_bool),
    ('lower_scmp', ctypes.c_bool),
    ('lower_vector_cmp', ctypes.c_bool),
    ('lower_bitops', ctypes.c_bool),
    ('lower_isign', ctypes.c_bool),
    ('lower_fsign', ctypes.c_bool),
    ('lower_iabs', ctypes.c_bool),
    ('lower_umax', ctypes.c_bool),
    ('lower_umin', ctypes.c_bool),
    ('lower_fminmax_signed_zero', ctypes.c_bool),
    ('lower_fdph', ctypes.c_bool),
    ('fdot_replicates', ctypes.c_bool),
    ('lower_ffloor', ctypes.c_bool),
    ('lower_ffract', ctypes.c_bool),
    ('lower_fceil', ctypes.c_bool),
    ('lower_ftrunc', ctypes.c_bool),
    ('lower_fround_even', ctypes.c_bool),
    ('lower_ldexp', ctypes.c_bool),
    ('lower_pack_half_2x16', ctypes.c_bool),
    ('lower_pack_unorm_2x16', ctypes.c_bool),
    ('lower_pack_snorm_2x16', ctypes.c_bool),
    ('lower_pack_unorm_4x8', ctypes.c_bool),
    ('lower_pack_snorm_4x8', ctypes.c_bool),
    ('lower_pack_64_2x32', ctypes.c_bool),
    ('lower_pack_64_4x16', ctypes.c_bool),
    ('lower_pack_32_2x16', ctypes.c_bool),
    ('lower_pack_64_2x32_split', ctypes.c_bool),
    ('lower_pack_32_2x16_split', ctypes.c_bool),
    ('lower_unpack_half_2x16', ctypes.c_bool),
    ('lower_unpack_unorm_2x16', ctypes.c_bool),
    ('lower_unpack_snorm_2x16', ctypes.c_bool),
    ('lower_unpack_unorm_4x8', ctypes.c_bool),
    ('lower_unpack_snorm_4x8', ctypes.c_bool),
    ('lower_unpack_64_2x32_split', ctypes.c_bool),
    ('lower_unpack_32_2x16_split', ctypes.c_bool),
    ('lower_pack_split', ctypes.c_bool),
    ('lower_extract_byte', ctypes.c_bool),
    ('lower_extract_word', ctypes.c_bool),
    ('lower_insert_byte', ctypes.c_bool),
    ('lower_insert_word', ctypes.c_bool),
    ('vertex_id_zero_based', ctypes.c_bool),
    ('lower_base_vertex', ctypes.c_bool),
    ('instance_id_includes_base_index', ctypes.c_bool),
    ('lower_helper_invocation', ctypes.c_bool),
    ('optimize_sample_mask_in', ctypes.c_bool),
    ('optimize_load_front_face_fsign', ctypes.c_bool),
    ('optimize_quad_vote_to_reduce', ctypes.c_bool),
    ('lower_cs_local_index_to_id', ctypes.c_bool),
    ('lower_cs_local_id_to_index', ctypes.c_bool),
    ('has_cs_global_id', ctypes.c_bool),
    ('lower_device_index_to_zero', ctypes.c_bool),
    ('lower_wpos_pntc', ctypes.c_bool),
    ('lower_hadd', ctypes.c_bool),
    ('lower_hadd64', ctypes.c_bool),
    ('lower_uadd_sat', ctypes.c_bool),
    ('lower_usub_sat', ctypes.c_bool),
    ('lower_iadd_sat', ctypes.c_bool),
    ('lower_mul_32x16', ctypes.c_bool),
    ('lower_bfloat16_conversions', ctypes.c_bool),
    ('vectorize_tess_levels', ctypes.c_bool),
    ('lower_to_scalar', ctypes.c_bool),
    ('PADDING_0', ctypes.c_ubyte * 5),
    ('lower_to_scalar_filter', ctypes.CFUNCTYPE(ctypes.c_bool, ctypes.POINTER(struct_nir_instr), ctypes.POINTER(None))),
    ('vectorize_vec2_16bit', ctypes.c_bool),
    ('unify_interfaces', ctypes.c_bool),
    ('lower_interpolate_at', ctypes.c_bool),
    ('lower_mul_2x32_64', ctypes.c_bool),
    ('has_rotate8', ctypes.c_bool),
    ('has_rotate16', ctypes.c_bool),
    ('has_rotate32', ctypes.c_bool),
    ('has_shfr32', ctypes.c_bool),
    ('has_iadd3', ctypes.c_bool),
    ('has_amul', ctypes.c_bool),
    ('has_imul24', ctypes.c_bool),
    ('has_umul24', ctypes.c_bool),
    ('has_mul24_relaxed', ctypes.c_bool),
    ('has_imad32', ctypes.c_bool),
    ('has_umad24', ctypes.c_bool),
    ('has_fused_comp_and_csel', ctypes.c_bool),
    ('has_icsel_eqz64', ctypes.c_bool),
    ('has_icsel_eqz32', ctypes.c_bool),
    ('has_icsel_eqz16', ctypes.c_bool),
    ('has_fneo_fcmpu', ctypes.c_bool),
    ('has_ford_funord', ctypes.c_bool),
    ('has_fsub', ctypes.c_bool),
    ('has_isub', ctypes.c_bool),
    ('has_pack_32_4x8', ctypes.c_bool),
    ('has_texture_scaling', ctypes.c_bool),
    ('has_sdot_4x8', ctypes.c_bool),
    ('has_udot_4x8', ctypes.c_bool),
    ('has_sudot_4x8', ctypes.c_bool),
    ('has_sdot_4x8_sat', ctypes.c_bool),
    ('has_udot_4x8_sat', ctypes.c_bool),
    ('has_sudot_4x8_sat', ctypes.c_bool),
    ('has_dot_2x16', ctypes.c_bool),
    ('has_bfdot2_bfadd', ctypes.c_bool),
    ('has_fmulz', ctypes.c_bool),
    ('has_fmulz_no_denorms', ctypes.c_bool),
    ('has_find_msb_rev', ctypes.c_bool),
    ('has_pack_half_2x16_rtz', ctypes.c_bool),
    ('has_bit_test', ctypes.c_bool),
    ('has_bfe', ctypes.c_bool),
    ('has_bfm', ctypes.c_bool),
    ('has_bfi', ctypes.c_bool),
    ('has_bitfield_select', ctypes.c_bool),
    ('has_uclz', ctypes.c_bool),
    ('has_msad', ctypes.c_bool),
    ('has_f2e4m3fn_satfn', ctypes.c_bool),
    ('has_load_global_bounded', ctypes.c_bool),
    ('intel_vec4', ctypes.c_bool),
    ('avoid_ternary_with_two_constants', ctypes.c_bool),
    ('support_8bit_alu', ctypes.c_bool),
    ('support_16bit_alu', ctypes.c_bool),
    ('PADDING_1', ctypes.c_ubyte * 2),
    ('max_unroll_iterations', ctypes.c_uint32),
    ('max_unroll_iterations_aggressive', ctypes.c_uint32),
    ('max_unroll_iterations_fp64', ctypes.c_uint32),
    ('lower_uniforms_to_ubo', ctypes.c_bool),
    ('force_indirect_unrolling_sampler', ctypes.c_bool),
    ('no_integers', ctypes.c_bool),
    ('PADDING_2', ctypes.c_ubyte),
    ('force_indirect_unrolling', c__EA_nir_variable_mode),
    ('driver_functions', ctypes.c_bool),
    ('late_lower_int64', ctypes.c_bool),
    ('PADDING_3', ctypes.c_ubyte * 2),
    ('lower_int64_options', nir_lower_int64_options),
    ('lower_doubles_options', nir_lower_doubles_options),
    ('divergence_analysis_options', nir_divergence_options),
    ('support_indirect_inputs', ctypes.c_ubyte),
    ('support_indirect_outputs', ctypes.c_ubyte),
    ('lower_image_offset_to_range_base', ctypes.c_bool),
    ('lower_atomic_offset_to_range_base', ctypes.c_bool),
    ('preserve_mediump', ctypes.c_bool),
    ('lower_fquantize2f16', ctypes.c_bool),
    ('force_f2f16_rtz', ctypes.c_bool),
    ('lower_layer_fs_input_to_sysval', ctypes.c_bool),
    ('compact_arrays', ctypes.c_bool),
    ('discard_is_demote', ctypes.c_bool),
    ('has_ddx_intrinsics', ctypes.c_bool),
    ('scalarize_ddx', ctypes.c_bool),
    ('per_view_unique_driver_locations', ctypes.c_bool),
    ('compact_view_index', ctypes.c_bool),
    ('PADDING_4', ctypes.c_ubyte * 2),
    ('io_options', nir_io_options),
    ('skip_lower_packing_ops', ctypes.c_uint32),
    ('subgroup_size', ctypes.c_ubyte),
    ('ballot_bit_size', ctypes.c_ubyte),
    ('ballot_components', ctypes.c_ubyte),
    ('PADDING_5', ctypes.c_ubyte * 5),
    ('lower_mediump_io', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_nir_shader))),
    ('varying_expression_max_cost', ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(struct_nir_shader), ctypes.POINTER(struct_nir_shader))),
    ('varying_estimate_instr_cost', ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(struct_nir_instr))),
    ('max_varying_expression_cost', ctypes.c_uint32),
    ('PADDING_6', ctypes.c_ubyte * 4),
]

class struct_gc_ctx(Structure):
    pass

class struct_nir_xfb_info(Structure):
    pass

class struct_u_printf_info(Structure):
    pass

class struct_shader_info(Structure):
    pass


# values for enumeration 'mesa_shader_stage'
mesa_shader_stage__enumvalues = {
    -1: 'MESA_SHADER_NONE',
    0: 'MESA_SHADER_VERTEX',
    1: 'MESA_SHADER_TESS_CTRL',
    2: 'MESA_SHADER_TESS_EVAL',
    3: 'MESA_SHADER_GEOMETRY',
    4: 'MESA_SHADER_FRAGMENT',
    5: 'MESA_SHADER_COMPUTE',
    6: 'MESA_SHADER_TASK',
    7: 'MESA_SHADER_MESH',
    8: 'MESA_SHADER_RAYGEN',
    9: 'MESA_SHADER_ANY_HIT',
    10: 'MESA_SHADER_CLOSEST_HIT',
    11: 'MESA_SHADER_MISS',
    12: 'MESA_SHADER_INTERSECTION',
    13: 'MESA_SHADER_CALLABLE',
    14: 'MESA_SHADER_KERNEL',
}
MESA_SHADER_NONE = -1
MESA_SHADER_VERTEX = 0
MESA_SHADER_TESS_CTRL = 1
MESA_SHADER_TESS_EVAL = 2
MESA_SHADER_GEOMETRY = 3
MESA_SHADER_FRAGMENT = 4
MESA_SHADER_COMPUTE = 5
MESA_SHADER_TASK = 6
MESA_SHADER_MESH = 7
MESA_SHADER_RAYGEN = 8
MESA_SHADER_ANY_HIT = 9
MESA_SHADER_CLOSEST_HIT = 10
MESA_SHADER_MISS = 11
MESA_SHADER_INTERSECTION = 12
MESA_SHADER_CALLABLE = 13
MESA_SHADER_KERNEL = 14
mesa_shader_stage = ctypes.c_int32 # enum

# values for enumeration 'gl_subgroup_size'
gl_subgroup_size__enumvalues = {
    0: 'SUBGROUP_SIZE_VARYING',
    1: 'SUBGROUP_SIZE_UNIFORM',
    2: 'SUBGROUP_SIZE_API_CONSTANT',
    3: 'SUBGROUP_SIZE_FULL_SUBGROUPS',
    4: 'SUBGROUP_SIZE_REQUIRE_4',
    8: 'SUBGROUP_SIZE_REQUIRE_8',
    16: 'SUBGROUP_SIZE_REQUIRE_16',
    32: 'SUBGROUP_SIZE_REQUIRE_32',
    64: 'SUBGROUP_SIZE_REQUIRE_64',
    128: 'SUBGROUP_SIZE_REQUIRE_128',
}
SUBGROUP_SIZE_VARYING = 0
SUBGROUP_SIZE_UNIFORM = 1
SUBGROUP_SIZE_API_CONSTANT = 2
SUBGROUP_SIZE_FULL_SUBGROUPS = 3
SUBGROUP_SIZE_REQUIRE_4 = 4
SUBGROUP_SIZE_REQUIRE_8 = 8
SUBGROUP_SIZE_REQUIRE_16 = 16
SUBGROUP_SIZE_REQUIRE_32 = 32
SUBGROUP_SIZE_REQUIRE_64 = 64
SUBGROUP_SIZE_REQUIRE_128 = 128
gl_subgroup_size = ctypes.c_uint32 # enum

# values for enumeration 'gl_derivative_group'
gl_derivative_group__enumvalues = {
    0: 'DERIVATIVE_GROUP_NONE',
    1: 'DERIVATIVE_GROUP_QUADS',
    2: 'DERIVATIVE_GROUP_LINEAR',
}
DERIVATIVE_GROUP_NONE = 0
DERIVATIVE_GROUP_QUADS = 1
DERIVATIVE_GROUP_LINEAR = 2
gl_derivative_group = ctypes.c_uint32 # enum
class union_shader_info_0(Union):
    pass

class struct_shader_info_0_vs(Structure):
    pass

struct_shader_info_0_vs._pack_ = 1 # source:False
struct_shader_info_0_vs._fields_ = [
    ('double_inputs', ctypes.c_uint64),
    ('blit_sgprs_amd', ctypes.c_ubyte, 4),
    ('tes_agx', ctypes.c_ubyte, 1),
    ('window_space_position', ctypes.c_ubyte, 1),
    ('needs_edge_flag', ctypes.c_ubyte, 1),
    ('PADDING_0', ctypes.c_uint64, 57),
]

class struct_shader_info_0_gs(Structure):
    pass


# values for enumeration 'mesa_prim'
mesa_prim__enumvalues = {
    0: 'MESA_PRIM_POINTS',
    1: 'MESA_PRIM_LINES',
    2: 'MESA_PRIM_LINE_LOOP',
    3: 'MESA_PRIM_LINE_STRIP',
    4: 'MESA_PRIM_TRIANGLES',
    5: 'MESA_PRIM_TRIANGLE_STRIP',
    6: 'MESA_PRIM_TRIANGLE_FAN',
    7: 'MESA_PRIM_QUADS',
    8: 'MESA_PRIM_QUAD_STRIP',
    9: 'MESA_PRIM_POLYGON',
    10: 'MESA_PRIM_LINES_ADJACENCY',
    11: 'MESA_PRIM_LINE_STRIP_ADJACENCY',
    12: 'MESA_PRIM_TRIANGLES_ADJACENCY',
    13: 'MESA_PRIM_TRIANGLE_STRIP_ADJACENCY',
    14: 'MESA_PRIM_PATCHES',
    14: 'MESA_PRIM_MAX',
    15: 'MESA_PRIM_COUNT',
    28: 'MESA_PRIM_UNKNOWN',
}
MESA_PRIM_POINTS = 0
MESA_PRIM_LINES = 1
MESA_PRIM_LINE_LOOP = 2
MESA_PRIM_LINE_STRIP = 3
MESA_PRIM_TRIANGLES = 4
MESA_PRIM_TRIANGLE_STRIP = 5
MESA_PRIM_TRIANGLE_FAN = 6
MESA_PRIM_QUADS = 7
MESA_PRIM_QUAD_STRIP = 8
MESA_PRIM_POLYGON = 9
MESA_PRIM_LINES_ADJACENCY = 10
MESA_PRIM_LINE_STRIP_ADJACENCY = 11
MESA_PRIM_TRIANGLES_ADJACENCY = 12
MESA_PRIM_TRIANGLE_STRIP_ADJACENCY = 13
MESA_PRIM_PATCHES = 14
MESA_PRIM_MAX = 14
MESA_PRIM_COUNT = 15
MESA_PRIM_UNKNOWN = 28
mesa_prim = ctypes.c_uint32 # enum
struct_shader_info_0_gs._pack_ = 1 # source:False
struct_shader_info_0_gs._fields_ = [
    ('output_primitive', mesa_prim),
    ('input_primitive', mesa_prim),
    ('vertices_out', ctypes.c_uint16),
    ('invocations', ctypes.c_ubyte),
    ('vertices_in', ctypes.c_ubyte, 3),
    ('uses_end_primitive', ctypes.c_ubyte, 1),
    ('active_stream_mask', ctypes.c_ubyte, 4),
]

class struct_shader_info_0_fs(Structure):
    pass


# values for enumeration 'c_uint64'
c_uint64__enumvalues = {
    0: 'FRAG_DEPTH_LAYOUT_NONE',
    1: 'FRAG_DEPTH_LAYOUT_ANY',
    2: 'FRAG_DEPTH_LAYOUT_GREATER',
    3: 'FRAG_DEPTH_LAYOUT_LESS',
    4: 'FRAG_DEPTH_LAYOUT_UNCHANGED',
}
FRAG_DEPTH_LAYOUT_NONE = 0
FRAG_DEPTH_LAYOUT_ANY = 1
FRAG_DEPTH_LAYOUT_GREATER = 2
FRAG_DEPTH_LAYOUT_LESS = 3
FRAG_DEPTH_LAYOUT_UNCHANGED = 4
c_uint64 = ctypes.c_uint32 # enum

# values for enumeration 'c_bool'
c_bool__enumvalues = {
    0: 'FRAG_STENCIL_LAYOUT_NONE',
    1: 'FRAG_STENCIL_LAYOUT_ANY',
    2: 'FRAG_STENCIL_LAYOUT_GREATER',
    3: 'FRAG_STENCIL_LAYOUT_LESS',
    4: 'FRAG_STENCIL_LAYOUT_UNCHANGED',
}
FRAG_STENCIL_LAYOUT_NONE = 0
FRAG_STENCIL_LAYOUT_ANY = 1
FRAG_STENCIL_LAYOUT_GREATER = 2
FRAG_STENCIL_LAYOUT_LESS = 3
FRAG_STENCIL_LAYOUT_UNCHANGED = 4
c_bool = ctypes.c_uint32 # enum
struct_shader_info_0_fs._pack_ = 1 # source:False
struct_shader_info_0_fs._fields_ = [
    ('uses_discard', ctypes.c_uint64, 1),
    ('uses_fbfetch_output', ctypes.c_uint64, 1),
    ('fbfetch_coherent', ctypes.c_uint64, 1),
    ('color_is_dual_source', ctypes.c_uint64, 1),
    ('require_full_quads', ctypes.c_uint64, 1),
    ('quad_derivatives', ctypes.c_uint64, 1),
    ('needs_coarse_quad_helper_invocations', ctypes.c_uint64, 1),
    ('needs_full_quad_helper_invocations', ctypes.c_uint64, 1),
    ('uses_sample_qualifier', ctypes.c_uint64, 1),
    ('uses_sample_shading', ctypes.c_uint64, 1),
    ('early_fragment_tests', ctypes.c_uint64, 1),
    ('inner_coverage', ctypes.c_uint64, 1),
    ('post_depth_coverage', ctypes.c_uint64, 1),
    ('pixel_center_integer', ctypes.c_uint64, 1),
    ('origin_upper_left', ctypes.c_uint64, 1),
    ('pixel_interlock_ordered', ctypes.c_uint64, 1),
    ('pixel_interlock_unordered', ctypes.c_uint64, 1),
    ('sample_interlock_ordered', ctypes.c_uint64, 1),
    ('sample_interlock_unordered', ctypes.c_uint64, 1),
    ('untyped_color_outputs', ctypes.c_uint64, 1),
    ('depth_layout', c_uint64, 3),
    ('color0_interp', ctypes.c_uint64, 3),
    ('color0_sample', ctypes.c_uint64, 1),
    ('color0_centroid', ctypes.c_uint64, 1),
    ('color1_interp', ctypes.c_uint64, 3),
    ('color1_sample', ctypes.c_uint64, 1),
    ('color1_centroid', ctypes.c_uint64, 1),
    ('PADDING_0', ctypes.c_uint32, 31),
    ('advanced_blend_modes', ctypes.c_uint32),
    ('early_and_late_fragment_tests', ctypes.c_bool, 1),
    ('stencil_front_layout', c_bool, 3),
    ('stencil_back_layout', c_bool, 3),
    ('PADDING_1', ctypes.c_uint32, 25),
]

class struct_shader_info_0_cs(Structure):
    pass

struct_shader_info_0_cs._pack_ = 1 # source:False
struct_shader_info_0_cs._fields_ = [
    ('workgroup_size_hint', ctypes.c_uint16 * 3),
    ('user_data_components_amd', ctypes.c_ubyte, 4),
    ('has_variable_shared_mem', ctypes.c_ubyte, 1),
    ('has_cooperative_matrix', ctypes.c_ubyte, 1),
    ('PADDING_0', ctypes.c_uint8, 2),
    ('image_block_size_per_thread_agx', ctypes.c_ubyte, 8),
    ('ptr_size', ctypes.c_uint32),
    ('shader_index', ctypes.c_uint32),
    ('node_payloads_size', ctypes.c_uint32),
    ('workgroup_count', ctypes.c_uint32 * 3),
]

class struct_shader_info_0_tess(Structure):
    pass


# values for enumeration 'tess_primitive_mode'
tess_primitive_mode__enumvalues = {
    0: 'TESS_PRIMITIVE_UNSPECIFIED',
    1: 'TESS_PRIMITIVE_TRIANGLES',
    2: 'TESS_PRIMITIVE_QUADS',
    3: 'TESS_PRIMITIVE_ISOLINES',
}
TESS_PRIMITIVE_UNSPECIFIED = 0
TESS_PRIMITIVE_TRIANGLES = 1
TESS_PRIMITIVE_QUADS = 2
TESS_PRIMITIVE_ISOLINES = 3
tess_primitive_mode = ctypes.c_uint32 # enum
struct_shader_info_0_tess._pack_ = 1 # source:False
struct_shader_info_0_tess._fields_ = [
    ('_primitive_mode', tess_primitive_mode),
    ('tcs_vertices_out', ctypes.c_ubyte),
    ('spacing', ctypes.c_uint32, 2),
    ('ccw', ctypes.c_uint32, 1),
    ('point_mode', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 20),
    ('tcs_same_invocation_inputs_read', ctypes.c_uint64),
    ('tcs_cross_invocation_inputs_read', ctypes.c_uint64),
    ('tcs_cross_invocation_outputs_read', ctypes.c_uint64),
    ('tcs_cross_invocation_outputs_written', ctypes.c_uint64),
    ('tcs_outputs_read_by_tes', ctypes.c_uint64),
    ('tcs_patch_outputs_read_by_tes', ctypes.c_uint32),
    ('tcs_outputs_read_by_tes_16bit', ctypes.c_uint16),
    ('PADDING_1', ctypes.c_ubyte * 2),
]

class struct_shader_info_0_mesh(Structure):
    pass

struct_shader_info_0_mesh._pack_ = 1 # source:False
struct_shader_info_0_mesh._fields_ = [
    ('ms_cross_invocation_output_access', ctypes.c_uint64),
    ('ts_mesh_dispatch_dimensions', ctypes.c_uint32 * 3),
    ('max_vertices_out', ctypes.c_uint16),
    ('max_primitives_out', ctypes.c_uint16),
    ('primitive_type', mesa_prim),
    ('nv', ctypes.c_bool),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

union_shader_info_0._pack_ = 1 # source:False
union_shader_info_0._fields_ = [
    ('vs', struct_shader_info_0_vs),
    ('gs', struct_shader_info_0_gs),
    ('fs', struct_shader_info_0_fs),
    ('cs', struct_shader_info_0_cs),
    ('tess', struct_shader_info_0_tess),
    ('mesh', struct_shader_info_0_mesh),
    ('PADDING_0', ctypes.c_ubyte * 24),
]

struct_shader_info._pack_ = 1 # source:False
struct_shader_info._anonymous_ = ('_0',)
struct_shader_info._fields_ = [
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('label', ctypes.POINTER(ctypes.c_char)),
    ('internal', ctypes.c_bool),
    ('source_blake3', ctypes.c_ubyte * 32),
    ('stage', mesa_shader_stage, 8),
    ('prev_stage', mesa_shader_stage, 8),
    ('next_stage', mesa_shader_stage, 8),
    ('prev_stage_has_xfb', mesa_shader_stage, 8),
    ('num_textures', ctypes.c_ubyte),
    ('num_ubos', ctypes.c_ubyte),
    ('num_abos', ctypes.c_ubyte),
    ('num_ssbos', ctypes.c_ubyte),
    ('num_images', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('inputs_read', ctypes.c_uint64),
    ('dual_slot_inputs', ctypes.c_uint64),
    ('outputs_written', ctypes.c_uint64),
    ('outputs_read', ctypes.c_uint64),
    ('system_values_read', ctypes.c_uint32 * 4),
    ('perspective_varyings', ctypes.c_uint64),
    ('linear_varyings', ctypes.c_uint64),
    ('per_primitive_inputs', ctypes.c_uint64),
    ('per_primitive_outputs', ctypes.c_uint64),
    ('per_view_outputs', ctypes.c_uint64),
    ('view_mask', ctypes.c_uint32),
    ('inputs_read_16bit', ctypes.c_uint16),
    ('outputs_written_16bit', ctypes.c_uint16),
    ('outputs_read_16bit', ctypes.c_uint16),
    ('inputs_read_indirectly_16bit', ctypes.c_uint16),
    ('outputs_read_indirectly_16bit', ctypes.c_uint16),
    ('outputs_written_indirectly_16bit', ctypes.c_uint16),
    ('patch_inputs_read', ctypes.c_uint32),
    ('patch_outputs_written', ctypes.c_uint32),
    ('patch_outputs_read', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('inputs_read_indirectly', ctypes.c_uint64),
    ('outputs_read_indirectly', ctypes.c_uint64),
    ('outputs_written_indirectly', ctypes.c_uint64),
    ('patch_inputs_read_indirectly', ctypes.c_uint32),
    ('patch_outputs_read_indirectly', ctypes.c_uint32),
    ('patch_outputs_written_indirectly', ctypes.c_uint32),
    ('textures_used', ctypes.c_uint32 * 4),
    ('textures_used_by_txf', ctypes.c_uint32 * 4),
    ('samplers_used', ctypes.c_uint32 * 1),
    ('images_used', ctypes.c_uint32 * 2),
    ('image_buffers', ctypes.c_uint32 * 2),
    ('msaa_images', ctypes.c_uint32 * 2),
    ('float_controls_execution_mode', ctypes.c_uint32),
    ('shared_size', ctypes.c_uint32),
    ('task_payload_size', ctypes.c_uint32),
    ('ray_queries', ctypes.c_uint32),
    ('workgroup_size', ctypes.c_uint16 * 3),
    ('PADDING_2', ctypes.c_ubyte * 2),
    ('subgroup_size', gl_subgroup_size),
    ('num_subgroups', ctypes.c_ubyte),
    ('uses_wide_subgroup_intrinsics', ctypes.c_bool),
    ('xfb_stride', ctypes.c_ubyte * 4),
    ('inlinable_uniform_dw_offsets', ctypes.c_uint16 * 4),
    ('num_inlinable_uniforms', ctypes.c_ubyte, 4),
    ('clip_distance_array_size', ctypes.c_ubyte, 4),
    ('cull_distance_array_size', ctypes.c_ubyte, 4),
    ('uses_texture_gather', ctypes.c_ubyte, 1),
    ('uses_resource_info_query', ctypes.c_ubyte, 1),
    ('PADDING_3', ctypes.c_uint8, 2),
    ('bit_sizes_float', ctypes.c_ubyte, 8),
    ('bit_sizes_int', ctypes.c_ubyte),
    ('first_ubo_is_default_ubo', ctypes.c_bool, 1),
    ('separate_shader', ctypes.c_bool, 1),
    ('known_interpolation_qualifiers', ctypes.c_bool, 1),
    ('has_transform_feedback_varyings', ctypes.c_bool, 1),
    ('flrp_lowered', ctypes.c_bool, 1),
    ('io_lowered', ctypes.c_bool, 1),
    ('var_copies_lowered', ctypes.c_bool, 1),
    ('writes_memory', ctypes.c_bool, 1),
    ('layer_viewport_relative', ctypes.c_bool, 1),
    ('uses_control_barrier', ctypes.c_bool, 1),
    ('uses_memory_barrier', ctypes.c_bool, 1),
    ('uses_bindless', ctypes.c_bool, 1),
    ('shared_memory_explicit_layout', ctypes.c_bool, 1),
    ('zero_initialize_shared_memory', ctypes.c_bool, 1),
    ('workgroup_size_variable', ctypes.c_bool, 1),
    ('uses_printf', ctypes.c_bool, 1),
    ('maximally_reconverges', ctypes.c_bool, 1),
    ('use_aco_amd', ctypes.c_bool, 1),
    ('use_lowered_image_to_global', ctypes.c_bool, 1),
    ('PADDING_4', ctypes.c_uint8, 5),
    ('use_legacy_math_rules', ctypes.c_bool, 8),
    ('derivative_group', gl_derivative_group, 2),
    ('PADDING_5', ctypes.c_uint64, 46),
    ('_0', union_shader_info_0),
]

struct_nir_shader._pack_ = 1 # source:False
struct_nir_shader._fields_ = [
    ('gctx', ctypes.POINTER(struct_gc_ctx)),
    ('variables', struct_exec_list),
    ('options', ctypes.POINTER(struct_nir_shader_compiler_options)),
    ('info', struct_shader_info),
    ('functions', struct_exec_list),
    ('num_inputs', ctypes.c_uint32),
    ('num_uniforms', ctypes.c_uint32),
    ('num_outputs', ctypes.c_uint32),
    ('global_mem_size', ctypes.c_uint32),
    ('scratch_size', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('constant_data', ctypes.POINTER(None)),
    ('constant_data_size', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('xfb_info', ctypes.POINTER(struct_nir_xfb_info)),
    ('printf_info_count', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('printf_info', ctypes.POINTER(struct_u_printf_info)),
    ('has_debug_info', ctypes.c_bool),
    ('PADDING_3', ctypes.c_ubyte * 7),
]

nir_shader_compiler_options = struct_nir_shader_compiler_options
class struct_lp_build_tgsi_params(Structure):
    pass

class struct_lp_bld_tgsi_system_values(Structure):
    pass

class struct_lp_build_sampler_soa(Structure):
    pass

class struct_tgsi_shader_info(Structure):
    pass

class struct_lp_build_gs_iface(Structure):
    pass

class struct_lp_build_tcs_iface(Structure):
    pass

class struct_lp_build_tes_iface(Structure):
    pass

class struct_lp_build_mesh_iface(Structure):
    pass

class struct_lp_build_image_soa(Structure):
    pass

class struct_lp_build_coro_suspend_info(Structure):
    pass

class struct_lp_build_fs_iface(Structure):
    pass

class struct_hash_table(Structure):
    pass

struct_lp_build_tgsi_params._pack_ = 1 # source:False
struct_lp_build_tgsi_params._fields_ = [
    ('type', struct_lp_type),
    ('mask', ctypes.POINTER(struct_lp_build_mask_context)),
    ('consts_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('const_sizes_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('system_values', ctypes.POINTER(struct_lp_bld_tgsi_system_values)),
    ('inputs', ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue) * 4)),
    ('num_inputs', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('context_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('context_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('resources_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('resources_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('thread_data_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('thread_data_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('sampler', ctypes.POINTER(struct_lp_build_sampler_soa)),
    ('info', ctypes.POINTER(struct_tgsi_shader_info)),
    ('gs_iface', ctypes.POINTER(struct_lp_build_gs_iface)),
    ('tcs_iface', ctypes.POINTER(struct_lp_build_tcs_iface)),
    ('tes_iface', ctypes.POINTER(struct_lp_build_tes_iface)),
    ('mesh_iface', ctypes.POINTER(struct_lp_build_mesh_iface)),
    ('ssbo_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('ssbo_sizes_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('image', ctypes.POINTER(struct_lp_build_image_soa)),
    ('shared_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('payload_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('coro', ctypes.POINTER(struct_lp_build_coro_suspend_info)),
    ('fs_iface', ctypes.POINTER(struct_lp_build_fs_iface)),
    ('gs_vertex_streams', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('current_func', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('fns', ctypes.POINTER(struct_hash_table)),
    ('scratch_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('call_context_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
]

struct_lp_bld_tgsi_system_values._pack_ = 1 # source:False
struct_lp_bld_tgsi_system_values._fields_ = [
    ('instance_id', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('base_instance', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('vertex_id', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('vertex_id_nobase', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('prim_id', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('basevertex', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('firstvertex', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('invocation_id', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('draw_id', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('thread_id', ctypes.POINTER(struct_LLVMOpaqueValue) * 3),
    ('block_id', ctypes.POINTER(struct_LLVMOpaqueValue) * 3),
    ('grid_size', ctypes.POINTER(struct_LLVMOpaqueValue) * 3),
    ('front_facing', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('work_dim', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('block_size', ctypes.POINTER(struct_LLVMOpaqueValue) * 3),
    ('tess_coord', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('tess_outer', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('tess_inner', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('vertices_in', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('sample_id', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('sample_pos_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('sample_pos', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('sample_mask_in', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('view_index', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('subgroup_id', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('num_subgroups', ctypes.POINTER(struct_LLVMOpaqueValue)),
]

class struct_lp_sampler_params(Structure):
    pass

class struct_lp_sampler_size_query_params(Structure):
    pass

struct_lp_build_sampler_soa._pack_ = 1 # source:False
struct_lp_build_sampler_soa._fields_ = [
    ('emit_tex_sample', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_sampler_soa), ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(struct_lp_sampler_params))),
    ('emit_size_query', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_sampler_soa), ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(struct_lp_sampler_size_query_params))),
]

class struct_lp_derivatives(Structure):
    pass

struct_lp_sampler_params._pack_ = 1 # source:False
struct_lp_sampler_params._fields_ = [
    ('type', struct_lp_type),
    ('texture_index', ctypes.c_uint32),
    ('sampler_index', ctypes.c_uint32),
    ('texture_index_offset', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('sample_key', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('resources_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('resources_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('thread_data_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('thread_data_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('coords', ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('offsets', ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('ms_index', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('lod', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('min_lod', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('derivs', ctypes.POINTER(struct_lp_derivatives)),
    ('texel', ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('texture_resource', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('sampler_resource', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('exec_mask', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('exec_mask_nz', ctypes.c_bool),
    ('PADDING_1', ctypes.c_ubyte * 7),
]

struct_lp_derivatives._pack_ = 1 # source:False
struct_lp_derivatives._fields_ = [
    ('ddx', ctypes.POINTER(struct_LLVMOpaqueValue) * 3),
    ('ddy', ctypes.POINTER(struct_LLVMOpaqueValue) * 3),
]


# values for enumeration 'lp_sampler_lod_property'
lp_sampler_lod_property__enumvalues = {
    0: 'LP_SAMPLER_LOD_SCALAR',
    1: 'LP_SAMPLER_LOD_PER_ELEMENT',
    2: 'LP_SAMPLER_LOD_PER_QUAD',
}
LP_SAMPLER_LOD_SCALAR = 0
LP_SAMPLER_LOD_PER_ELEMENT = 1
LP_SAMPLER_LOD_PER_QUAD = 2
lp_sampler_lod_property = ctypes.c_uint32 # enum
struct_lp_sampler_size_query_params._pack_ = 1 # source:False
struct_lp_sampler_size_query_params._fields_ = [
    ('int_type', struct_lp_type),
    ('texture_unit', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('texture_unit_offset', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('target', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('resources_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('resources_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('is_sviewinfo', ctypes.c_bool),
    ('samples_only', ctypes.c_bool),
    ('ms', ctypes.c_bool),
    ('PADDING_2', ctypes.c_ubyte),
    ('lod_property', lp_sampler_lod_property),
    ('explicit_lod', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('sizes_out', ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('resource', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('exec_mask', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('exec_mask_nz', ctypes.c_bool),
    ('PADDING_3', ctypes.c_ubyte * 3),
    ('format', pipe_format),
]

struct_tgsi_shader_info._pack_ = 1 # source:False
struct_tgsi_shader_info._fields_ = [
    ('num_inputs', ctypes.c_ubyte),
    ('num_outputs', ctypes.c_ubyte),
    ('input_semantic_name', ctypes.c_ubyte * 80),
    ('input_semantic_index', ctypes.c_ubyte * 80),
    ('input_interpolate', ctypes.c_ubyte * 80),
    ('input_interpolate_loc', ctypes.c_ubyte * 80),
    ('input_usage_mask', ctypes.c_ubyte * 80),
    ('output_semantic_name', ctypes.c_ubyte * 80),
    ('output_semantic_index', ctypes.c_ubyte * 80),
    ('output_usagemask', ctypes.c_ubyte * 80),
    ('output_streams', ctypes.c_ubyte * 80),
    ('num_system_values', ctypes.c_ubyte),
    ('system_value_semantic_name', ctypes.c_ubyte * 80),
    ('PADDING_0', ctypes.c_ubyte),
    ('processor', mesa_shader_stage),
    ('file_mask', ctypes.c_uint32 * 15),
    ('file_count', ctypes.c_uint32 * 15),
    ('file_max', ctypes.c_int32 * 15),
    ('const_file_max', ctypes.c_int32 * 32),
    ('const_buffers_declared', ctypes.c_uint32),
    ('samplers_declared', ctypes.c_uint32),
    ('sampler_targets', ctypes.c_ubyte * 128),
    ('sampler_type', ctypes.c_ubyte * 128),
    ('num_stream_output_components', ctypes.c_ubyte * 4),
    ('input_array_first', ctypes.c_ubyte * 80),
    ('output_array_first', ctypes.c_ubyte * 80),
    ('immediate_count', ctypes.c_uint32),
    ('num_instructions', ctypes.c_uint32),
    ('opcode_count', ctypes.c_uint32 * 252),
    ('reads_pervertex_outputs', ctypes.c_bool),
    ('reads_perpatch_outputs', ctypes.c_bool),
    ('reads_tessfactor_outputs', ctypes.c_bool),
    ('reads_z', ctypes.c_bool),
    ('writes_z', ctypes.c_bool),
    ('writes_stencil', ctypes.c_bool),
    ('writes_samplemask', ctypes.c_bool),
    ('writes_edgeflag', ctypes.c_bool),
    ('uses_kill', ctypes.c_bool),
    ('uses_instanceid', ctypes.c_bool),
    ('uses_vertexid', ctypes.c_bool),
    ('uses_vertexid_nobase', ctypes.c_bool),
    ('uses_basevertex', ctypes.c_bool),
    ('uses_primid', ctypes.c_bool),
    ('uses_frontface', ctypes.c_bool),
    ('uses_invocationid', ctypes.c_bool),
    ('uses_grid_size', ctypes.c_bool),
    ('writes_position', ctypes.c_bool),
    ('writes_psize', ctypes.c_bool),
    ('writes_clipvertex', ctypes.c_bool),
    ('writes_viewport_index', ctypes.c_bool),
    ('writes_layer', ctypes.c_bool),
    ('writes_memory', ctypes.c_bool),
    ('uses_fbfetch', ctypes.c_bool),
    ('num_written_culldistance', ctypes.c_uint32),
    ('num_written_clipdistance', ctypes.c_uint32),
    ('images_declared', ctypes.c_uint32),
    ('msaa_images_declared', ctypes.c_uint32),
    ('images_buffers', ctypes.c_uint32),
    ('shader_buffers_declared', ctypes.c_uint32),
    ('shader_buffers_load', ctypes.c_uint32),
    ('shader_buffers_store', ctypes.c_uint32),
    ('shader_buffers_atomic', ctypes.c_uint32),
    ('hw_atomic_declared', ctypes.c_uint32),
    ('indirect_files', ctypes.c_uint32),
    ('dim_indirect_files', ctypes.c_uint32),
    ('properties', ctypes.c_uint32 * 29),
]

struct_lp_build_gs_iface._pack_ = 1 # source:False
struct_lp_build_gs_iface._fields_ = [
    ('fetch_input', ctypes.CFUNCTYPE(ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_lp_build_gs_iface), ctypes.POINTER(struct_lp_build_context), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('emit_vertex', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_gs_iface), ctypes.POINTER(struct_lp_build_context), ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue) * 4), ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('end_primitive', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_gs_iface), ctypes.POINTER(struct_lp_build_context), ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_uint32)),
    ('gs_epilogue', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_gs_iface), ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_uint32)),
]

struct_lp_build_tcs_iface._pack_ = 1 # source:False
struct_lp_build_tcs_iface._fields_ = [
    ('emit_prologue', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_context))),
    ('emit_epilogue', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_context))),
    ('emit_barrier', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_context))),
    ('emit_store_output', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_tcs_iface), ctypes.POINTER(struct_lp_build_context), ctypes.c_uint32, ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('emit_fetch_input', ctypes.CFUNCTYPE(ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_lp_build_tcs_iface), ctypes.POINTER(struct_lp_build_context), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('emit_fetch_output', ctypes.CFUNCTYPE(ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_lp_build_tcs_iface), ctypes.POINTER(struct_lp_build_context), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_uint32)),
]

struct_lp_build_tes_iface._pack_ = 1 # source:False
struct_lp_build_tes_iface._fields_ = [
    ('fetch_vertex_input', ctypes.CFUNCTYPE(ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_lp_build_tes_iface), ctypes.POINTER(struct_lp_build_context), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('fetch_patch_input', ctypes.CFUNCTYPE(ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_lp_build_tes_iface), ctypes.POINTER(struct_lp_build_context), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue))),
]

struct_lp_build_mesh_iface._pack_ = 1 # source:False
struct_lp_build_mesh_iface._fields_ = [
    ('emit_store_output', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_mesh_iface), ctypes.POINTER(struct_lp_build_context), ctypes.c_uint32, ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('emit_vertex_and_primitive_count', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_mesh_iface), ctypes.POINTER(struct_lp_build_context), ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_LLVMOpaqueValue))),
]

class struct_lp_img_params(Structure):
    pass

struct_lp_build_image_soa._pack_ = 1 # source:False
struct_lp_build_image_soa._fields_ = [
    ('emit_op', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_image_soa), ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(struct_lp_img_params))),
    ('emit_size_query', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_image_soa), ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(struct_lp_sampler_size_query_params))),
]


# values for enumeration 'c__EA_LLVMAtomicRMWBinOp'
c__EA_LLVMAtomicRMWBinOp__enumvalues = {
    0: 'LLVMAtomicRMWBinOpXchg',
    1: 'LLVMAtomicRMWBinOpAdd',
    2: 'LLVMAtomicRMWBinOpSub',
    3: 'LLVMAtomicRMWBinOpAnd',
    4: 'LLVMAtomicRMWBinOpNand',
    5: 'LLVMAtomicRMWBinOpOr',
    6: 'LLVMAtomicRMWBinOpXor',
    7: 'LLVMAtomicRMWBinOpMax',
    8: 'LLVMAtomicRMWBinOpMin',
    9: 'LLVMAtomicRMWBinOpUMax',
    10: 'LLVMAtomicRMWBinOpUMin',
    11: 'LLVMAtomicRMWBinOpFAdd',
    12: 'LLVMAtomicRMWBinOpFSub',
}
LLVMAtomicRMWBinOpXchg = 0
LLVMAtomicRMWBinOpAdd = 1
LLVMAtomicRMWBinOpSub = 2
LLVMAtomicRMWBinOpAnd = 3
LLVMAtomicRMWBinOpNand = 4
LLVMAtomicRMWBinOpOr = 5
LLVMAtomicRMWBinOpXor = 6
LLVMAtomicRMWBinOpMax = 7
LLVMAtomicRMWBinOpMin = 8
LLVMAtomicRMWBinOpUMax = 9
LLVMAtomicRMWBinOpUMin = 10
LLVMAtomicRMWBinOpFAdd = 11
LLVMAtomicRMWBinOpFSub = 12
c__EA_LLVMAtomicRMWBinOp = ctypes.c_uint32 # enum
struct_lp_img_params._pack_ = 1 # source:False
struct_lp_img_params._fields_ = [
    ('type', struct_lp_type),
    ('image_index', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('image_index_offset', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('img_op', ctypes.c_uint32),
    ('target', ctypes.c_uint32),
    ('packed_op', ctypes.c_uint32),
    ('instr_has_layer_coord', ctypes.c_bool),
    ('PADDING_1', ctypes.c_ubyte * 3),
    ('op', c__EA_LLVMAtomicRMWBinOp),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('exec_mask', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('exec_mask_nz', ctypes.c_bool),
    ('PADDING_3', ctypes.c_ubyte * 7),
    ('resources_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('resources_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('thread_data_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('thread_data_ptr', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('coords', ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('ms_index', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('indata', ctypes.POINTER(struct_LLVMOpaqueValue) * 4),
    ('indata2', ctypes.POINTER(struct_LLVMOpaqueValue) * 4),
    ('outdata', ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue))),
    ('resource', ctypes.POINTER(struct_LLVMOpaqueValue)),
    ('format', pipe_format),
    ('PADDING_4', ctypes.c_ubyte * 4),
]

struct_lp_build_fs_iface._pack_ = 1 # source:False
struct_lp_build_fs_iface._fields_ = [
    ('interp_fn', ctypes.CFUNCTYPE(ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_lp_build_fs_iface), ctypes.POINTER(struct_lp_build_context), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_bool, ctypes.c_bool, ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue)))),
    ('fb_fetch', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_lp_build_fs_iface), ctypes.POINTER(struct_lp_build_context), ctypes.c_int32, ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue)))),
]

class struct_hash_entry(Structure):
    pass

struct_hash_table._pack_ = 1 # source:False
struct_hash_table._fields_ = [
    ('table', ctypes.POINTER(struct_hash_entry)),
    ('key_hash_function', ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None))),
    ('key_equals_function', ctypes.CFUNCTYPE(ctypes.c_bool, ctypes.POINTER(None), ctypes.POINTER(None))),
    ('deleted_key', ctypes.POINTER(None)),
    ('size', ctypes.c_uint32),
    ('rehash', ctypes.c_uint32),
    ('size_magic', ctypes.c_uint64),
    ('rehash_magic', ctypes.c_uint64),
    ('max_entries', ctypes.c_uint32),
    ('size_index', ctypes.c_uint32),
    ('entries', ctypes.c_uint32),
    ('deleted_entries', ctypes.c_uint32),
]

struct_hash_entry._pack_ = 1 # source:False
struct_hash_entry._fields_ = [
    ('hash', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('key', ctypes.POINTER(None)),
    ('data', ctypes.POINTER(None)),
]

try:
    lp_build_nir_soa = _libraries['FIXME_STUB'].lp_build_nir_soa
    lp_build_nir_soa.restype = None
    lp_build_nir_soa.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(struct_nir_shader), ctypes.POINTER(struct_lp_build_tgsi_params), ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue) * 4)]
except AttributeError:
    pass
class struct_nir_function_impl(Structure):
    pass

class struct_nir_function(Structure):
    pass


# values for enumeration 'c__EA_nir_metadata'
c__EA_nir_metadata__enumvalues = {
    0: 'nir_metadata_none',
    1: 'nir_metadata_block_index',
    2: 'nir_metadata_dominance',
    4: 'nir_metadata_live_defs',
    8: 'nir_metadata_not_properly_reset',
    16: 'nir_metadata_loop_analysis',
    32: 'nir_metadata_instr_index',
    64: 'nir_metadata_divergence',
    3: 'nir_metadata_control_flow',
    -9: 'nir_metadata_all',
}
nir_metadata_none = 0
nir_metadata_block_index = 1
nir_metadata_dominance = 2
nir_metadata_live_defs = 4
nir_metadata_not_properly_reset = 8
nir_metadata_loop_analysis = 16
nir_metadata_instr_index = 32
nir_metadata_divergence = 64
nir_metadata_control_flow = 3
nir_metadata_all = -9
c__EA_nir_metadata = ctypes.c_int32 # enum
struct_nir_function_impl._pack_ = 1 # source:False
struct_nir_function_impl._fields_ = [
    ('cf_node', struct_nir_cf_node),
    ('function', ctypes.POINTER(struct_nir_function)),
    ('preamble', ctypes.POINTER(struct_nir_function)),
    ('body', struct_exec_list),
    ('end_block', ctypes.POINTER(struct_nir_block)),
    ('locals', struct_exec_list),
    ('ssa_alloc', ctypes.c_uint32),
    ('num_blocks', ctypes.c_uint32),
    ('structured', ctypes.c_bool),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('valid_metadata', c__EA_nir_metadata),
    ('loop_analysis_indirect_mask', c__EA_nir_variable_mode),
    ('loop_analysis_force_unroll_sampler_indirect', ctypes.c_bool),
    ('PADDING_1', ctypes.c_ubyte * 3),
]

class struct_nir_parameter(Structure):
    pass

class struct_glsl_type(Structure):
    pass

struct_nir_function._pack_ = 1 # source:False
struct_nir_function._fields_ = [
    ('node', struct_exec_node),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('shader', ctypes.POINTER(struct_nir_shader)),
    ('num_params', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('params', ctypes.POINTER(struct_nir_parameter)),
    ('impl', ctypes.POINTER(struct_nir_function_impl)),
    ('driver_attributes', ctypes.c_uint32),
    ('is_entrypoint', ctypes.c_bool),
    ('is_exported', ctypes.c_bool),
    ('is_preamble', ctypes.c_bool),
    ('should_inline', ctypes.c_bool),
    ('dont_inline', ctypes.c_bool),
    ('PADDING_1', ctypes.c_ubyte * 3),
    ('workgroup_size', ctypes.c_uint32 * 3),
    ('is_subroutine', ctypes.c_bool),
    ('is_tmp_globals_wrapper', ctypes.c_bool),
    ('PADDING_2', ctypes.c_ubyte * 2),
    ('num_subroutine_types', ctypes.c_int32),
    ('subroutine_types', ctypes.POINTER(ctypes.POINTER(struct_glsl_type))),
    ('subroutine_index', ctypes.c_int32),
    ('pass_flags', ctypes.c_uint32),
]

struct_nir_parameter._pack_ = 1 # source:False
struct_nir_parameter._fields_ = [
    ('num_components', ctypes.c_ubyte),
    ('bit_size', ctypes.c_ubyte),
    ('is_return', ctypes.c_bool),
    ('implicit_conversion_prohibited', ctypes.c_bool),
    ('is_uniform', ctypes.c_bool),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('mode', c__EA_nir_variable_mode),
    ('driver_attributes', ctypes.c_uint32),
    ('type', ctypes.POINTER(struct_glsl_type)),
    ('name', ctypes.POINTER(ctypes.c_char)),
]


# values for enumeration 'glsl_base_type'
glsl_base_type__enumvalues = {
    0: 'GLSL_TYPE_UINT',
    1: 'GLSL_TYPE_INT',
    2: 'GLSL_TYPE_FLOAT',
    3: 'GLSL_TYPE_FLOAT16',
    4: 'GLSL_TYPE_BFLOAT16',
    5: 'GLSL_TYPE_FLOAT_E4M3FN',
    6: 'GLSL_TYPE_FLOAT_E5M2',
    7: 'GLSL_TYPE_DOUBLE',
    8: 'GLSL_TYPE_UINT8',
    9: 'GLSL_TYPE_INT8',
    10: 'GLSL_TYPE_UINT16',
    11: 'GLSL_TYPE_INT16',
    12: 'GLSL_TYPE_UINT64',
    13: 'GLSL_TYPE_INT64',
    14: 'GLSL_TYPE_BOOL',
    15: 'GLSL_TYPE_COOPERATIVE_MATRIX',
    16: 'GLSL_TYPE_SAMPLER',
    17: 'GLSL_TYPE_TEXTURE',
    18: 'GLSL_TYPE_IMAGE',
    19: 'GLSL_TYPE_ATOMIC_UINT',
    20: 'GLSL_TYPE_STRUCT',
    21: 'GLSL_TYPE_INTERFACE',
    22: 'GLSL_TYPE_ARRAY',
    23: 'GLSL_TYPE_VOID',
    24: 'GLSL_TYPE_SUBROUTINE',
    25: 'GLSL_TYPE_ERROR',
}
GLSL_TYPE_UINT = 0
GLSL_TYPE_INT = 1
GLSL_TYPE_FLOAT = 2
GLSL_TYPE_FLOAT16 = 3
GLSL_TYPE_BFLOAT16 = 4
GLSL_TYPE_FLOAT_E4M3FN = 5
GLSL_TYPE_FLOAT_E5M2 = 6
GLSL_TYPE_DOUBLE = 7
GLSL_TYPE_UINT8 = 8
GLSL_TYPE_INT8 = 9
GLSL_TYPE_UINT16 = 10
GLSL_TYPE_INT16 = 11
GLSL_TYPE_UINT64 = 12
GLSL_TYPE_INT64 = 13
GLSL_TYPE_BOOL = 14
GLSL_TYPE_COOPERATIVE_MATRIX = 15
GLSL_TYPE_SAMPLER = 16
GLSL_TYPE_TEXTURE = 17
GLSL_TYPE_IMAGE = 18
GLSL_TYPE_ATOMIC_UINT = 19
GLSL_TYPE_STRUCT = 20
GLSL_TYPE_INTERFACE = 21
GLSL_TYPE_ARRAY = 22
GLSL_TYPE_VOID = 23
GLSL_TYPE_SUBROUTINE = 24
GLSL_TYPE_ERROR = 25
glsl_base_type = ctypes.c_uint32 # enum
class struct_glsl_cmat_description(Structure):
    pass

struct_glsl_cmat_description._pack_ = 1 # source:False
struct_glsl_cmat_description._fields_ = [
    ('element_type', ctypes.c_ubyte, 5),
    ('scope', ctypes.c_ubyte, 3),
    ('rows', ctypes.c_ubyte, 8),
    ('cols', ctypes.c_ubyte),
    ('use', ctypes.c_ubyte),
]

class union_glsl_type_fields(Union):
    pass

class struct_glsl_struct_field(Structure):
    pass

union_glsl_type_fields._pack_ = 1 # source:False
union_glsl_type_fields._fields_ = [
    ('array', ctypes.POINTER(struct_glsl_type)),
    ('structure', ctypes.POINTER(struct_glsl_struct_field)),
]

struct_glsl_type._pack_ = 1 # source:False
struct_glsl_type._fields_ = [
    ('gl_type', ctypes.c_uint32),
    ('base_type', glsl_base_type, 8),
    ('sampled_type', glsl_base_type, 8),
    ('sampler_dimensionality', glsl_base_type, 4),
    ('sampler_shadow', glsl_base_type, 1),
    ('sampler_array', glsl_base_type, 1),
    ('interface_packing', glsl_base_type, 2),
    ('interface_row_major', glsl_base_type, 1),
    ('PADDING_0', ctypes.c_uint8, 7),
    ('cmat_desc', struct_glsl_cmat_description),
    ('packed', ctypes.c_uint32, 1),
    ('has_builtin_name', ctypes.c_uint32, 1),
    ('PADDING_1', ctypes.c_uint8, 6),
    ('vector_elements', ctypes.c_uint32, 8),
    ('matrix_columns', ctypes.c_ubyte),
    ('PADDING_2', ctypes.c_ubyte),
    ('length', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('name_id', ctypes.c_uint64),
    ('explicit_stride', ctypes.c_uint32),
    ('explicit_alignment', ctypes.c_uint32),
    ('fields', union_glsl_type_fields),
]

class union_glsl_struct_field_0(Union):
    pass

class struct_glsl_struct_field_0_0(Structure):
    pass

struct_glsl_struct_field_0_0._pack_ = 1 # source:False
struct_glsl_struct_field_0_0._fields_ = [
    ('interpolation', ctypes.c_uint32, 3),
    ('centroid', ctypes.c_uint32, 1),
    ('sample', ctypes.c_uint32, 1),
    ('matrix_layout', ctypes.c_uint32, 2),
    ('patch', ctypes.c_uint32, 1),
    ('precision', ctypes.c_uint32, 2),
    ('memory_read_only', ctypes.c_uint32, 1),
    ('memory_write_only', ctypes.c_uint32, 1),
    ('memory_coherent', ctypes.c_uint32, 1),
    ('memory_volatile', ctypes.c_uint32, 1),
    ('memory_restrict', ctypes.c_uint32, 1),
    ('explicit_xfb_buffer', ctypes.c_uint32, 1),
    ('implicit_sized_array', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint16, 15),
]

union_glsl_struct_field_0._pack_ = 1 # source:False
union_glsl_struct_field_0._anonymous_ = ('_0',)
union_glsl_struct_field_0._fields_ = [
    ('_0', struct_glsl_struct_field_0_0),
    ('flags', ctypes.c_uint32),
]

struct_glsl_struct_field._pack_ = 1 # source:False
struct_glsl_struct_field._anonymous_ = ('_0',)
struct_glsl_struct_field._fields_ = [
    ('type', ctypes.POINTER(struct_glsl_type)),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('location', ctypes.c_int32),
    ('component', ctypes.c_int32),
    ('offset', ctypes.c_int32),
    ('xfb_buffer', ctypes.c_int32),
    ('xfb_stride', ctypes.c_int32),
    ('image_format', pipe_format),
    ('_0', union_glsl_struct_field_0),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

try:
    lp_build_nir_soa_func = _libraries['FIXME_STUB'].lp_build_nir_soa_func
    lp_build_nir_soa_func.restype = None
    lp_build_nir_soa_func.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(struct_nir_shader), ctypes.POINTER(struct_nir_function_impl), ctypes.POINTER(struct_lp_build_tgsi_params), ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue) * 4)]
except AttributeError:
    pass
class struct_lp_build_sampler_aos(Structure):
    pass


# values for enumeration 'tgsi_texture_type'
tgsi_texture_type__enumvalues = {
    0: 'TGSI_TEXTURE_BUFFER',
    1: 'TGSI_TEXTURE_1D',
    2: 'TGSI_TEXTURE_2D',
    3: 'TGSI_TEXTURE_3D',
    4: 'TGSI_TEXTURE_CUBE',
    5: 'TGSI_TEXTURE_RECT',
    6: 'TGSI_TEXTURE_SHADOW1D',
    7: 'TGSI_TEXTURE_SHADOW2D',
    8: 'TGSI_TEXTURE_SHADOWRECT',
    9: 'TGSI_TEXTURE_1D_ARRAY',
    10: 'TGSI_TEXTURE_2D_ARRAY',
    11: 'TGSI_TEXTURE_SHADOW1D_ARRAY',
    12: 'TGSI_TEXTURE_SHADOW2D_ARRAY',
    13: 'TGSI_TEXTURE_SHADOWCUBE',
    14: 'TGSI_TEXTURE_2D_MSAA',
    15: 'TGSI_TEXTURE_2D_ARRAY_MSAA',
    16: 'TGSI_TEXTURE_CUBE_ARRAY',
    17: 'TGSI_TEXTURE_SHADOWCUBE_ARRAY',
    18: 'TGSI_TEXTURE_UNKNOWN',
    19: 'TGSI_TEXTURE_COUNT',
}
TGSI_TEXTURE_BUFFER = 0
TGSI_TEXTURE_1D = 1
TGSI_TEXTURE_2D = 2
TGSI_TEXTURE_3D = 3
TGSI_TEXTURE_CUBE = 4
TGSI_TEXTURE_RECT = 5
TGSI_TEXTURE_SHADOW1D = 6
TGSI_TEXTURE_SHADOW2D = 7
TGSI_TEXTURE_SHADOWRECT = 8
TGSI_TEXTURE_1D_ARRAY = 9
TGSI_TEXTURE_2D_ARRAY = 10
TGSI_TEXTURE_SHADOW1D_ARRAY = 11
TGSI_TEXTURE_SHADOW2D_ARRAY = 12
TGSI_TEXTURE_SHADOWCUBE = 13
TGSI_TEXTURE_2D_MSAA = 14
TGSI_TEXTURE_2D_ARRAY_MSAA = 15
TGSI_TEXTURE_CUBE_ARRAY = 16
TGSI_TEXTURE_SHADOWCUBE_ARRAY = 17
TGSI_TEXTURE_UNKNOWN = 18
TGSI_TEXTURE_COUNT = 19
tgsi_texture_type = ctypes.c_uint32 # enum

# values for enumeration 'lp_build_tex_modifier'
lp_build_tex_modifier__enumvalues = {
    0: 'LP_BLD_TEX_MODIFIER_NONE',
    1: 'LP_BLD_TEX_MODIFIER_PROJECTED',
    2: 'LP_BLD_TEX_MODIFIER_LOD_BIAS',
    3: 'LP_BLD_TEX_MODIFIER_EXPLICIT_LOD',
    4: 'LP_BLD_TEX_MODIFIER_EXPLICIT_DERIV',
    5: 'LP_BLD_TEX_MODIFIER_LOD_ZERO',
}
LP_BLD_TEX_MODIFIER_NONE = 0
LP_BLD_TEX_MODIFIER_PROJECTED = 1
LP_BLD_TEX_MODIFIER_LOD_BIAS = 2
LP_BLD_TEX_MODIFIER_EXPLICIT_LOD = 3
LP_BLD_TEX_MODIFIER_EXPLICIT_DERIV = 4
LP_BLD_TEX_MODIFIER_LOD_ZERO = 5
lp_build_tex_modifier = ctypes.c_uint32 # enum
struct_lp_build_sampler_aos._pack_ = 1 # source:False
struct_lp_build_sampler_aos._fields_ = [
    ('emit_fetch_texel', ctypes.CFUNCTYPE(ctypes.POINTER(struct_LLVMOpaqueValue), ctypes.POINTER(struct_lp_build_sampler_aos), ctypes.POINTER(struct_lp_build_context), tgsi_texture_type, ctypes.c_uint32, ctypes.POINTER(struct_LLVMOpaqueValue), struct_lp_derivatives, lp_build_tex_modifier)),
]

try:
    lp_build_nir_aos = _libraries['FIXME_STUB'].lp_build_nir_aos
    lp_build_nir_aos.restype = None
    lp_build_nir_aos.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(struct_nir_shader), struct_lp_type, ctypes.c_ubyte * 4, LLVMValueRef, ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue)), ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue)), ctypes.POINTER(struct_lp_build_sampler_aos)]
except AttributeError:
    pass
class struct_lp_build_fn(Structure):
    pass

struct_lp_build_fn._pack_ = 1 # source:False
struct_lp_build_fn._fields_ = [
    ('fn_type', ctypes.POINTER(struct_LLVMOpaqueType)),
    ('fn', ctypes.POINTER(struct_LLVMOpaqueValue)),
]

try:
    lp_build_nir_soa_prepasses = _libraries['FIXME_STUB'].lp_build_nir_soa_prepasses
    lp_build_nir_soa_prepasses.restype = None
    lp_build_nir_soa_prepasses.argtypes = [ctypes.POINTER(struct_nir_shader)]
except AttributeError:
    pass
try:
    lp_build_opt_nir = _libraries['FIXME_STUB'].lp_build_opt_nir
    lp_build_opt_nir.restype = None
    lp_build_opt_nir.argtypes = [ctypes.POINTER(struct_nir_shader)]
except AttributeError:
    pass
try:
    lp_nir_array_build_gather_values = _libraries['FIXME_STUB'].lp_nir_array_build_gather_values
    lp_nir_array_build_gather_values.restype = LLVMValueRef
    lp_nir_array_build_gather_values.argtypes = [LLVMBuilderRef, ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueValue)), ctypes.c_uint32]
except AttributeError:
    pass
LLVMAtomicRMWBinOp = c__EA_LLVMAtomicRMWBinOp
LLVMAtomicRMWBinOp__enumvalues = c__EA_LLVMAtomicRMWBinOp__enumvalues

# values for enumeration 'c__EA_nir_atomic_op'
c__EA_nir_atomic_op__enumvalues = {
    0: 'nir_atomic_op_iadd',
    1: 'nir_atomic_op_imin',
    2: 'nir_atomic_op_umin',
    3: 'nir_atomic_op_imax',
    4: 'nir_atomic_op_umax',
    5: 'nir_atomic_op_iand',
    6: 'nir_atomic_op_ior',
    7: 'nir_atomic_op_ixor',
    8: 'nir_atomic_op_xchg',
    9: 'nir_atomic_op_fadd',
    10: 'nir_atomic_op_fmin',
    11: 'nir_atomic_op_fmax',
    12: 'nir_atomic_op_cmpxchg',
    13: 'nir_atomic_op_fcmpxchg',
    14: 'nir_atomic_op_inc_wrap',
    15: 'nir_atomic_op_dec_wrap',
    16: 'nir_atomic_op_ordered_add_gfx12_amd',
}
nir_atomic_op_iadd = 0
nir_atomic_op_imin = 1
nir_atomic_op_umin = 2
nir_atomic_op_imax = 3
nir_atomic_op_umax = 4
nir_atomic_op_iand = 5
nir_atomic_op_ior = 6
nir_atomic_op_ixor = 7
nir_atomic_op_xchg = 8
nir_atomic_op_fadd = 9
nir_atomic_op_fmin = 10
nir_atomic_op_fmax = 11
nir_atomic_op_cmpxchg = 12
nir_atomic_op_fcmpxchg = 13
nir_atomic_op_inc_wrap = 14
nir_atomic_op_dec_wrap = 15
nir_atomic_op_ordered_add_gfx12_amd = 16
c__EA_nir_atomic_op = ctypes.c_uint32 # enum
nir_atomic_op = c__EA_nir_atomic_op
nir_atomic_op__enumvalues = c__EA_nir_atomic_op__enumvalues
try:
    lp_translate_atomic_op = _libraries['FIXME_STUB'].lp_translate_atomic_op
    lp_translate_atomic_op.restype = LLVMAtomicRMWBinOp
    lp_translate_atomic_op.argtypes = [nir_atomic_op]
except AttributeError:
    pass
class struct_nir_tex_instr(Structure):
    pass

class struct_nir_tex_src(Structure):
    pass


# values for enumeration 'glsl_sampler_dim'
glsl_sampler_dim__enumvalues = {
    0: 'GLSL_SAMPLER_DIM_1D',
    1: 'GLSL_SAMPLER_DIM_2D',
    2: 'GLSL_SAMPLER_DIM_3D',
    3: 'GLSL_SAMPLER_DIM_CUBE',
    4: 'GLSL_SAMPLER_DIM_RECT',
    5: 'GLSL_SAMPLER_DIM_BUF',
    6: 'GLSL_SAMPLER_DIM_EXTERNAL',
    7: 'GLSL_SAMPLER_DIM_MS',
    8: 'GLSL_SAMPLER_DIM_SUBPASS',
    9: 'GLSL_SAMPLER_DIM_SUBPASS_MS',
}
GLSL_SAMPLER_DIM_1D = 0
GLSL_SAMPLER_DIM_2D = 1
GLSL_SAMPLER_DIM_3D = 2
GLSL_SAMPLER_DIM_CUBE = 3
GLSL_SAMPLER_DIM_RECT = 4
GLSL_SAMPLER_DIM_BUF = 5
GLSL_SAMPLER_DIM_EXTERNAL = 6
GLSL_SAMPLER_DIM_MS = 7
GLSL_SAMPLER_DIM_SUBPASS = 8
GLSL_SAMPLER_DIM_SUBPASS_MS = 9
glsl_sampler_dim = ctypes.c_uint32 # enum

# values for enumeration 'c__EA_nir_alu_type'
c__EA_nir_alu_type__enumvalues = {
    0: 'nir_type_invalid',
    2: 'nir_type_int',
    4: 'nir_type_uint',
    6: 'nir_type_bool',
    128: 'nir_type_float',
    7: 'nir_type_bool1',
    14: 'nir_type_bool8',
    22: 'nir_type_bool16',
    38: 'nir_type_bool32',
    3: 'nir_type_int1',
    10: 'nir_type_int8',
    18: 'nir_type_int16',
    34: 'nir_type_int32',
    66: 'nir_type_int64',
    5: 'nir_type_uint1',
    12: 'nir_type_uint8',
    20: 'nir_type_uint16',
    36: 'nir_type_uint32',
    68: 'nir_type_uint64',
    144: 'nir_type_float16',
    160: 'nir_type_float32',
    192: 'nir_type_float64',
}
nir_type_invalid = 0
nir_type_int = 2
nir_type_uint = 4
nir_type_bool = 6
nir_type_float = 128
nir_type_bool1 = 7
nir_type_bool8 = 14
nir_type_bool16 = 22
nir_type_bool32 = 38
nir_type_int1 = 3
nir_type_int8 = 10
nir_type_int16 = 18
nir_type_int32 = 34
nir_type_int64 = 66
nir_type_uint1 = 5
nir_type_uint8 = 12
nir_type_uint16 = 20
nir_type_uint32 = 36
nir_type_uint64 = 68
nir_type_float16 = 144
nir_type_float32 = 160
nir_type_float64 = 192
c__EA_nir_alu_type = ctypes.c_uint32 # enum

# values for enumeration 'nir_texop'
nir_texop__enumvalues = {
    0: 'nir_texop_tex',
    1: 'nir_texop_txb',
    2: 'nir_texop_txl',
    3: 'nir_texop_txd',
    4: 'nir_texop_txf',
    5: 'nir_texop_txf_ms',
    6: 'nir_texop_txf_ms_fb',
    7: 'nir_texop_txf_ms_mcs_intel',
    8: 'nir_texop_txs',
    9: 'nir_texop_lod',
    10: 'nir_texop_tg4',
    11: 'nir_texop_query_levels',
    12: 'nir_texop_texture_samples',
    13: 'nir_texop_samples_identical',
    14: 'nir_texop_tex_prefetch',
    15: 'nir_texop_lod_bias',
    16: 'nir_texop_fragment_fetch_amd',
    17: 'nir_texop_fragment_mask_fetch_amd',
    18: 'nir_texop_descriptor_amd',
    19: 'nir_texop_sampler_descriptor_amd',
    20: 'nir_texop_image_min_lod_agx',
    21: 'nir_texop_has_custom_border_color_agx',
    22: 'nir_texop_custom_border_color_agx',
    23: 'nir_texop_hdr_dim_nv',
    24: 'nir_texop_tex_type_nv',
    25: 'nir_texop_sample_pos_nv',
}
nir_texop_tex = 0
nir_texop_txb = 1
nir_texop_txl = 2
nir_texop_txd = 3
nir_texop_txf = 4
nir_texop_txf_ms = 5
nir_texop_txf_ms_fb = 6
nir_texop_txf_ms_mcs_intel = 7
nir_texop_txs = 8
nir_texop_lod = 9
nir_texop_tg4 = 10
nir_texop_query_levels = 11
nir_texop_texture_samples = 12
nir_texop_samples_identical = 13
nir_texop_tex_prefetch = 14
nir_texop_lod_bias = 15
nir_texop_fragment_fetch_amd = 16
nir_texop_fragment_mask_fetch_amd = 17
nir_texop_descriptor_amd = 18
nir_texop_sampler_descriptor_amd = 19
nir_texop_image_min_lod_agx = 20
nir_texop_has_custom_border_color_agx = 21
nir_texop_custom_border_color_agx = 22
nir_texop_hdr_dim_nv = 23
nir_texop_tex_type_nv = 24
nir_texop_sample_pos_nv = 25
nir_texop = ctypes.c_uint32 # enum
class struct_nir_def(Structure):
    pass

class struct_list_head(Structure):
    pass

struct_list_head._pack_ = 1 # source:False
struct_list_head._fields_ = [
    ('prev', ctypes.POINTER(struct_list_head)),
    ('next', ctypes.POINTER(struct_list_head)),
]

struct_nir_def._pack_ = 1 # source:False
struct_nir_def._fields_ = [
    ('parent_instr', ctypes.POINTER(struct_nir_instr)),
    ('uses', struct_list_head),
    ('index', ctypes.c_uint32),
    ('num_components', ctypes.c_ubyte),
    ('bit_size', ctypes.c_ubyte),
    ('divergent', ctypes.c_bool),
    ('loop_invariant', ctypes.c_bool),
]

struct_nir_tex_instr._pack_ = 1 # source:False
struct_nir_tex_instr._fields_ = [
    ('instr', struct_nir_instr),
    ('sampler_dim', glsl_sampler_dim),
    ('dest_type', c__EA_nir_alu_type),
    ('op', nir_texop),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('def', struct_nir_def),
    ('src', ctypes.POINTER(struct_nir_tex_src)),
    ('num_srcs', ctypes.c_uint32),
    ('coord_components', ctypes.c_uint32),
    ('is_array', ctypes.c_bool),
    ('is_shadow', ctypes.c_bool),
    ('is_new_style_shadow', ctypes.c_bool),
    ('is_sparse', ctypes.c_bool),
    ('component', ctypes.c_uint32, 2),
    ('array_is_lowered_cube', ctypes.c_uint32, 1),
    ('is_gather_implicit_lod', ctypes.c_uint32, 1),
    ('skip_helpers', ctypes.c_uint32, 1),
    ('PADDING_1', ctypes.c_uint8, 3),
    ('tg4_offsets', ctypes.c_byte * 2 * 4),
    ('texture_non_uniform', ctypes.c_bool),
    ('sampler_non_uniform', ctypes.c_bool),
    ('offset_non_uniform', ctypes.c_bool),
    ('can_speculate', ctypes.c_bool),
    ('PADDING_2', ctypes.c_ubyte * 3),
    ('texture_index', ctypes.c_uint32),
    ('sampler_index', ctypes.c_uint32),
    ('backend_flags', ctypes.c_uint32),
]

class struct_nir_src(Structure):
    pass

struct_nir_src._pack_ = 1 # source:False
struct_nir_src._fields_ = [
    ('_parent', ctypes.c_uint64),
    ('use_link', struct_list_head),
    ('ssa', ctypes.POINTER(struct_nir_def)),
]


# values for enumeration 'nir_tex_src_type'
nir_tex_src_type__enumvalues = {
    0: 'nir_tex_src_coord',
    1: 'nir_tex_src_projector',
    2: 'nir_tex_src_comparator',
    3: 'nir_tex_src_offset',
    4: 'nir_tex_src_bias',
    5: 'nir_tex_src_lod',
    6: 'nir_tex_src_min_lod',
    7: 'nir_tex_src_lod_bias_min_agx',
    8: 'nir_tex_src_ms_index',
    9: 'nir_tex_src_ms_mcs_intel',
    10: 'nir_tex_src_ddx',
    11: 'nir_tex_src_ddy',
    12: 'nir_tex_src_texture_deref',
    13: 'nir_tex_src_sampler_deref',
    14: 'nir_tex_src_texture_offset',
    15: 'nir_tex_src_sampler_offset',
    16: 'nir_tex_src_texture_handle',
    17: 'nir_tex_src_sampler_handle',
    18: 'nir_tex_src_sampler_deref_intrinsic',
    19: 'nir_tex_src_texture_deref_intrinsic',
    20: 'nir_tex_src_plane',
    21: 'nir_tex_src_backend1',
    22: 'nir_tex_src_backend2',
    23: 'nir_num_tex_src_types',
}
nir_tex_src_coord = 0
nir_tex_src_projector = 1
nir_tex_src_comparator = 2
nir_tex_src_offset = 3
nir_tex_src_bias = 4
nir_tex_src_lod = 5
nir_tex_src_min_lod = 6
nir_tex_src_lod_bias_min_agx = 7
nir_tex_src_ms_index = 8
nir_tex_src_ms_mcs_intel = 9
nir_tex_src_ddx = 10
nir_tex_src_ddy = 11
nir_tex_src_texture_deref = 12
nir_tex_src_sampler_deref = 13
nir_tex_src_texture_offset = 14
nir_tex_src_sampler_offset = 15
nir_tex_src_texture_handle = 16
nir_tex_src_sampler_handle = 17
nir_tex_src_sampler_deref_intrinsic = 18
nir_tex_src_texture_deref_intrinsic = 19
nir_tex_src_plane = 20
nir_tex_src_backend1 = 21
nir_tex_src_backend2 = 22
nir_num_tex_src_types = 23
nir_tex_src_type = ctypes.c_uint32 # enum
struct_nir_tex_src._pack_ = 1 # source:False
struct_nir_tex_src._fields_ = [
    ('src', struct_nir_src),
    ('src_type', nir_tex_src_type),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

try:
    lp_build_nir_sample_key = _libraries['FIXME_STUB'].lp_build_nir_sample_key
    lp_build_nir_sample_key.restype = uint32_t
    lp_build_nir_sample_key.argtypes = [mesa_shader_stage, ctypes.POINTER(struct_nir_tex_instr)]
except AttributeError:
    pass
class struct_nir_intrinsic_instr(Structure):
    pass


# values for enumeration 'c__EA_nir_intrinsic_op'
c__EA_nir_intrinsic_op__enumvalues = {
    0: 'nir_intrinsic_accept_ray_intersection',
    1: 'nir_intrinsic_addr_mode_is',
    2: 'nir_intrinsic_al2p_nv',
    3: 'nir_intrinsic_ald_nv',
    4: 'nir_intrinsic_alpha_to_coverage',
    5: 'nir_intrinsic_as_uniform',
    6: 'nir_intrinsic_ast_nv',
    7: 'nir_intrinsic_atomic_add_gen_prim_count_amd',
    8: 'nir_intrinsic_atomic_add_gs_emit_prim_count_amd',
    9: 'nir_intrinsic_atomic_add_shader_invocation_count_amd',
    10: 'nir_intrinsic_atomic_add_xfb_prim_count_amd',
    11: 'nir_intrinsic_atomic_counter_add',
    12: 'nir_intrinsic_atomic_counter_add_deref',
    13: 'nir_intrinsic_atomic_counter_and',
    14: 'nir_intrinsic_atomic_counter_and_deref',
    15: 'nir_intrinsic_atomic_counter_comp_swap',
    16: 'nir_intrinsic_atomic_counter_comp_swap_deref',
    17: 'nir_intrinsic_atomic_counter_exchange',
    18: 'nir_intrinsic_atomic_counter_exchange_deref',
    19: 'nir_intrinsic_atomic_counter_inc',
    20: 'nir_intrinsic_atomic_counter_inc_deref',
    21: 'nir_intrinsic_atomic_counter_max',
    22: 'nir_intrinsic_atomic_counter_max_deref',
    23: 'nir_intrinsic_atomic_counter_min',
    24: 'nir_intrinsic_atomic_counter_min_deref',
    25: 'nir_intrinsic_atomic_counter_or',
    26: 'nir_intrinsic_atomic_counter_or_deref',
    27: 'nir_intrinsic_atomic_counter_post_dec',
    28: 'nir_intrinsic_atomic_counter_post_dec_deref',
    29: 'nir_intrinsic_atomic_counter_pre_dec',
    30: 'nir_intrinsic_atomic_counter_pre_dec_deref',
    31: 'nir_intrinsic_atomic_counter_read',
    32: 'nir_intrinsic_atomic_counter_read_deref',
    33: 'nir_intrinsic_atomic_counter_xor',
    34: 'nir_intrinsic_atomic_counter_xor_deref',
    35: 'nir_intrinsic_ballot',
    36: 'nir_intrinsic_ballot_bit_count_exclusive',
    37: 'nir_intrinsic_ballot_bit_count_inclusive',
    38: 'nir_intrinsic_ballot_bit_count_reduce',
    39: 'nir_intrinsic_ballot_bitfield_extract',
    40: 'nir_intrinsic_ballot_find_lsb',
    41: 'nir_intrinsic_ballot_find_msb',
    42: 'nir_intrinsic_ballot_relaxed',
    43: 'nir_intrinsic_bar_break_nv',
    44: 'nir_intrinsic_bar_set_nv',
    45: 'nir_intrinsic_bar_sync_nv',
    46: 'nir_intrinsic_barrier',
    47: 'nir_intrinsic_begin_invocation_interlock',
    48: 'nir_intrinsic_bindgen_return',
    49: 'nir_intrinsic_bindless_image_agx',
    50: 'nir_intrinsic_bindless_image_atomic',
    51: 'nir_intrinsic_bindless_image_atomic_swap',
    52: 'nir_intrinsic_bindless_image_descriptor_amd',
    53: 'nir_intrinsic_bindless_image_format',
    54: 'nir_intrinsic_bindless_image_fragment_mask_load_amd',
    55: 'nir_intrinsic_bindless_image_levels',
    56: 'nir_intrinsic_bindless_image_load',
    57: 'nir_intrinsic_bindless_image_load_raw_intel',
    58: 'nir_intrinsic_bindless_image_order',
    59: 'nir_intrinsic_bindless_image_samples',
    60: 'nir_intrinsic_bindless_image_samples_identical',
    61: 'nir_intrinsic_bindless_image_size',
    62: 'nir_intrinsic_bindless_image_sparse_load',
    63: 'nir_intrinsic_bindless_image_store',
    64: 'nir_intrinsic_bindless_image_store_block_agx',
    65: 'nir_intrinsic_bindless_image_store_raw_intel',
    66: 'nir_intrinsic_bindless_image_texel_address',
    67: 'nir_intrinsic_bindless_resource_ir3',
    68: 'nir_intrinsic_bindless_sampler_agx',
    69: 'nir_intrinsic_brcst_active_ir3',
    70: 'nir_intrinsic_btd_retire_intel',
    71: 'nir_intrinsic_btd_spawn_intel',
    72: 'nir_intrinsic_btd_stack_push_intel',
    73: 'nir_intrinsic_bvh64_intersect_ray_amd',
    74: 'nir_intrinsic_bvh8_intersect_ray_amd',
    75: 'nir_intrinsic_bvh_stack_rtn_amd',
    76: 'nir_intrinsic_cmat_binary_op',
    77: 'nir_intrinsic_cmat_bitcast',
    78: 'nir_intrinsic_cmat_construct',
    79: 'nir_intrinsic_cmat_convert',
    80: 'nir_intrinsic_cmat_copy',
    81: 'nir_intrinsic_cmat_extract',
    82: 'nir_intrinsic_cmat_insert',
    83: 'nir_intrinsic_cmat_length',
    84: 'nir_intrinsic_cmat_load',
    85: 'nir_intrinsic_cmat_muladd',
    86: 'nir_intrinsic_cmat_muladd_amd',
    87: 'nir_intrinsic_cmat_muladd_nv',
    88: 'nir_intrinsic_cmat_scalar_op',
    89: 'nir_intrinsic_cmat_store',
    90: 'nir_intrinsic_cmat_transpose',
    91: 'nir_intrinsic_cmat_unary_op',
    92: 'nir_intrinsic_convert_alu_types',
    93: 'nir_intrinsic_convert_cmat_intel',
    94: 'nir_intrinsic_copy_deref',
    95: 'nir_intrinsic_copy_fs_outputs_nv',
    96: 'nir_intrinsic_copy_global_to_uniform_ir3',
    97: 'nir_intrinsic_copy_push_const_to_uniform_ir3',
    98: 'nir_intrinsic_copy_ubo_to_uniform_ir3',
    99: 'nir_intrinsic_ddx',
    100: 'nir_intrinsic_ddx_coarse',
    101: 'nir_intrinsic_ddx_fine',
    102: 'nir_intrinsic_ddy',
    103: 'nir_intrinsic_ddy_coarse',
    104: 'nir_intrinsic_ddy_fine',
    105: 'nir_intrinsic_debug_break',
    106: 'nir_intrinsic_decl_reg',
    107: 'nir_intrinsic_demote',
    108: 'nir_intrinsic_demote_if',
    109: 'nir_intrinsic_demote_samples',
    110: 'nir_intrinsic_deref_atomic',
    111: 'nir_intrinsic_deref_atomic_swap',
    112: 'nir_intrinsic_deref_buffer_array_length',
    113: 'nir_intrinsic_deref_implicit_array_length',
    114: 'nir_intrinsic_deref_mode_is',
    115: 'nir_intrinsic_deref_texture_src',
    116: 'nir_intrinsic_doorbell_agx',
    117: 'nir_intrinsic_dpas_intel',
    118: 'nir_intrinsic_dpp16_shift_amd',
    119: 'nir_intrinsic_elect',
    120: 'nir_intrinsic_elect_any_ir3',
    121: 'nir_intrinsic_emit_primitive_poly',
    122: 'nir_intrinsic_emit_vertex',
    123: 'nir_intrinsic_emit_vertex_nv',
    124: 'nir_intrinsic_emit_vertex_with_counter',
    125: 'nir_intrinsic_end_invocation_interlock',
    126: 'nir_intrinsic_end_primitive',
    127: 'nir_intrinsic_end_primitive_nv',
    128: 'nir_intrinsic_end_primitive_with_counter',
    129: 'nir_intrinsic_enqueue_node_payloads',
    130: 'nir_intrinsic_exclusive_scan',
    131: 'nir_intrinsic_exclusive_scan_clusters_ir3',
    132: 'nir_intrinsic_execute_callable',
    133: 'nir_intrinsic_execute_closest_hit_amd',
    134: 'nir_intrinsic_execute_miss_amd',
    135: 'nir_intrinsic_export_agx',
    136: 'nir_intrinsic_export_amd',
    137: 'nir_intrinsic_export_dual_src_blend_amd',
    138: 'nir_intrinsic_export_row_amd',
    139: 'nir_intrinsic_fence_helper_exit_agx',
    140: 'nir_intrinsic_fence_mem_to_tex_agx',
    141: 'nir_intrinsic_fence_pbe_to_tex_agx',
    142: 'nir_intrinsic_fence_pbe_to_tex_pixel_agx',
    143: 'nir_intrinsic_final_primitive_nv',
    144: 'nir_intrinsic_finalize_incoming_node_payload',
    145: 'nir_intrinsic_first_invocation',
    146: 'nir_intrinsic_fs_out_nv',
    147: 'nir_intrinsic_gds_atomic_add_amd',
    148: 'nir_intrinsic_get_ssbo_size',
    149: 'nir_intrinsic_get_ubo_size',
    150: 'nir_intrinsic_global_atomic',
    151: 'nir_intrinsic_global_atomic_2x32',
    152: 'nir_intrinsic_global_atomic_agx',
    153: 'nir_intrinsic_global_atomic_amd',
    154: 'nir_intrinsic_global_atomic_swap',
    155: 'nir_intrinsic_global_atomic_swap_2x32',
    156: 'nir_intrinsic_global_atomic_swap_agx',
    157: 'nir_intrinsic_global_atomic_swap_amd',
    158: 'nir_intrinsic_ignore_ray_intersection',
    159: 'nir_intrinsic_imadsp_nv',
    160: 'nir_intrinsic_image_atomic',
    161: 'nir_intrinsic_image_atomic_swap',
    162: 'nir_intrinsic_image_deref_atomic',
    163: 'nir_intrinsic_image_deref_atomic_swap',
    164: 'nir_intrinsic_image_deref_descriptor_amd',
    165: 'nir_intrinsic_image_deref_format',
    166: 'nir_intrinsic_image_deref_fragment_mask_load_amd',
    167: 'nir_intrinsic_image_deref_levels',
    168: 'nir_intrinsic_image_deref_load',
    169: 'nir_intrinsic_image_deref_load_info_nv',
    170: 'nir_intrinsic_image_deref_load_param_intel',
    171: 'nir_intrinsic_image_deref_load_raw_intel',
    172: 'nir_intrinsic_image_deref_order',
    173: 'nir_intrinsic_image_deref_samples',
    174: 'nir_intrinsic_image_deref_samples_identical',
    175: 'nir_intrinsic_image_deref_size',
    176: 'nir_intrinsic_image_deref_sparse_load',
    177: 'nir_intrinsic_image_deref_store',
    178: 'nir_intrinsic_image_deref_store_block_agx',
    179: 'nir_intrinsic_image_deref_store_raw_intel',
    180: 'nir_intrinsic_image_deref_texel_address',
    181: 'nir_intrinsic_image_descriptor_amd',
    182: 'nir_intrinsic_image_format',
    183: 'nir_intrinsic_image_fragment_mask_load_amd',
    184: 'nir_intrinsic_image_levels',
    185: 'nir_intrinsic_image_load',
    186: 'nir_intrinsic_image_load_raw_intel',
    187: 'nir_intrinsic_image_order',
    188: 'nir_intrinsic_image_samples',
    189: 'nir_intrinsic_image_samples_identical',
    190: 'nir_intrinsic_image_size',
    191: 'nir_intrinsic_image_sparse_load',
    192: 'nir_intrinsic_image_store',
    193: 'nir_intrinsic_image_store_block_agx',
    194: 'nir_intrinsic_image_store_raw_intel',
    195: 'nir_intrinsic_image_texel_address',
    196: 'nir_intrinsic_inclusive_scan',
    197: 'nir_intrinsic_inclusive_scan_clusters_ir3',
    198: 'nir_intrinsic_initialize_node_payloads',
    199: 'nir_intrinsic_interp_deref_at_centroid',
    200: 'nir_intrinsic_interp_deref_at_offset',
    201: 'nir_intrinsic_interp_deref_at_sample',
    202: 'nir_intrinsic_interp_deref_at_vertex',
    203: 'nir_intrinsic_inverse_ballot',
    204: 'nir_intrinsic_ipa_nv',
    205: 'nir_intrinsic_is_helper_invocation',
    206: 'nir_intrinsic_is_sparse_resident_zink',
    207: 'nir_intrinsic_is_sparse_texels_resident',
    208: 'nir_intrinsic_is_subgroup_invocation_lt_amd',
    209: 'nir_intrinsic_isberd_nv',
    210: 'nir_intrinsic_lane_permute_16_amd',
    211: 'nir_intrinsic_last_invocation',
    212: 'nir_intrinsic_launch_mesh_workgroups',
    213: 'nir_intrinsic_launch_mesh_workgroups_with_payload_deref',
    214: 'nir_intrinsic_ldc_nv',
    215: 'nir_intrinsic_ldcx_nv',
    216: 'nir_intrinsic_ldtram_nv',
    217: 'nir_intrinsic_load_aa_line_width',
    218: 'nir_intrinsic_load_accel_struct_amd',
    219: 'nir_intrinsic_load_active_samples_agx',
    220: 'nir_intrinsic_load_active_subgroup_count_agx',
    221: 'nir_intrinsic_load_active_subgroup_invocation_agx',
    222: 'nir_intrinsic_load_agx',
    223: 'nir_intrinsic_load_alpha_reference_amd',
    224: 'nir_intrinsic_load_api_sample_mask_agx',
    225: 'nir_intrinsic_load_attrib_clamp_agx',
    226: 'nir_intrinsic_load_attribute_pan',
    227: 'nir_intrinsic_load_back_face_agx',
    228: 'nir_intrinsic_load_barycentric_at_offset',
    229: 'nir_intrinsic_load_barycentric_at_offset_nv',
    230: 'nir_intrinsic_load_barycentric_at_sample',
    231: 'nir_intrinsic_load_barycentric_centroid',
    232: 'nir_intrinsic_load_barycentric_coord_at_offset',
    233: 'nir_intrinsic_load_barycentric_coord_at_sample',
    234: 'nir_intrinsic_load_barycentric_coord_centroid',
    235: 'nir_intrinsic_load_barycentric_coord_pixel',
    236: 'nir_intrinsic_load_barycentric_coord_sample',
    237: 'nir_intrinsic_load_barycentric_model',
    238: 'nir_intrinsic_load_barycentric_optimize_amd',
    239: 'nir_intrinsic_load_barycentric_pixel',
    240: 'nir_intrinsic_load_barycentric_sample',
    241: 'nir_intrinsic_load_base_global_invocation_id',
    242: 'nir_intrinsic_load_base_instance',
    243: 'nir_intrinsic_load_base_vertex',
    244: 'nir_intrinsic_load_base_workgroup_id',
    245: 'nir_intrinsic_load_blend_const_color_a_float',
    246: 'nir_intrinsic_load_blend_const_color_aaaa8888_unorm',
    247: 'nir_intrinsic_load_blend_const_color_b_float',
    248: 'nir_intrinsic_load_blend_const_color_g_float',
    249: 'nir_intrinsic_load_blend_const_color_r_float',
    250: 'nir_intrinsic_load_blend_const_color_rgba',
    251: 'nir_intrinsic_load_blend_const_color_rgba8888_unorm',
    252: 'nir_intrinsic_load_btd_global_arg_addr_intel',
    253: 'nir_intrinsic_load_btd_local_arg_addr_intel',
    254: 'nir_intrinsic_load_btd_resume_sbt_addr_intel',
    255: 'nir_intrinsic_load_btd_shader_type_intel',
    256: 'nir_intrinsic_load_btd_stack_id_intel',
    257: 'nir_intrinsic_load_buffer_amd',
    258: 'nir_intrinsic_load_callable_sbt_addr_intel',
    259: 'nir_intrinsic_load_callable_sbt_stride_intel',
    260: 'nir_intrinsic_load_clamp_vertex_color_amd',
    261: 'nir_intrinsic_load_clip_half_line_width_amd',
    262: 'nir_intrinsic_load_clip_z_coeff_agx',
    263: 'nir_intrinsic_load_coalesced_input_count',
    264: 'nir_intrinsic_load_coefficients_agx',
    265: 'nir_intrinsic_load_color0',
    266: 'nir_intrinsic_load_color1',
    267: 'nir_intrinsic_load_const_buf_base_addr_lvp',
    268: 'nir_intrinsic_load_const_ir3',
    269: 'nir_intrinsic_load_constant',
    270: 'nir_intrinsic_load_constant_agx',
    271: 'nir_intrinsic_load_constant_base_ptr',
    272: 'nir_intrinsic_load_converted_output_pan',
    273: 'nir_intrinsic_load_core_count_arm',
    274: 'nir_intrinsic_load_core_id',
    275: 'nir_intrinsic_load_core_max_id_arm',
    276: 'nir_intrinsic_load_cull_any_enabled_amd',
    277: 'nir_intrinsic_load_cull_back_face_enabled_amd',
    278: 'nir_intrinsic_load_cull_ccw_amd',
    279: 'nir_intrinsic_load_cull_front_face_enabled_amd',
    280: 'nir_intrinsic_load_cull_line_viewport_xy_scale_and_offset_amd',
    281: 'nir_intrinsic_load_cull_mask',
    282: 'nir_intrinsic_load_cull_mask_and_flags_amd',
    283: 'nir_intrinsic_load_cull_small_line_precision_amd',
    284: 'nir_intrinsic_load_cull_small_lines_enabled_amd',
    285: 'nir_intrinsic_load_cull_small_triangle_precision_amd',
    286: 'nir_intrinsic_load_cull_small_triangles_enabled_amd',
    287: 'nir_intrinsic_load_cull_triangle_viewport_xy_scale_and_offset_amd',
    288: 'nir_intrinsic_load_debug_log_desc_amd',
    289: 'nir_intrinsic_load_depth_never_agx',
    290: 'nir_intrinsic_load_deref',
    291: 'nir_intrinsic_load_deref_block_intel',
    292: 'nir_intrinsic_load_descriptor_set_agx',
    293: 'nir_intrinsic_load_draw_id',
    294: 'nir_intrinsic_load_esgs_vertex_stride_amd',
    295: 'nir_intrinsic_load_exported_agx',
    296: 'nir_intrinsic_load_fb_layers_v3d',
    297: 'nir_intrinsic_load_fbfetch_image_desc_amd',
    298: 'nir_intrinsic_load_fbfetch_image_fmask_desc_amd',
    299: 'nir_intrinsic_load_fep_w_v3d',
    300: 'nir_intrinsic_load_first_vertex',
    301: 'nir_intrinsic_load_fixed_point_size_agx',
    302: 'nir_intrinsic_load_flat_mask',
    303: 'nir_intrinsic_load_force_vrs_rates_amd',
    304: 'nir_intrinsic_load_frag_coord',
    305: 'nir_intrinsic_load_frag_coord_unscaled_ir3',
    306: 'nir_intrinsic_load_frag_coord_w',
    307: 'nir_intrinsic_load_frag_coord_z',
    308: 'nir_intrinsic_load_frag_coord_zw_pan',
    309: 'nir_intrinsic_load_frag_invocation_count',
    310: 'nir_intrinsic_load_frag_offset_ir3',
    311: 'nir_intrinsic_load_frag_shading_rate',
    312: 'nir_intrinsic_load_frag_size',
    313: 'nir_intrinsic_load_frag_size_ir3',
    314: 'nir_intrinsic_load_from_texture_handle_agx',
    315: 'nir_intrinsic_load_front_face',
    316: 'nir_intrinsic_load_front_face_fsign',
    317: 'nir_intrinsic_load_fs_input_interp_deltas',
    318: 'nir_intrinsic_load_fs_msaa_intel',
    319: 'nir_intrinsic_load_fully_covered',
    320: 'nir_intrinsic_load_geometry_param_buffer_poly',
    321: 'nir_intrinsic_load_global',
    322: 'nir_intrinsic_load_global_2x32',
    323: 'nir_intrinsic_load_global_amd',
    324: 'nir_intrinsic_load_global_base_ptr',
    325: 'nir_intrinsic_load_global_block_intel',
    326: 'nir_intrinsic_load_global_bounded',
    327: 'nir_intrinsic_load_global_constant',
    328: 'nir_intrinsic_load_global_constant_bounded',
    329: 'nir_intrinsic_load_global_constant_offset',
    330: 'nir_intrinsic_load_global_constant_uniform_block_intel',
    331: 'nir_intrinsic_load_global_etna',
    332: 'nir_intrinsic_load_global_invocation_id',
    333: 'nir_intrinsic_load_global_invocation_index',
    334: 'nir_intrinsic_load_global_ir3',
    335: 'nir_intrinsic_load_global_size',
    336: 'nir_intrinsic_load_gs_header_ir3',
    337: 'nir_intrinsic_load_gs_vertex_offset_amd',
    338: 'nir_intrinsic_load_gs_wave_id_amd',
    339: 'nir_intrinsic_load_helper_arg_hi_agx',
    340: 'nir_intrinsic_load_helper_arg_lo_agx',
    341: 'nir_intrinsic_load_helper_invocation',
    342: 'nir_intrinsic_load_helper_op_id_agx',
    343: 'nir_intrinsic_load_hit_attrib_amd',
    344: 'nir_intrinsic_load_hs_out_patch_data_offset_amd',
    345: 'nir_intrinsic_load_hs_patch_stride_ir3',
    346: 'nir_intrinsic_load_initial_edgeflags_amd',
    347: 'nir_intrinsic_load_inline_data_intel',
    348: 'nir_intrinsic_load_input',
    349: 'nir_intrinsic_load_input_assembly_buffer_poly',
    350: 'nir_intrinsic_load_input_attachment_conv_pan',
    351: 'nir_intrinsic_load_input_attachment_coord',
    352: 'nir_intrinsic_load_input_attachment_target_pan',
    353: 'nir_intrinsic_load_input_topology_poly',
    354: 'nir_intrinsic_load_input_vertex',
    355: 'nir_intrinsic_load_instance_id',
    356: 'nir_intrinsic_load_interpolated_input',
    357: 'nir_intrinsic_load_intersection_opaque_amd',
    358: 'nir_intrinsic_load_invocation_id',
    359: 'nir_intrinsic_load_is_first_fan_agx',
    360: 'nir_intrinsic_load_is_indexed_draw',
    361: 'nir_intrinsic_load_kernel_input',
    362: 'nir_intrinsic_load_layer_id',
    363: 'nir_intrinsic_load_lds_ngg_gs_out_vertex_base_amd',
    364: 'nir_intrinsic_load_leaf_opaque_intel',
    365: 'nir_intrinsic_load_leaf_procedural_intel',
    366: 'nir_intrinsic_load_line_coord',
    367: 'nir_intrinsic_load_line_width',
    368: 'nir_intrinsic_load_local_invocation_id',
    369: 'nir_intrinsic_load_local_invocation_index',
    370: 'nir_intrinsic_load_local_pixel_agx',
    371: 'nir_intrinsic_load_local_shared_r600',
    372: 'nir_intrinsic_load_lshs_vertex_stride_amd',
    373: 'nir_intrinsic_load_max_polygon_intel',
    374: 'nir_intrinsic_load_merged_wave_info_amd',
    375: 'nir_intrinsic_load_mesh_view_count',
    376: 'nir_intrinsic_load_mesh_view_indices',
    377: 'nir_intrinsic_load_multisampled_pan',
    378: 'nir_intrinsic_load_noperspective_varyings_pan',
    379: 'nir_intrinsic_load_num_subgroups',
    380: 'nir_intrinsic_load_num_vertices',
    381: 'nir_intrinsic_load_num_vertices_per_primitive_amd',
    382: 'nir_intrinsic_load_num_workgroups',
    383: 'nir_intrinsic_load_ordered_id_amd',
    384: 'nir_intrinsic_load_output',
    385: 'nir_intrinsic_load_packed_passthrough_primitive_amd',
    386: 'nir_intrinsic_load_param',
    387: 'nir_intrinsic_load_patch_vertices_in',
    388: 'nir_intrinsic_load_per_primitive_input',
    389: 'nir_intrinsic_load_per_primitive_output',
    390: 'nir_intrinsic_load_per_primitive_remap_intel',
    391: 'nir_intrinsic_load_per_vertex_input',
    392: 'nir_intrinsic_load_per_vertex_output',
    393: 'nir_intrinsic_load_per_view_output',
    394: 'nir_intrinsic_load_persp_center_rhw_ir3',
    395: 'nir_intrinsic_load_pipeline_stat_query_enabled_amd',
    396: 'nir_intrinsic_load_pixel_coord',
    397: 'nir_intrinsic_load_point_coord',
    398: 'nir_intrinsic_load_point_coord_maybe_flipped',
    399: 'nir_intrinsic_load_poly_line_smooth_enabled',
    400: 'nir_intrinsic_load_polygon_stipple_agx',
    401: 'nir_intrinsic_load_polygon_stipple_buffer_amd',
    402: 'nir_intrinsic_load_preamble',
    403: 'nir_intrinsic_load_prim_gen_query_enabled_amd',
    404: 'nir_intrinsic_load_prim_xfb_query_enabled_amd',
    405: 'nir_intrinsic_load_primitive_id',
    406: 'nir_intrinsic_load_primitive_location_ir3',
    407: 'nir_intrinsic_load_printf_buffer_address',
    408: 'nir_intrinsic_load_printf_buffer_size',
    409: 'nir_intrinsic_load_provoking_last',
    410: 'nir_intrinsic_load_provoking_vtx_amd',
    411: 'nir_intrinsic_load_provoking_vtx_in_prim_amd',
    412: 'nir_intrinsic_load_push_constant',
    413: 'nir_intrinsic_load_push_constant_zink',
    414: 'nir_intrinsic_load_r600_per_vertex_input',
    415: 'nir_intrinsic_load_rasterization_primitive_amd',
    416: 'nir_intrinsic_load_rasterization_samples_amd',
    417: 'nir_intrinsic_load_rasterization_stream',
    418: 'nir_intrinsic_load_raw_output_pan',
    419: 'nir_intrinsic_load_raw_vertex_id_pan',
    420: 'nir_intrinsic_load_raw_vertex_offset_pan',
    421: 'nir_intrinsic_load_ray_base_mem_addr_intel',
    422: 'nir_intrinsic_load_ray_flags',
    423: 'nir_intrinsic_load_ray_geometry_index',
    424: 'nir_intrinsic_load_ray_hit_kind',
    425: 'nir_intrinsic_load_ray_hit_sbt_addr_intel',
    426: 'nir_intrinsic_load_ray_hit_sbt_stride_intel',
    427: 'nir_intrinsic_load_ray_hw_stack_size_intel',
    428: 'nir_intrinsic_load_ray_instance_custom_index',
    429: 'nir_intrinsic_load_ray_launch_id',
    430: 'nir_intrinsic_load_ray_launch_size',
    431: 'nir_intrinsic_load_ray_miss_sbt_addr_intel',
    432: 'nir_intrinsic_load_ray_miss_sbt_stride_intel',
    433: 'nir_intrinsic_load_ray_num_dss_rt_stacks_intel',
    434: 'nir_intrinsic_load_ray_object_direction',
    435: 'nir_intrinsic_load_ray_object_origin',
    436: 'nir_intrinsic_load_ray_object_to_world',
    437: 'nir_intrinsic_load_ray_query_global_intel',
    438: 'nir_intrinsic_load_ray_sw_stack_size_intel',
    439: 'nir_intrinsic_load_ray_t_max',
    440: 'nir_intrinsic_load_ray_t_min',
    441: 'nir_intrinsic_load_ray_tracing_stack_base_lvp',
    442: 'nir_intrinsic_load_ray_triangle_vertex_positions',
    443: 'nir_intrinsic_load_ray_world_direction',
    444: 'nir_intrinsic_load_ray_world_origin',
    445: 'nir_intrinsic_load_ray_world_to_object',
    446: 'nir_intrinsic_load_readonly_output_pan',
    447: 'nir_intrinsic_load_reg',
    448: 'nir_intrinsic_load_reg_indirect',
    449: 'nir_intrinsic_load_rel_patch_id_ir3',
    450: 'nir_intrinsic_load_reloc_const_intel',
    451: 'nir_intrinsic_load_resume_shader_address_amd',
    452: 'nir_intrinsic_load_ring_attr_amd',
    453: 'nir_intrinsic_load_ring_attr_offset_amd',
    454: 'nir_intrinsic_load_ring_es2gs_offset_amd',
    455: 'nir_intrinsic_load_ring_esgs_amd',
    456: 'nir_intrinsic_load_ring_gs2vs_offset_amd',
    457: 'nir_intrinsic_load_ring_gsvs_amd',
    458: 'nir_intrinsic_load_ring_mesh_scratch_amd',
    459: 'nir_intrinsic_load_ring_mesh_scratch_offset_amd',
    460: 'nir_intrinsic_load_ring_task_draw_amd',
    461: 'nir_intrinsic_load_ring_task_payload_amd',
    462: 'nir_intrinsic_load_ring_tess_factors_amd',
    463: 'nir_intrinsic_load_ring_tess_factors_offset_amd',
    464: 'nir_intrinsic_load_ring_tess_offchip_amd',
    465: 'nir_intrinsic_load_ring_tess_offchip_offset_amd',
    466: 'nir_intrinsic_load_root_agx',
    467: 'nir_intrinsic_load_rt_arg_scratch_offset_amd',
    468: 'nir_intrinsic_load_rt_conversion_pan',
    469: 'nir_intrinsic_load_sample_id',
    470: 'nir_intrinsic_load_sample_mask',
    471: 'nir_intrinsic_load_sample_mask_in',
    472: 'nir_intrinsic_load_sample_pos',
    473: 'nir_intrinsic_load_sample_pos_from_id',
    474: 'nir_intrinsic_load_sample_pos_or_center',
    475: 'nir_intrinsic_load_sample_positions_agx',
    476: 'nir_intrinsic_load_sample_positions_amd',
    477: 'nir_intrinsic_load_sample_positions_pan',
    478: 'nir_intrinsic_load_sampler_handle_agx',
    479: 'nir_intrinsic_load_sampler_lod_parameters',
    480: 'nir_intrinsic_load_samples_log2_agx',
    481: 'nir_intrinsic_load_sbt_base_amd',
    482: 'nir_intrinsic_load_sbt_offset_amd',
    483: 'nir_intrinsic_load_sbt_stride_amd',
    484: 'nir_intrinsic_load_scalar_arg_amd',
    485: 'nir_intrinsic_load_scratch',
    486: 'nir_intrinsic_load_scratch_base_ptr',
    487: 'nir_intrinsic_load_shader_call_data_offset_lvp',
    488: 'nir_intrinsic_load_shader_index',
    489: 'nir_intrinsic_load_shader_output_pan',
    490: 'nir_intrinsic_load_shader_part_tests_zs_agx',
    491: 'nir_intrinsic_load_shader_record_ptr',
    492: 'nir_intrinsic_load_shared',
    493: 'nir_intrinsic_load_shared2_amd',
    494: 'nir_intrinsic_load_shared_base_ptr',
    495: 'nir_intrinsic_load_shared_block_intel',
    496: 'nir_intrinsic_load_shared_ir3',
    497: 'nir_intrinsic_load_shared_lock_nv',
    498: 'nir_intrinsic_load_shared_uniform_block_intel',
    499: 'nir_intrinsic_load_simd_width_intel',
    500: 'nir_intrinsic_load_sm_count_nv',
    501: 'nir_intrinsic_load_sm_id_nv',
    502: 'nir_intrinsic_load_smem_amd',
    503: 'nir_intrinsic_load_ssbo',
    504: 'nir_intrinsic_load_ssbo_address',
    505: 'nir_intrinsic_load_ssbo_block_intel',
    506: 'nir_intrinsic_load_ssbo_intel',
    507: 'nir_intrinsic_load_ssbo_ir3',
    508: 'nir_intrinsic_load_ssbo_uniform_block_intel',
    509: 'nir_intrinsic_load_stack',
    510: 'nir_intrinsic_load_stat_query_address_agx',
    511: 'nir_intrinsic_load_streamout_buffer_amd',
    512: 'nir_intrinsic_load_streamout_config_amd',
    513: 'nir_intrinsic_load_streamout_offset_amd',
    514: 'nir_intrinsic_load_streamout_write_index_amd',
    515: 'nir_intrinsic_load_subgroup_eq_mask',
    516: 'nir_intrinsic_load_subgroup_ge_mask',
    517: 'nir_intrinsic_load_subgroup_gt_mask',
    518: 'nir_intrinsic_load_subgroup_id',
    519: 'nir_intrinsic_load_subgroup_id_shift_ir3',
    520: 'nir_intrinsic_load_subgroup_invocation',
    521: 'nir_intrinsic_load_subgroup_le_mask',
    522: 'nir_intrinsic_load_subgroup_lt_mask',
    523: 'nir_intrinsic_load_subgroup_size',
    524: 'nir_intrinsic_load_sysval_agx',
    525: 'nir_intrinsic_load_sysval_nv',
    526: 'nir_intrinsic_load_task_payload',
    527: 'nir_intrinsic_load_task_ring_entry_amd',
    528: 'nir_intrinsic_load_tcs_header_ir3',
    529: 'nir_intrinsic_load_tcs_in_param_base_r600',
    530: 'nir_intrinsic_load_tcs_mem_attrib_stride',
    531: 'nir_intrinsic_load_tcs_num_patches_amd',
    532: 'nir_intrinsic_load_tcs_out_param_base_r600',
    533: 'nir_intrinsic_load_tcs_primitive_mode_amd',
    534: 'nir_intrinsic_load_tcs_rel_patch_id_r600',
    535: 'nir_intrinsic_load_tcs_tess_factor_base_r600',
    536: 'nir_intrinsic_load_tcs_tess_levels_to_tes_amd',
    537: 'nir_intrinsic_load_tess_coord',
    538: 'nir_intrinsic_load_tess_coord_xy',
    539: 'nir_intrinsic_load_tess_factor_base_ir3',
    540: 'nir_intrinsic_load_tess_level_inner',
    541: 'nir_intrinsic_load_tess_level_inner_default',
    542: 'nir_intrinsic_load_tess_level_outer',
    543: 'nir_intrinsic_load_tess_level_outer_default',
    544: 'nir_intrinsic_load_tess_param_base_ir3',
    545: 'nir_intrinsic_load_tess_param_buffer_poly',
    546: 'nir_intrinsic_load_tess_rel_patch_id_amd',
    547: 'nir_intrinsic_load_tex_sprite_mask_agx',
    548: 'nir_intrinsic_load_texture_handle_agx',
    549: 'nir_intrinsic_load_texture_scale',
    550: 'nir_intrinsic_load_texture_size_etna',
    551: 'nir_intrinsic_load_tlb_color_brcm',
    552: 'nir_intrinsic_load_topology_id_intel',
    553: 'nir_intrinsic_load_typed_buffer_amd',
    554: 'nir_intrinsic_load_uav_ir3',
    555: 'nir_intrinsic_load_ubo',
    556: 'nir_intrinsic_load_ubo_uniform_block_intel',
    557: 'nir_intrinsic_load_ubo_vec4',
    558: 'nir_intrinsic_load_uniform',
    559: 'nir_intrinsic_load_user_clip_plane',
    560: 'nir_intrinsic_load_user_data_amd',
    561: 'nir_intrinsic_load_uvs_index_agx',
    562: 'nir_intrinsic_load_vbo_base_agx',
    563: 'nir_intrinsic_load_vbo_stride_agx',
    564: 'nir_intrinsic_load_vector_arg_amd',
    565: 'nir_intrinsic_load_vertex_id',
    566: 'nir_intrinsic_load_vertex_id_zero_base',
    567: 'nir_intrinsic_load_view_index',
    568: 'nir_intrinsic_load_viewport_offset',
    569: 'nir_intrinsic_load_viewport_scale',
    570: 'nir_intrinsic_load_viewport_x_offset',
    571: 'nir_intrinsic_load_viewport_x_scale',
    572: 'nir_intrinsic_load_viewport_y_offset',
    573: 'nir_intrinsic_load_viewport_y_scale',
    574: 'nir_intrinsic_load_viewport_z_offset',
    575: 'nir_intrinsic_load_viewport_z_scale',
    576: 'nir_intrinsic_load_vs_output_buffer_poly',
    577: 'nir_intrinsic_load_vs_outputs_poly',
    578: 'nir_intrinsic_load_vs_primitive_stride_ir3',
    579: 'nir_intrinsic_load_vs_vertex_stride_ir3',
    580: 'nir_intrinsic_load_vulkan_descriptor',
    581: 'nir_intrinsic_load_warp_id_arm',
    582: 'nir_intrinsic_load_warp_id_nv',
    583: 'nir_intrinsic_load_warp_max_id_arm',
    584: 'nir_intrinsic_load_warps_per_sm_nv',
    585: 'nir_intrinsic_load_work_dim',
    586: 'nir_intrinsic_load_workgroup_id',
    587: 'nir_intrinsic_load_workgroup_index',
    588: 'nir_intrinsic_load_workgroup_num_input_primitives_amd',
    589: 'nir_intrinsic_load_workgroup_num_input_vertices_amd',
    590: 'nir_intrinsic_load_workgroup_size',
    591: 'nir_intrinsic_load_xfb_address',
    592: 'nir_intrinsic_load_xfb_index_buffer',
    593: 'nir_intrinsic_load_xfb_size',
    594: 'nir_intrinsic_load_xfb_state_address_gfx12_amd',
    595: 'nir_intrinsic_masked_swizzle_amd',
    596: 'nir_intrinsic_mbcnt_amd',
    597: 'nir_intrinsic_memcpy_deref',
    598: 'nir_intrinsic_nop',
    599: 'nir_intrinsic_nop_amd',
    600: 'nir_intrinsic_optimization_barrier_sgpr_amd',
    601: 'nir_intrinsic_optimization_barrier_vgpr_amd',
    602: 'nir_intrinsic_ordered_add_loop_gfx12_amd',
    603: 'nir_intrinsic_ordered_xfb_counter_add_gfx11_amd',
    604: 'nir_intrinsic_overwrite_tes_arguments_amd',
    605: 'nir_intrinsic_overwrite_vs_arguments_amd',
    606: 'nir_intrinsic_pin_cx_handle_nv',
    607: 'nir_intrinsic_preamble_end_ir3',
    608: 'nir_intrinsic_preamble_start_ir3',
    609: 'nir_intrinsic_prefetch_sam_ir3',
    610: 'nir_intrinsic_prefetch_tex_ir3',
    611: 'nir_intrinsic_prefetch_ubo_ir3',
    612: 'nir_intrinsic_printf',
    613: 'nir_intrinsic_printf_abort',
    614: 'nir_intrinsic_quad_ballot_agx',
    615: 'nir_intrinsic_quad_broadcast',
    616: 'nir_intrinsic_quad_swap_diagonal',
    617: 'nir_intrinsic_quad_swap_horizontal',
    618: 'nir_intrinsic_quad_swap_vertical',
    619: 'nir_intrinsic_quad_swizzle_amd',
    620: 'nir_intrinsic_quad_vote_all',
    621: 'nir_intrinsic_quad_vote_any',
    622: 'nir_intrinsic_r600_indirect_vertex_at_index',
    623: 'nir_intrinsic_ray_intersection_ir3',
    624: 'nir_intrinsic_read_attribute_payload_intel',
    625: 'nir_intrinsic_read_first_invocation',
    626: 'nir_intrinsic_read_getlast_ir3',
    627: 'nir_intrinsic_read_invocation',
    628: 'nir_intrinsic_read_invocation_cond_ir3',
    629: 'nir_intrinsic_reduce',
    630: 'nir_intrinsic_reduce_clusters_ir3',
    631: 'nir_intrinsic_report_ray_intersection',
    632: 'nir_intrinsic_resource_intel',
    633: 'nir_intrinsic_rotate',
    634: 'nir_intrinsic_rq_confirm_intersection',
    635: 'nir_intrinsic_rq_generate_intersection',
    636: 'nir_intrinsic_rq_initialize',
    637: 'nir_intrinsic_rq_load',
    638: 'nir_intrinsic_rq_proceed',
    639: 'nir_intrinsic_rq_terminate',
    640: 'nir_intrinsic_rt_execute_callable',
    641: 'nir_intrinsic_rt_resume',
    642: 'nir_intrinsic_rt_return_amd',
    643: 'nir_intrinsic_rt_trace_ray',
    644: 'nir_intrinsic_sample_mask_agx',
    645: 'nir_intrinsic_select_vertex_poly',
    646: 'nir_intrinsic_sendmsg_amd',
    647: 'nir_intrinsic_set_vertex_and_primitive_count',
    648: 'nir_intrinsic_shader_clock',
    649: 'nir_intrinsic_shared_append_amd',
    650: 'nir_intrinsic_shared_atomic',
    651: 'nir_intrinsic_shared_atomic_swap',
    652: 'nir_intrinsic_shared_consume_amd',
    653: 'nir_intrinsic_shuffle',
    654: 'nir_intrinsic_shuffle_down',
    655: 'nir_intrinsic_shuffle_down_uniform_ir3',
    656: 'nir_intrinsic_shuffle_up',
    657: 'nir_intrinsic_shuffle_up_uniform_ir3',
    658: 'nir_intrinsic_shuffle_xor',
    659: 'nir_intrinsic_shuffle_xor_uniform_ir3',
    660: 'nir_intrinsic_sleep_amd',
    661: 'nir_intrinsic_sparse_residency_code_and',
    662: 'nir_intrinsic_ssa_bar_nv',
    663: 'nir_intrinsic_ssbo_atomic',
    664: 'nir_intrinsic_ssbo_atomic_ir3',
    665: 'nir_intrinsic_ssbo_atomic_swap',
    666: 'nir_intrinsic_ssbo_atomic_swap_ir3',
    667: 'nir_intrinsic_stack_map_agx',
    668: 'nir_intrinsic_stack_unmap_agx',
    669: 'nir_intrinsic_store_agx',
    670: 'nir_intrinsic_store_buffer_amd',
    671: 'nir_intrinsic_store_combined_output_pan',
    672: 'nir_intrinsic_store_const_ir3',
    673: 'nir_intrinsic_store_deref',
    674: 'nir_intrinsic_store_deref_block_intel',
    675: 'nir_intrinsic_store_global',
    676: 'nir_intrinsic_store_global_2x32',
    677: 'nir_intrinsic_store_global_amd',
    678: 'nir_intrinsic_store_global_block_intel',
    679: 'nir_intrinsic_store_global_etna',
    680: 'nir_intrinsic_store_global_ir3',
    681: 'nir_intrinsic_store_hit_attrib_amd',
    682: 'nir_intrinsic_store_local_pixel_agx',
    683: 'nir_intrinsic_store_local_shared_r600',
    684: 'nir_intrinsic_store_output',
    685: 'nir_intrinsic_store_per_primitive_output',
    686: 'nir_intrinsic_store_per_primitive_payload_intel',
    687: 'nir_intrinsic_store_per_vertex_output',
    688: 'nir_intrinsic_store_per_view_output',
    689: 'nir_intrinsic_store_preamble',
    690: 'nir_intrinsic_store_raw_output_pan',
    691: 'nir_intrinsic_store_reg',
    692: 'nir_intrinsic_store_reg_indirect',
    693: 'nir_intrinsic_store_scalar_arg_amd',
    694: 'nir_intrinsic_store_scratch',
    695: 'nir_intrinsic_store_shared',
    696: 'nir_intrinsic_store_shared2_amd',
    697: 'nir_intrinsic_store_shared_block_intel',
    698: 'nir_intrinsic_store_shared_ir3',
    699: 'nir_intrinsic_store_shared_unlock_nv',
    700: 'nir_intrinsic_store_ssbo',
    701: 'nir_intrinsic_store_ssbo_block_intel',
    702: 'nir_intrinsic_store_ssbo_intel',
    703: 'nir_intrinsic_store_ssbo_ir3',
    704: 'nir_intrinsic_store_stack',
    705: 'nir_intrinsic_store_task_payload',
    706: 'nir_intrinsic_store_tf_r600',
    707: 'nir_intrinsic_store_tlb_sample_color_v3d',
    708: 'nir_intrinsic_store_uvs_agx',
    709: 'nir_intrinsic_store_vector_arg_amd',
    710: 'nir_intrinsic_store_zs_agx',
    711: 'nir_intrinsic_strict_wqm_coord_amd',
    712: 'nir_intrinsic_subfm_nv',
    713: 'nir_intrinsic_suclamp_nv',
    714: 'nir_intrinsic_sueau_nv',
    715: 'nir_intrinsic_suldga_nv',
    716: 'nir_intrinsic_sustga_nv',
    717: 'nir_intrinsic_task_payload_atomic',
    718: 'nir_intrinsic_task_payload_atomic_swap',
    719: 'nir_intrinsic_terminate',
    720: 'nir_intrinsic_terminate_if',
    721: 'nir_intrinsic_terminate_ray',
    722: 'nir_intrinsic_trace_ray',
    723: 'nir_intrinsic_trace_ray_intel',
    724: 'nir_intrinsic_unit_test_amd',
    725: 'nir_intrinsic_unit_test_divergent_amd',
    726: 'nir_intrinsic_unit_test_uniform_amd',
    727: 'nir_intrinsic_unpin_cx_handle_nv',
    728: 'nir_intrinsic_use',
    729: 'nir_intrinsic_vild_nv',
    730: 'nir_intrinsic_vote_all',
    731: 'nir_intrinsic_vote_any',
    732: 'nir_intrinsic_vote_feq',
    733: 'nir_intrinsic_vote_ieq',
    734: 'nir_intrinsic_vulkan_resource_index',
    735: 'nir_intrinsic_vulkan_resource_reindex',
    736: 'nir_intrinsic_write_invocation_amd',
    737: 'nir_intrinsic_xfb_counter_sub_gfx11_amd',
    737: 'nir_last_intrinsic',
    738: 'nir_num_intrinsics',
}
nir_intrinsic_accept_ray_intersection = 0
nir_intrinsic_addr_mode_is = 1
nir_intrinsic_al2p_nv = 2
nir_intrinsic_ald_nv = 3
nir_intrinsic_alpha_to_coverage = 4
nir_intrinsic_as_uniform = 5
nir_intrinsic_ast_nv = 6
nir_intrinsic_atomic_add_gen_prim_count_amd = 7
nir_intrinsic_atomic_add_gs_emit_prim_count_amd = 8
nir_intrinsic_atomic_add_shader_invocation_count_amd = 9
nir_intrinsic_atomic_add_xfb_prim_count_amd = 10
nir_intrinsic_atomic_counter_add = 11
nir_intrinsic_atomic_counter_add_deref = 12
nir_intrinsic_atomic_counter_and = 13
nir_intrinsic_atomic_counter_and_deref = 14
nir_intrinsic_atomic_counter_comp_swap = 15
nir_intrinsic_atomic_counter_comp_swap_deref = 16
nir_intrinsic_atomic_counter_exchange = 17
nir_intrinsic_atomic_counter_exchange_deref = 18
nir_intrinsic_atomic_counter_inc = 19
nir_intrinsic_atomic_counter_inc_deref = 20
nir_intrinsic_atomic_counter_max = 21
nir_intrinsic_atomic_counter_max_deref = 22
nir_intrinsic_atomic_counter_min = 23
nir_intrinsic_atomic_counter_min_deref = 24
nir_intrinsic_atomic_counter_or = 25
nir_intrinsic_atomic_counter_or_deref = 26
nir_intrinsic_atomic_counter_post_dec = 27
nir_intrinsic_atomic_counter_post_dec_deref = 28
nir_intrinsic_atomic_counter_pre_dec = 29
nir_intrinsic_atomic_counter_pre_dec_deref = 30
nir_intrinsic_atomic_counter_read = 31
nir_intrinsic_atomic_counter_read_deref = 32
nir_intrinsic_atomic_counter_xor = 33
nir_intrinsic_atomic_counter_xor_deref = 34
nir_intrinsic_ballot = 35
nir_intrinsic_ballot_bit_count_exclusive = 36
nir_intrinsic_ballot_bit_count_inclusive = 37
nir_intrinsic_ballot_bit_count_reduce = 38
nir_intrinsic_ballot_bitfield_extract = 39
nir_intrinsic_ballot_find_lsb = 40
nir_intrinsic_ballot_find_msb = 41
nir_intrinsic_ballot_relaxed = 42
nir_intrinsic_bar_break_nv = 43
nir_intrinsic_bar_set_nv = 44
nir_intrinsic_bar_sync_nv = 45
nir_intrinsic_barrier = 46
nir_intrinsic_begin_invocation_interlock = 47
nir_intrinsic_bindgen_return = 48
nir_intrinsic_bindless_image_agx = 49
nir_intrinsic_bindless_image_atomic = 50
nir_intrinsic_bindless_image_atomic_swap = 51
nir_intrinsic_bindless_image_descriptor_amd = 52
nir_intrinsic_bindless_image_format = 53
nir_intrinsic_bindless_image_fragment_mask_load_amd = 54
nir_intrinsic_bindless_image_levels = 55
nir_intrinsic_bindless_image_load = 56
nir_intrinsic_bindless_image_load_raw_intel = 57
nir_intrinsic_bindless_image_order = 58
nir_intrinsic_bindless_image_samples = 59
nir_intrinsic_bindless_image_samples_identical = 60
nir_intrinsic_bindless_image_size = 61
nir_intrinsic_bindless_image_sparse_load = 62
nir_intrinsic_bindless_image_store = 63
nir_intrinsic_bindless_image_store_block_agx = 64
nir_intrinsic_bindless_image_store_raw_intel = 65
nir_intrinsic_bindless_image_texel_address = 66
nir_intrinsic_bindless_resource_ir3 = 67
nir_intrinsic_bindless_sampler_agx = 68
nir_intrinsic_brcst_active_ir3 = 69
nir_intrinsic_btd_retire_intel = 70
nir_intrinsic_btd_spawn_intel = 71
nir_intrinsic_btd_stack_push_intel = 72
nir_intrinsic_bvh64_intersect_ray_amd = 73
nir_intrinsic_bvh8_intersect_ray_amd = 74
nir_intrinsic_bvh_stack_rtn_amd = 75
nir_intrinsic_cmat_binary_op = 76
nir_intrinsic_cmat_bitcast = 77
nir_intrinsic_cmat_construct = 78
nir_intrinsic_cmat_convert = 79
nir_intrinsic_cmat_copy = 80
nir_intrinsic_cmat_extract = 81
nir_intrinsic_cmat_insert = 82
nir_intrinsic_cmat_length = 83
nir_intrinsic_cmat_load = 84
nir_intrinsic_cmat_muladd = 85
nir_intrinsic_cmat_muladd_amd = 86
nir_intrinsic_cmat_muladd_nv = 87
nir_intrinsic_cmat_scalar_op = 88
nir_intrinsic_cmat_store = 89
nir_intrinsic_cmat_transpose = 90
nir_intrinsic_cmat_unary_op = 91
nir_intrinsic_convert_alu_types = 92
nir_intrinsic_convert_cmat_intel = 93
nir_intrinsic_copy_deref = 94
nir_intrinsic_copy_fs_outputs_nv = 95
nir_intrinsic_copy_global_to_uniform_ir3 = 96
nir_intrinsic_copy_push_const_to_uniform_ir3 = 97
nir_intrinsic_copy_ubo_to_uniform_ir3 = 98
nir_intrinsic_ddx = 99
nir_intrinsic_ddx_coarse = 100
nir_intrinsic_ddx_fine = 101
nir_intrinsic_ddy = 102
nir_intrinsic_ddy_coarse = 103
nir_intrinsic_ddy_fine = 104
nir_intrinsic_debug_break = 105
nir_intrinsic_decl_reg = 106
nir_intrinsic_demote = 107
nir_intrinsic_demote_if = 108
nir_intrinsic_demote_samples = 109
nir_intrinsic_deref_atomic = 110
nir_intrinsic_deref_atomic_swap = 111
nir_intrinsic_deref_buffer_array_length = 112
nir_intrinsic_deref_implicit_array_length = 113
nir_intrinsic_deref_mode_is = 114
nir_intrinsic_deref_texture_src = 115
nir_intrinsic_doorbell_agx = 116
nir_intrinsic_dpas_intel = 117
nir_intrinsic_dpp16_shift_amd = 118
nir_intrinsic_elect = 119
nir_intrinsic_elect_any_ir3 = 120
nir_intrinsic_emit_primitive_poly = 121
nir_intrinsic_emit_vertex = 122
nir_intrinsic_emit_vertex_nv = 123
nir_intrinsic_emit_vertex_with_counter = 124
nir_intrinsic_end_invocation_interlock = 125
nir_intrinsic_end_primitive = 126
nir_intrinsic_end_primitive_nv = 127
nir_intrinsic_end_primitive_with_counter = 128
nir_intrinsic_enqueue_node_payloads = 129
nir_intrinsic_exclusive_scan = 130
nir_intrinsic_exclusive_scan_clusters_ir3 = 131
nir_intrinsic_execute_callable = 132
nir_intrinsic_execute_closest_hit_amd = 133
nir_intrinsic_execute_miss_amd = 134
nir_intrinsic_export_agx = 135
nir_intrinsic_export_amd = 136
nir_intrinsic_export_dual_src_blend_amd = 137
nir_intrinsic_export_row_amd = 138
nir_intrinsic_fence_helper_exit_agx = 139
nir_intrinsic_fence_mem_to_tex_agx = 140
nir_intrinsic_fence_pbe_to_tex_agx = 141
nir_intrinsic_fence_pbe_to_tex_pixel_agx = 142
nir_intrinsic_final_primitive_nv = 143
nir_intrinsic_finalize_incoming_node_payload = 144
nir_intrinsic_first_invocation = 145
nir_intrinsic_fs_out_nv = 146
nir_intrinsic_gds_atomic_add_amd = 147
nir_intrinsic_get_ssbo_size = 148
nir_intrinsic_get_ubo_size = 149
nir_intrinsic_global_atomic = 150
nir_intrinsic_global_atomic_2x32 = 151
nir_intrinsic_global_atomic_agx = 152
nir_intrinsic_global_atomic_amd = 153
nir_intrinsic_global_atomic_swap = 154
nir_intrinsic_global_atomic_swap_2x32 = 155
nir_intrinsic_global_atomic_swap_agx = 156
nir_intrinsic_global_atomic_swap_amd = 157
nir_intrinsic_ignore_ray_intersection = 158
nir_intrinsic_imadsp_nv = 159
nir_intrinsic_image_atomic = 160
nir_intrinsic_image_atomic_swap = 161
nir_intrinsic_image_deref_atomic = 162
nir_intrinsic_image_deref_atomic_swap = 163
nir_intrinsic_image_deref_descriptor_amd = 164
nir_intrinsic_image_deref_format = 165
nir_intrinsic_image_deref_fragment_mask_load_amd = 166
nir_intrinsic_image_deref_levels = 167
nir_intrinsic_image_deref_load = 168
nir_intrinsic_image_deref_load_info_nv = 169
nir_intrinsic_image_deref_load_param_intel = 170
nir_intrinsic_image_deref_load_raw_intel = 171
nir_intrinsic_image_deref_order = 172
nir_intrinsic_image_deref_samples = 173
nir_intrinsic_image_deref_samples_identical = 174
nir_intrinsic_image_deref_size = 175
nir_intrinsic_image_deref_sparse_load = 176
nir_intrinsic_image_deref_store = 177
nir_intrinsic_image_deref_store_block_agx = 178
nir_intrinsic_image_deref_store_raw_intel = 179
nir_intrinsic_image_deref_texel_address = 180
nir_intrinsic_image_descriptor_amd = 181
nir_intrinsic_image_format = 182
nir_intrinsic_image_fragment_mask_load_amd = 183
nir_intrinsic_image_levels = 184
nir_intrinsic_image_load = 185
nir_intrinsic_image_load_raw_intel = 186
nir_intrinsic_image_order = 187
nir_intrinsic_image_samples = 188
nir_intrinsic_image_samples_identical = 189
nir_intrinsic_image_size = 190
nir_intrinsic_image_sparse_load = 191
nir_intrinsic_image_store = 192
nir_intrinsic_image_store_block_agx = 193
nir_intrinsic_image_store_raw_intel = 194
nir_intrinsic_image_texel_address = 195
nir_intrinsic_inclusive_scan = 196
nir_intrinsic_inclusive_scan_clusters_ir3 = 197
nir_intrinsic_initialize_node_payloads = 198
nir_intrinsic_interp_deref_at_centroid = 199
nir_intrinsic_interp_deref_at_offset = 200
nir_intrinsic_interp_deref_at_sample = 201
nir_intrinsic_interp_deref_at_vertex = 202
nir_intrinsic_inverse_ballot = 203
nir_intrinsic_ipa_nv = 204
nir_intrinsic_is_helper_invocation = 205
nir_intrinsic_is_sparse_resident_zink = 206
nir_intrinsic_is_sparse_texels_resident = 207
nir_intrinsic_is_subgroup_invocation_lt_amd = 208
nir_intrinsic_isberd_nv = 209
nir_intrinsic_lane_permute_16_amd = 210
nir_intrinsic_last_invocation = 211
nir_intrinsic_launch_mesh_workgroups = 212
nir_intrinsic_launch_mesh_workgroups_with_payload_deref = 213
nir_intrinsic_ldc_nv = 214
nir_intrinsic_ldcx_nv = 215
nir_intrinsic_ldtram_nv = 216
nir_intrinsic_load_aa_line_width = 217
nir_intrinsic_load_accel_struct_amd = 218
nir_intrinsic_load_active_samples_agx = 219
nir_intrinsic_load_active_subgroup_count_agx = 220
nir_intrinsic_load_active_subgroup_invocation_agx = 221
nir_intrinsic_load_agx = 222
nir_intrinsic_load_alpha_reference_amd = 223
nir_intrinsic_load_api_sample_mask_agx = 224
nir_intrinsic_load_attrib_clamp_agx = 225
nir_intrinsic_load_attribute_pan = 226
nir_intrinsic_load_back_face_agx = 227
nir_intrinsic_load_barycentric_at_offset = 228
nir_intrinsic_load_barycentric_at_offset_nv = 229
nir_intrinsic_load_barycentric_at_sample = 230
nir_intrinsic_load_barycentric_centroid = 231
nir_intrinsic_load_barycentric_coord_at_offset = 232
nir_intrinsic_load_barycentric_coord_at_sample = 233
nir_intrinsic_load_barycentric_coord_centroid = 234
nir_intrinsic_load_barycentric_coord_pixel = 235
nir_intrinsic_load_barycentric_coord_sample = 236
nir_intrinsic_load_barycentric_model = 237
nir_intrinsic_load_barycentric_optimize_amd = 238
nir_intrinsic_load_barycentric_pixel = 239
nir_intrinsic_load_barycentric_sample = 240
nir_intrinsic_load_base_global_invocation_id = 241
nir_intrinsic_load_base_instance = 242
nir_intrinsic_load_base_vertex = 243
nir_intrinsic_load_base_workgroup_id = 244
nir_intrinsic_load_blend_const_color_a_float = 245
nir_intrinsic_load_blend_const_color_aaaa8888_unorm = 246
nir_intrinsic_load_blend_const_color_b_float = 247
nir_intrinsic_load_blend_const_color_g_float = 248
nir_intrinsic_load_blend_const_color_r_float = 249
nir_intrinsic_load_blend_const_color_rgba = 250
nir_intrinsic_load_blend_const_color_rgba8888_unorm = 251
nir_intrinsic_load_btd_global_arg_addr_intel = 252
nir_intrinsic_load_btd_local_arg_addr_intel = 253
nir_intrinsic_load_btd_resume_sbt_addr_intel = 254
nir_intrinsic_load_btd_shader_type_intel = 255
nir_intrinsic_load_btd_stack_id_intel = 256
nir_intrinsic_load_buffer_amd = 257
nir_intrinsic_load_callable_sbt_addr_intel = 258
nir_intrinsic_load_callable_sbt_stride_intel = 259
nir_intrinsic_load_clamp_vertex_color_amd = 260
nir_intrinsic_load_clip_half_line_width_amd = 261
nir_intrinsic_load_clip_z_coeff_agx = 262
nir_intrinsic_load_coalesced_input_count = 263
nir_intrinsic_load_coefficients_agx = 264
nir_intrinsic_load_color0 = 265
nir_intrinsic_load_color1 = 266
nir_intrinsic_load_const_buf_base_addr_lvp = 267
nir_intrinsic_load_const_ir3 = 268
nir_intrinsic_load_constant = 269
nir_intrinsic_load_constant_agx = 270
nir_intrinsic_load_constant_base_ptr = 271
nir_intrinsic_load_converted_output_pan = 272
nir_intrinsic_load_core_count_arm = 273
nir_intrinsic_load_core_id = 274
nir_intrinsic_load_core_max_id_arm = 275
nir_intrinsic_load_cull_any_enabled_amd = 276
nir_intrinsic_load_cull_back_face_enabled_amd = 277
nir_intrinsic_load_cull_ccw_amd = 278
nir_intrinsic_load_cull_front_face_enabled_amd = 279
nir_intrinsic_load_cull_line_viewport_xy_scale_and_offset_amd = 280
nir_intrinsic_load_cull_mask = 281
nir_intrinsic_load_cull_mask_and_flags_amd = 282
nir_intrinsic_load_cull_small_line_precision_amd = 283
nir_intrinsic_load_cull_small_lines_enabled_amd = 284
nir_intrinsic_load_cull_small_triangle_precision_amd = 285
nir_intrinsic_load_cull_small_triangles_enabled_amd = 286
nir_intrinsic_load_cull_triangle_viewport_xy_scale_and_offset_amd = 287
nir_intrinsic_load_debug_log_desc_amd = 288
nir_intrinsic_load_depth_never_agx = 289
nir_intrinsic_load_deref = 290
nir_intrinsic_load_deref_block_intel = 291
nir_intrinsic_load_descriptor_set_agx = 292
nir_intrinsic_load_draw_id = 293
nir_intrinsic_load_esgs_vertex_stride_amd = 294
nir_intrinsic_load_exported_agx = 295
nir_intrinsic_load_fb_layers_v3d = 296
nir_intrinsic_load_fbfetch_image_desc_amd = 297
nir_intrinsic_load_fbfetch_image_fmask_desc_amd = 298
nir_intrinsic_load_fep_w_v3d = 299
nir_intrinsic_load_first_vertex = 300
nir_intrinsic_load_fixed_point_size_agx = 301
nir_intrinsic_load_flat_mask = 302
nir_intrinsic_load_force_vrs_rates_amd = 303
nir_intrinsic_load_frag_coord = 304
nir_intrinsic_load_frag_coord_unscaled_ir3 = 305
nir_intrinsic_load_frag_coord_w = 306
nir_intrinsic_load_frag_coord_z = 307
nir_intrinsic_load_frag_coord_zw_pan = 308
nir_intrinsic_load_frag_invocation_count = 309
nir_intrinsic_load_frag_offset_ir3 = 310
nir_intrinsic_load_frag_shading_rate = 311
nir_intrinsic_load_frag_size = 312
nir_intrinsic_load_frag_size_ir3 = 313
nir_intrinsic_load_from_texture_handle_agx = 314
nir_intrinsic_load_front_face = 315
nir_intrinsic_load_front_face_fsign = 316
nir_intrinsic_load_fs_input_interp_deltas = 317
nir_intrinsic_load_fs_msaa_intel = 318
nir_intrinsic_load_fully_covered = 319
nir_intrinsic_load_geometry_param_buffer_poly = 320
nir_intrinsic_load_global = 321
nir_intrinsic_load_global_2x32 = 322
nir_intrinsic_load_global_amd = 323
nir_intrinsic_load_global_base_ptr = 324
nir_intrinsic_load_global_block_intel = 325
nir_intrinsic_load_global_bounded = 326
nir_intrinsic_load_global_constant = 327
nir_intrinsic_load_global_constant_bounded = 328
nir_intrinsic_load_global_constant_offset = 329
nir_intrinsic_load_global_constant_uniform_block_intel = 330
nir_intrinsic_load_global_etna = 331
nir_intrinsic_load_global_invocation_id = 332
nir_intrinsic_load_global_invocation_index = 333
nir_intrinsic_load_global_ir3 = 334
nir_intrinsic_load_global_size = 335
nir_intrinsic_load_gs_header_ir3 = 336
nir_intrinsic_load_gs_vertex_offset_amd = 337
nir_intrinsic_load_gs_wave_id_amd = 338
nir_intrinsic_load_helper_arg_hi_agx = 339
nir_intrinsic_load_helper_arg_lo_agx = 340
nir_intrinsic_load_helper_invocation = 341
nir_intrinsic_load_helper_op_id_agx = 342
nir_intrinsic_load_hit_attrib_amd = 343
nir_intrinsic_load_hs_out_patch_data_offset_amd = 344
nir_intrinsic_load_hs_patch_stride_ir3 = 345
nir_intrinsic_load_initial_edgeflags_amd = 346
nir_intrinsic_load_inline_data_intel = 347
nir_intrinsic_load_input = 348
nir_intrinsic_load_input_assembly_buffer_poly = 349
nir_intrinsic_load_input_attachment_conv_pan = 350
nir_intrinsic_load_input_attachment_coord = 351
nir_intrinsic_load_input_attachment_target_pan = 352
nir_intrinsic_load_input_topology_poly = 353
nir_intrinsic_load_input_vertex = 354
nir_intrinsic_load_instance_id = 355
nir_intrinsic_load_interpolated_input = 356
nir_intrinsic_load_intersection_opaque_amd = 357
nir_intrinsic_load_invocation_id = 358
nir_intrinsic_load_is_first_fan_agx = 359
nir_intrinsic_load_is_indexed_draw = 360
nir_intrinsic_load_kernel_input = 361
nir_intrinsic_load_layer_id = 362
nir_intrinsic_load_lds_ngg_gs_out_vertex_base_amd = 363
nir_intrinsic_load_leaf_opaque_intel = 364
nir_intrinsic_load_leaf_procedural_intel = 365
nir_intrinsic_load_line_coord = 366
nir_intrinsic_load_line_width = 367
nir_intrinsic_load_local_invocation_id = 368
nir_intrinsic_load_local_invocation_index = 369
nir_intrinsic_load_local_pixel_agx = 370
nir_intrinsic_load_local_shared_r600 = 371
nir_intrinsic_load_lshs_vertex_stride_amd = 372
nir_intrinsic_load_max_polygon_intel = 373
nir_intrinsic_load_merged_wave_info_amd = 374
nir_intrinsic_load_mesh_view_count = 375
nir_intrinsic_load_mesh_view_indices = 376
nir_intrinsic_load_multisampled_pan = 377
nir_intrinsic_load_noperspective_varyings_pan = 378
nir_intrinsic_load_num_subgroups = 379
nir_intrinsic_load_num_vertices = 380
nir_intrinsic_load_num_vertices_per_primitive_amd = 381
nir_intrinsic_load_num_workgroups = 382
nir_intrinsic_load_ordered_id_amd = 383
nir_intrinsic_load_output = 384
nir_intrinsic_load_packed_passthrough_primitive_amd = 385
nir_intrinsic_load_param = 386
nir_intrinsic_load_patch_vertices_in = 387
nir_intrinsic_load_per_primitive_input = 388
nir_intrinsic_load_per_primitive_output = 389
nir_intrinsic_load_per_primitive_remap_intel = 390
nir_intrinsic_load_per_vertex_input = 391
nir_intrinsic_load_per_vertex_output = 392
nir_intrinsic_load_per_view_output = 393
nir_intrinsic_load_persp_center_rhw_ir3 = 394
nir_intrinsic_load_pipeline_stat_query_enabled_amd = 395
nir_intrinsic_load_pixel_coord = 396
nir_intrinsic_load_point_coord = 397
nir_intrinsic_load_point_coord_maybe_flipped = 398
nir_intrinsic_load_poly_line_smooth_enabled = 399
nir_intrinsic_load_polygon_stipple_agx = 400
nir_intrinsic_load_polygon_stipple_buffer_amd = 401
nir_intrinsic_load_preamble = 402
nir_intrinsic_load_prim_gen_query_enabled_amd = 403
nir_intrinsic_load_prim_xfb_query_enabled_amd = 404
nir_intrinsic_load_primitive_id = 405
nir_intrinsic_load_primitive_location_ir3 = 406
nir_intrinsic_load_printf_buffer_address = 407
nir_intrinsic_load_printf_buffer_size = 408
nir_intrinsic_load_provoking_last = 409
nir_intrinsic_load_provoking_vtx_amd = 410
nir_intrinsic_load_provoking_vtx_in_prim_amd = 411
nir_intrinsic_load_push_constant = 412
nir_intrinsic_load_push_constant_zink = 413
nir_intrinsic_load_r600_per_vertex_input = 414
nir_intrinsic_load_rasterization_primitive_amd = 415
nir_intrinsic_load_rasterization_samples_amd = 416
nir_intrinsic_load_rasterization_stream = 417
nir_intrinsic_load_raw_output_pan = 418
nir_intrinsic_load_raw_vertex_id_pan = 419
nir_intrinsic_load_raw_vertex_offset_pan = 420
nir_intrinsic_load_ray_base_mem_addr_intel = 421
nir_intrinsic_load_ray_flags = 422
nir_intrinsic_load_ray_geometry_index = 423
nir_intrinsic_load_ray_hit_kind = 424
nir_intrinsic_load_ray_hit_sbt_addr_intel = 425
nir_intrinsic_load_ray_hit_sbt_stride_intel = 426
nir_intrinsic_load_ray_hw_stack_size_intel = 427
nir_intrinsic_load_ray_instance_custom_index = 428
nir_intrinsic_load_ray_launch_id = 429
nir_intrinsic_load_ray_launch_size = 430
nir_intrinsic_load_ray_miss_sbt_addr_intel = 431
nir_intrinsic_load_ray_miss_sbt_stride_intel = 432
nir_intrinsic_load_ray_num_dss_rt_stacks_intel = 433
nir_intrinsic_load_ray_object_direction = 434
nir_intrinsic_load_ray_object_origin = 435
nir_intrinsic_load_ray_object_to_world = 436
nir_intrinsic_load_ray_query_global_intel = 437
nir_intrinsic_load_ray_sw_stack_size_intel = 438
nir_intrinsic_load_ray_t_max = 439
nir_intrinsic_load_ray_t_min = 440
nir_intrinsic_load_ray_tracing_stack_base_lvp = 441
nir_intrinsic_load_ray_triangle_vertex_positions = 442
nir_intrinsic_load_ray_world_direction = 443
nir_intrinsic_load_ray_world_origin = 444
nir_intrinsic_load_ray_world_to_object = 445
nir_intrinsic_load_readonly_output_pan = 446
nir_intrinsic_load_reg = 447
nir_intrinsic_load_reg_indirect = 448
nir_intrinsic_load_rel_patch_id_ir3 = 449
nir_intrinsic_load_reloc_const_intel = 450
nir_intrinsic_load_resume_shader_address_amd = 451
nir_intrinsic_load_ring_attr_amd = 452
nir_intrinsic_load_ring_attr_offset_amd = 453
nir_intrinsic_load_ring_es2gs_offset_amd = 454
nir_intrinsic_load_ring_esgs_amd = 455
nir_intrinsic_load_ring_gs2vs_offset_amd = 456
nir_intrinsic_load_ring_gsvs_amd = 457
nir_intrinsic_load_ring_mesh_scratch_amd = 458
nir_intrinsic_load_ring_mesh_scratch_offset_amd = 459
nir_intrinsic_load_ring_task_draw_amd = 460
nir_intrinsic_load_ring_task_payload_amd = 461
nir_intrinsic_load_ring_tess_factors_amd = 462
nir_intrinsic_load_ring_tess_factors_offset_amd = 463
nir_intrinsic_load_ring_tess_offchip_amd = 464
nir_intrinsic_load_ring_tess_offchip_offset_amd = 465
nir_intrinsic_load_root_agx = 466
nir_intrinsic_load_rt_arg_scratch_offset_amd = 467
nir_intrinsic_load_rt_conversion_pan = 468
nir_intrinsic_load_sample_id = 469
nir_intrinsic_load_sample_mask = 470
nir_intrinsic_load_sample_mask_in = 471
nir_intrinsic_load_sample_pos = 472
nir_intrinsic_load_sample_pos_from_id = 473
nir_intrinsic_load_sample_pos_or_center = 474
nir_intrinsic_load_sample_positions_agx = 475
nir_intrinsic_load_sample_positions_amd = 476
nir_intrinsic_load_sample_positions_pan = 477
nir_intrinsic_load_sampler_handle_agx = 478
nir_intrinsic_load_sampler_lod_parameters = 479
nir_intrinsic_load_samples_log2_agx = 480
nir_intrinsic_load_sbt_base_amd = 481
nir_intrinsic_load_sbt_offset_amd = 482
nir_intrinsic_load_sbt_stride_amd = 483
nir_intrinsic_load_scalar_arg_amd = 484
nir_intrinsic_load_scratch = 485
nir_intrinsic_load_scratch_base_ptr = 486
nir_intrinsic_load_shader_call_data_offset_lvp = 487
nir_intrinsic_load_shader_index = 488
nir_intrinsic_load_shader_output_pan = 489
nir_intrinsic_load_shader_part_tests_zs_agx = 490
nir_intrinsic_load_shader_record_ptr = 491
nir_intrinsic_load_shared = 492
nir_intrinsic_load_shared2_amd = 493
nir_intrinsic_load_shared_base_ptr = 494
nir_intrinsic_load_shared_block_intel = 495
nir_intrinsic_load_shared_ir3 = 496
nir_intrinsic_load_shared_lock_nv = 497
nir_intrinsic_load_shared_uniform_block_intel = 498
nir_intrinsic_load_simd_width_intel = 499
nir_intrinsic_load_sm_count_nv = 500
nir_intrinsic_load_sm_id_nv = 501
nir_intrinsic_load_smem_amd = 502
nir_intrinsic_load_ssbo = 503
nir_intrinsic_load_ssbo_address = 504
nir_intrinsic_load_ssbo_block_intel = 505
nir_intrinsic_load_ssbo_intel = 506
nir_intrinsic_load_ssbo_ir3 = 507
nir_intrinsic_load_ssbo_uniform_block_intel = 508
nir_intrinsic_load_stack = 509
nir_intrinsic_load_stat_query_address_agx = 510
nir_intrinsic_load_streamout_buffer_amd = 511
nir_intrinsic_load_streamout_config_amd = 512
nir_intrinsic_load_streamout_offset_amd = 513
nir_intrinsic_load_streamout_write_index_amd = 514
nir_intrinsic_load_subgroup_eq_mask = 515
nir_intrinsic_load_subgroup_ge_mask = 516
nir_intrinsic_load_subgroup_gt_mask = 517
nir_intrinsic_load_subgroup_id = 518
nir_intrinsic_load_subgroup_id_shift_ir3 = 519
nir_intrinsic_load_subgroup_invocation = 520
nir_intrinsic_load_subgroup_le_mask = 521
nir_intrinsic_load_subgroup_lt_mask = 522
nir_intrinsic_load_subgroup_size = 523
nir_intrinsic_load_sysval_agx = 524
nir_intrinsic_load_sysval_nv = 525
nir_intrinsic_load_task_payload = 526
nir_intrinsic_load_task_ring_entry_amd = 527
nir_intrinsic_load_tcs_header_ir3 = 528
nir_intrinsic_load_tcs_in_param_base_r600 = 529
nir_intrinsic_load_tcs_mem_attrib_stride = 530
nir_intrinsic_load_tcs_num_patches_amd = 531
nir_intrinsic_load_tcs_out_param_base_r600 = 532
nir_intrinsic_load_tcs_primitive_mode_amd = 533
nir_intrinsic_load_tcs_rel_patch_id_r600 = 534
nir_intrinsic_load_tcs_tess_factor_base_r600 = 535
nir_intrinsic_load_tcs_tess_levels_to_tes_amd = 536
nir_intrinsic_load_tess_coord = 537
nir_intrinsic_load_tess_coord_xy = 538
nir_intrinsic_load_tess_factor_base_ir3 = 539
nir_intrinsic_load_tess_level_inner = 540
nir_intrinsic_load_tess_level_inner_default = 541
nir_intrinsic_load_tess_level_outer = 542
nir_intrinsic_load_tess_level_outer_default = 543
nir_intrinsic_load_tess_param_base_ir3 = 544
nir_intrinsic_load_tess_param_buffer_poly = 545
nir_intrinsic_load_tess_rel_patch_id_amd = 546
nir_intrinsic_load_tex_sprite_mask_agx = 547
nir_intrinsic_load_texture_handle_agx = 548
nir_intrinsic_load_texture_scale = 549
nir_intrinsic_load_texture_size_etna = 550
nir_intrinsic_load_tlb_color_brcm = 551
nir_intrinsic_load_topology_id_intel = 552
nir_intrinsic_load_typed_buffer_amd = 553
nir_intrinsic_load_uav_ir3 = 554
nir_intrinsic_load_ubo = 555
nir_intrinsic_load_ubo_uniform_block_intel = 556
nir_intrinsic_load_ubo_vec4 = 557
nir_intrinsic_load_uniform = 558
nir_intrinsic_load_user_clip_plane = 559
nir_intrinsic_load_user_data_amd = 560
nir_intrinsic_load_uvs_index_agx = 561
nir_intrinsic_load_vbo_base_agx = 562
nir_intrinsic_load_vbo_stride_agx = 563
nir_intrinsic_load_vector_arg_amd = 564
nir_intrinsic_load_vertex_id = 565
nir_intrinsic_load_vertex_id_zero_base = 566
nir_intrinsic_load_view_index = 567
nir_intrinsic_load_viewport_offset = 568
nir_intrinsic_load_viewport_scale = 569
nir_intrinsic_load_viewport_x_offset = 570
nir_intrinsic_load_viewport_x_scale = 571
nir_intrinsic_load_viewport_y_offset = 572
nir_intrinsic_load_viewport_y_scale = 573
nir_intrinsic_load_viewport_z_offset = 574
nir_intrinsic_load_viewport_z_scale = 575
nir_intrinsic_load_vs_output_buffer_poly = 576
nir_intrinsic_load_vs_outputs_poly = 577
nir_intrinsic_load_vs_primitive_stride_ir3 = 578
nir_intrinsic_load_vs_vertex_stride_ir3 = 579
nir_intrinsic_load_vulkan_descriptor = 580
nir_intrinsic_load_warp_id_arm = 581
nir_intrinsic_load_warp_id_nv = 582
nir_intrinsic_load_warp_max_id_arm = 583
nir_intrinsic_load_warps_per_sm_nv = 584
nir_intrinsic_load_work_dim = 585
nir_intrinsic_load_workgroup_id = 586
nir_intrinsic_load_workgroup_index = 587
nir_intrinsic_load_workgroup_num_input_primitives_amd = 588
nir_intrinsic_load_workgroup_num_input_vertices_amd = 589
nir_intrinsic_load_workgroup_size = 590
nir_intrinsic_load_xfb_address = 591
nir_intrinsic_load_xfb_index_buffer = 592
nir_intrinsic_load_xfb_size = 593
nir_intrinsic_load_xfb_state_address_gfx12_amd = 594
nir_intrinsic_masked_swizzle_amd = 595
nir_intrinsic_mbcnt_amd = 596
nir_intrinsic_memcpy_deref = 597
nir_intrinsic_nop = 598
nir_intrinsic_nop_amd = 599
nir_intrinsic_optimization_barrier_sgpr_amd = 600
nir_intrinsic_optimization_barrier_vgpr_amd = 601
nir_intrinsic_ordered_add_loop_gfx12_amd = 602
nir_intrinsic_ordered_xfb_counter_add_gfx11_amd = 603
nir_intrinsic_overwrite_tes_arguments_amd = 604
nir_intrinsic_overwrite_vs_arguments_amd = 605
nir_intrinsic_pin_cx_handle_nv = 606
nir_intrinsic_preamble_end_ir3 = 607
nir_intrinsic_preamble_start_ir3 = 608
nir_intrinsic_prefetch_sam_ir3 = 609
nir_intrinsic_prefetch_tex_ir3 = 610
nir_intrinsic_prefetch_ubo_ir3 = 611
nir_intrinsic_printf = 612
nir_intrinsic_printf_abort = 613
nir_intrinsic_quad_ballot_agx = 614
nir_intrinsic_quad_broadcast = 615
nir_intrinsic_quad_swap_diagonal = 616
nir_intrinsic_quad_swap_horizontal = 617
nir_intrinsic_quad_swap_vertical = 618
nir_intrinsic_quad_swizzle_amd = 619
nir_intrinsic_quad_vote_all = 620
nir_intrinsic_quad_vote_any = 621
nir_intrinsic_r600_indirect_vertex_at_index = 622
nir_intrinsic_ray_intersection_ir3 = 623
nir_intrinsic_read_attribute_payload_intel = 624
nir_intrinsic_read_first_invocation = 625
nir_intrinsic_read_getlast_ir3 = 626
nir_intrinsic_read_invocation = 627
nir_intrinsic_read_invocation_cond_ir3 = 628
nir_intrinsic_reduce = 629
nir_intrinsic_reduce_clusters_ir3 = 630
nir_intrinsic_report_ray_intersection = 631
nir_intrinsic_resource_intel = 632
nir_intrinsic_rotate = 633
nir_intrinsic_rq_confirm_intersection = 634
nir_intrinsic_rq_generate_intersection = 635
nir_intrinsic_rq_initialize = 636
nir_intrinsic_rq_load = 637
nir_intrinsic_rq_proceed = 638
nir_intrinsic_rq_terminate = 639
nir_intrinsic_rt_execute_callable = 640
nir_intrinsic_rt_resume = 641
nir_intrinsic_rt_return_amd = 642
nir_intrinsic_rt_trace_ray = 643
nir_intrinsic_sample_mask_agx = 644
nir_intrinsic_select_vertex_poly = 645
nir_intrinsic_sendmsg_amd = 646
nir_intrinsic_set_vertex_and_primitive_count = 647
nir_intrinsic_shader_clock = 648
nir_intrinsic_shared_append_amd = 649
nir_intrinsic_shared_atomic = 650
nir_intrinsic_shared_atomic_swap = 651
nir_intrinsic_shared_consume_amd = 652
nir_intrinsic_shuffle = 653
nir_intrinsic_shuffle_down = 654
nir_intrinsic_shuffle_down_uniform_ir3 = 655
nir_intrinsic_shuffle_up = 656
nir_intrinsic_shuffle_up_uniform_ir3 = 657
nir_intrinsic_shuffle_xor = 658
nir_intrinsic_shuffle_xor_uniform_ir3 = 659
nir_intrinsic_sleep_amd = 660
nir_intrinsic_sparse_residency_code_and = 661
nir_intrinsic_ssa_bar_nv = 662
nir_intrinsic_ssbo_atomic = 663
nir_intrinsic_ssbo_atomic_ir3 = 664
nir_intrinsic_ssbo_atomic_swap = 665
nir_intrinsic_ssbo_atomic_swap_ir3 = 666
nir_intrinsic_stack_map_agx = 667
nir_intrinsic_stack_unmap_agx = 668
nir_intrinsic_store_agx = 669
nir_intrinsic_store_buffer_amd = 670
nir_intrinsic_store_combined_output_pan = 671
nir_intrinsic_store_const_ir3 = 672
nir_intrinsic_store_deref = 673
nir_intrinsic_store_deref_block_intel = 674
nir_intrinsic_store_global = 675
nir_intrinsic_store_global_2x32 = 676
nir_intrinsic_store_global_amd = 677
nir_intrinsic_store_global_block_intel = 678
nir_intrinsic_store_global_etna = 679
nir_intrinsic_store_global_ir3 = 680
nir_intrinsic_store_hit_attrib_amd = 681
nir_intrinsic_store_local_pixel_agx = 682
nir_intrinsic_store_local_shared_r600 = 683
nir_intrinsic_store_output = 684
nir_intrinsic_store_per_primitive_output = 685
nir_intrinsic_store_per_primitive_payload_intel = 686
nir_intrinsic_store_per_vertex_output = 687
nir_intrinsic_store_per_view_output = 688
nir_intrinsic_store_preamble = 689
nir_intrinsic_store_raw_output_pan = 690
nir_intrinsic_store_reg = 691
nir_intrinsic_store_reg_indirect = 692
nir_intrinsic_store_scalar_arg_amd = 693
nir_intrinsic_store_scratch = 694
nir_intrinsic_store_shared = 695
nir_intrinsic_store_shared2_amd = 696
nir_intrinsic_store_shared_block_intel = 697
nir_intrinsic_store_shared_ir3 = 698
nir_intrinsic_store_shared_unlock_nv = 699
nir_intrinsic_store_ssbo = 700
nir_intrinsic_store_ssbo_block_intel = 701
nir_intrinsic_store_ssbo_intel = 702
nir_intrinsic_store_ssbo_ir3 = 703
nir_intrinsic_store_stack = 704
nir_intrinsic_store_task_payload = 705
nir_intrinsic_store_tf_r600 = 706
nir_intrinsic_store_tlb_sample_color_v3d = 707
nir_intrinsic_store_uvs_agx = 708
nir_intrinsic_store_vector_arg_amd = 709
nir_intrinsic_store_zs_agx = 710
nir_intrinsic_strict_wqm_coord_amd = 711
nir_intrinsic_subfm_nv = 712
nir_intrinsic_suclamp_nv = 713
nir_intrinsic_sueau_nv = 714
nir_intrinsic_suldga_nv = 715
nir_intrinsic_sustga_nv = 716
nir_intrinsic_task_payload_atomic = 717
nir_intrinsic_task_payload_atomic_swap = 718
nir_intrinsic_terminate = 719
nir_intrinsic_terminate_if = 720
nir_intrinsic_terminate_ray = 721
nir_intrinsic_trace_ray = 722
nir_intrinsic_trace_ray_intel = 723
nir_intrinsic_unit_test_amd = 724
nir_intrinsic_unit_test_divergent_amd = 725
nir_intrinsic_unit_test_uniform_amd = 726
nir_intrinsic_unpin_cx_handle_nv = 727
nir_intrinsic_use = 728
nir_intrinsic_vild_nv = 729
nir_intrinsic_vote_all = 730
nir_intrinsic_vote_any = 731
nir_intrinsic_vote_feq = 732
nir_intrinsic_vote_ieq = 733
nir_intrinsic_vulkan_resource_index = 734
nir_intrinsic_vulkan_resource_reindex = 735
nir_intrinsic_write_invocation_amd = 736
nir_intrinsic_xfb_counter_sub_gfx11_amd = 737
nir_last_intrinsic = 737
nir_num_intrinsics = 738
c__EA_nir_intrinsic_op = ctypes.c_uint32 # enum
struct_nir_intrinsic_instr._pack_ = 1 # source:False
struct_nir_intrinsic_instr._fields_ = [
    ('instr', struct_nir_instr),
    ('intrinsic', c__EA_nir_intrinsic_op),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('def', struct_nir_def),
    ('num_components', ctypes.c_ubyte),
    ('PADDING_1', ctypes.c_ubyte * 3),
    ('const_index', ctypes.c_int32 * 8),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('src', struct_nir_src * 0),
]

try:
    lp_img_op_from_intrinsic = _libraries['FIXME_STUB'].lp_img_op_from_intrinsic
    lp_img_op_from_intrinsic.restype = None
    lp_img_op_from_intrinsic.argtypes = [ctypes.POINTER(struct_lp_img_params), ctypes.POINTER(struct_nir_intrinsic_instr)]
except AttributeError:
    pass
try:
    lp_packed_img_op_from_intrinsic = _libraries['FIXME_STUB'].lp_packed_img_op_from_intrinsic
    lp_packed_img_op_from_intrinsic.restype = uint32_t
    lp_packed_img_op_from_intrinsic.argtypes = [ctypes.POINTER(struct_nir_intrinsic_instr)]
except AttributeError:
    pass

# values for enumeration 'lp_nir_call_context_args'
lp_nir_call_context_args__enumvalues = {
    0: 'LP_NIR_CALL_CONTEXT_CONTEXT',
    1: 'LP_NIR_CALL_CONTEXT_RESOURCES',
    2: 'LP_NIR_CALL_CONTEXT_SHARED',
    3: 'LP_NIR_CALL_CONTEXT_SCRATCH',
    4: 'LP_NIR_CALL_CONTEXT_WORK_DIM',
    5: 'LP_NIR_CALL_CONTEXT_THREAD_ID_0',
    6: 'LP_NIR_CALL_CONTEXT_THREAD_ID_1',
    7: 'LP_NIR_CALL_CONTEXT_THREAD_ID_2',
    8: 'LP_NIR_CALL_CONTEXT_BLOCK_ID_0',
    9: 'LP_NIR_CALL_CONTEXT_BLOCK_ID_1',
    10: 'LP_NIR_CALL_CONTEXT_BLOCK_ID_2',
    11: 'LP_NIR_CALL_CONTEXT_GRID_SIZE_0',
    12: 'LP_NIR_CALL_CONTEXT_GRID_SIZE_1',
    13: 'LP_NIR_CALL_CONTEXT_GRID_SIZE_2',
    14: 'LP_NIR_CALL_CONTEXT_BLOCK_SIZE_0',
    15: 'LP_NIR_CALL_CONTEXT_BLOCK_SIZE_1',
    16: 'LP_NIR_CALL_CONTEXT_BLOCK_SIZE_2',
    17: 'LP_NIR_CALL_CONTEXT_MAX_ARGS',
}
LP_NIR_CALL_CONTEXT_CONTEXT = 0
LP_NIR_CALL_CONTEXT_RESOURCES = 1
LP_NIR_CALL_CONTEXT_SHARED = 2
LP_NIR_CALL_CONTEXT_SCRATCH = 3
LP_NIR_CALL_CONTEXT_WORK_DIM = 4
LP_NIR_CALL_CONTEXT_THREAD_ID_0 = 5
LP_NIR_CALL_CONTEXT_THREAD_ID_1 = 6
LP_NIR_CALL_CONTEXT_THREAD_ID_2 = 7
LP_NIR_CALL_CONTEXT_BLOCK_ID_0 = 8
LP_NIR_CALL_CONTEXT_BLOCK_ID_1 = 9
LP_NIR_CALL_CONTEXT_BLOCK_ID_2 = 10
LP_NIR_CALL_CONTEXT_GRID_SIZE_0 = 11
LP_NIR_CALL_CONTEXT_GRID_SIZE_1 = 12
LP_NIR_CALL_CONTEXT_GRID_SIZE_2 = 13
LP_NIR_CALL_CONTEXT_BLOCK_SIZE_0 = 14
LP_NIR_CALL_CONTEXT_BLOCK_SIZE_1 = 15
LP_NIR_CALL_CONTEXT_BLOCK_SIZE_2 = 16
LP_NIR_CALL_CONTEXT_MAX_ARGS = 17
lp_nir_call_context_args = ctypes.c_uint32 # enum
try:
    lp_build_cs_func_call_context = _libraries['FIXME_STUB'].lp_build_cs_func_call_context
    lp_build_cs_func_call_context.restype = LLVMTypeRef
    lp_build_cs_func_call_context.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.c_int32, LLVMTypeRef, LLVMTypeRef]
except AttributeError:
    pass
try:
    lp_build_struct_get_ptr2 = _libraries['FIXME_STUB'].lp_build_struct_get_ptr2
    lp_build_struct_get_ptr2.restype = LLVMValueRef
    lp_build_struct_get_ptr2.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMTypeRef, LLVMValueRef, ctypes.c_uint32, ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
try:
    lp_build_struct_get2 = _libraries['FIXME_STUB'].lp_build_struct_get2
    lp_build_struct_get2.restype = LLVMValueRef
    lp_build_struct_get2.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMTypeRef, LLVMValueRef, ctypes.c_uint32, ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
try:
    lp_build_array_get_ptr2 = _libraries['FIXME_STUB'].lp_build_array_get_ptr2
    lp_build_array_get_ptr2.restype = LLVMValueRef
    lp_build_array_get_ptr2.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMTypeRef, LLVMValueRef, LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_array_get2 = _libraries['FIXME_STUB'].lp_build_array_get2
    lp_build_array_get2.restype = LLVMValueRef
    lp_build_array_get2.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMTypeRef, LLVMValueRef, LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_pointer_get2 = _libraries['FIXME_STUB'].lp_build_pointer_get2
    lp_build_pointer_get2.restype = LLVMValueRef
    lp_build_pointer_get2.argtypes = [LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_pointer_get_unaligned2 = _libraries['FIXME_STUB'].lp_build_pointer_get_unaligned2
    lp_build_pointer_get_unaligned2.restype = LLVMValueRef
    lp_build_pointer_get_unaligned2.argtypes = [LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, LLVMValueRef, ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_build_pointer_set = _libraries['FIXME_STUB'].lp_build_pointer_set
    lp_build_pointer_set.restype = None
    lp_build_pointer_set.argtypes = [LLVMBuilderRef, LLVMValueRef, LLVMValueRef, LLVMValueRef]
except AttributeError:
    pass
try:
    lp_build_pointer_set_unaligned = _libraries['FIXME_STUB'].lp_build_pointer_set_unaligned
    lp_build_pointer_set_unaligned.restype = None
    lp_build_pointer_set_unaligned.argtypes = [LLVMBuilderRef, LLVMValueRef, LLVMValueRef, LLVMValueRef, ctypes.c_uint32]
except AttributeError:
    pass
class struct_lp_jit_buffer(Structure):
    pass

class union_lp_jit_buffer_0(Union):
    pass

union_lp_jit_buffer_0._pack_ = 1 # source:False
union_lp_jit_buffer_0._fields_ = [
    ('u', ctypes.POINTER(ctypes.c_uint32)),
    ('f', ctypes.POINTER(ctypes.c_float)),
]

struct_lp_jit_buffer._pack_ = 1 # source:False
struct_lp_jit_buffer._anonymous_ = ('_0',)
struct_lp_jit_buffer._fields_ = [
    ('_0', union_lp_jit_buffer_0),
    ('num_elements', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]


# values for enumeration 'c__Ea_LP_JIT_BUFFER_BASE'
c__Ea_LP_JIT_BUFFER_BASE__enumvalues = {
    0: 'LP_JIT_BUFFER_BASE',
    1: 'LP_JIT_BUFFER_NUM_ELEMENTS',
    2: 'LP_JIT_BUFFER_NUM_FIELDS',
}
LP_JIT_BUFFER_BASE = 0
LP_JIT_BUFFER_NUM_ELEMENTS = 1
LP_JIT_BUFFER_NUM_FIELDS = 2
c__Ea_LP_JIT_BUFFER_BASE = ctypes.c_uint32 # enum
try:
    lp_llvm_descriptor_base = _libraries['FIXME_STUB'].lp_llvm_descriptor_base
    lp_llvm_descriptor_base.restype = LLVMValueRef
    lp_llvm_descriptor_base.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMValueRef, LLVMValueRef, ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_llvm_buffer_base = _libraries['FIXME_STUB'].lp_llvm_buffer_base
    lp_llvm_buffer_base.restype = LLVMValueRef
    lp_llvm_buffer_base.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMValueRef, LLVMValueRef, ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_llvm_buffer_num_elements = _libraries['FIXME_STUB'].lp_llvm_buffer_num_elements
    lp_llvm_buffer_num_elements.restype = LLVMValueRef
    lp_llvm_buffer_num_elements.argtypes = [ctypes.POINTER(struct_gallivm_state), LLVMValueRef, LLVMValueRef, ctypes.c_uint32]
except AttributeError:
    pass

# values for enumeration 'c__Ea_LP_JIT_TEXTURE_BASE'
c__Ea_LP_JIT_TEXTURE_BASE__enumvalues = {
    0: 'LP_JIT_TEXTURE_BASE',
    1: 'LP_JIT_TEXTURE_WIDTH',
    2: 'LP_JIT_TEXTURE_HEIGHT',
    3: 'LP_JIT_TEXTURE_DEPTH',
    4: 'LP_JIT_TEXTURE_ROW_STRIDE',
    5: 'LP_JIT_TEXTURE_IMG_STRIDE',
    6: 'LP_JIT_TEXTURE_FIRST_LEVEL',
    7: 'LP_JIT_TEXTURE_LAST_LEVEL',
    8: 'LP_JIT_TEXTURE_MIP_OFFSETS',
    9: 'LP_JIT_SAMPLER_INDEX_DUMMY',
    10: 'LP_JIT_TEXTURE_NUM_FIELDS',
}
LP_JIT_TEXTURE_BASE = 0
LP_JIT_TEXTURE_WIDTH = 1
LP_JIT_TEXTURE_HEIGHT = 2
LP_JIT_TEXTURE_DEPTH = 3
LP_JIT_TEXTURE_ROW_STRIDE = 4
LP_JIT_TEXTURE_IMG_STRIDE = 5
LP_JIT_TEXTURE_FIRST_LEVEL = 6
LP_JIT_TEXTURE_LAST_LEVEL = 7
LP_JIT_TEXTURE_MIP_OFFSETS = 8
LP_JIT_SAMPLER_INDEX_DUMMY = 9
LP_JIT_TEXTURE_NUM_FIELDS = 10
c__Ea_LP_JIT_TEXTURE_BASE = ctypes.c_uint32 # enum
class struct_lp_jit_sampler(Structure):
    pass

struct_lp_jit_sampler._pack_ = 1 # source:False
struct_lp_jit_sampler._fields_ = [
    ('min_lod', ctypes.c_float),
    ('max_lod', ctypes.c_float),
    ('lod_bias', ctypes.c_float),
    ('border_color', ctypes.c_float * 4),
]


# values for enumeration 'c__Ea_LP_JIT_SAMPLER_MIN_LOD'
c__Ea_LP_JIT_SAMPLER_MIN_LOD__enumvalues = {
    0: 'LP_JIT_SAMPLER_MIN_LOD',
    1: 'LP_JIT_SAMPLER_MAX_LOD',
    2: 'LP_JIT_SAMPLER_LOD_BIAS',
    3: 'LP_JIT_SAMPLER_BORDER_COLOR',
    4: 'LP_JIT_SAMPLER_NUM_FIELDS',
}
LP_JIT_SAMPLER_MIN_LOD = 0
LP_JIT_SAMPLER_MAX_LOD = 1
LP_JIT_SAMPLER_LOD_BIAS = 2
LP_JIT_SAMPLER_BORDER_COLOR = 3
LP_JIT_SAMPLER_NUM_FIELDS = 4
c__Ea_LP_JIT_SAMPLER_MIN_LOD = ctypes.c_uint32 # enum
class struct_lp_jit_image(Structure):
    pass

struct_lp_jit_image._pack_ = 1 # source:False
struct_lp_jit_image._fields_ = [
    ('base', ctypes.POINTER(None)),
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint16),
    ('depth', ctypes.c_uint16),
    ('num_samples', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('sample_stride', ctypes.c_uint32),
    ('row_stride', ctypes.c_uint32),
    ('img_stride', ctypes.c_uint32),
    ('residency', ctypes.POINTER(None)),
    ('base_offset', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]


# values for enumeration 'c__Ea_LP_JIT_IMAGE_BASE'
c__Ea_LP_JIT_IMAGE_BASE__enumvalues = {
    0: 'LP_JIT_IMAGE_BASE',
    1: 'LP_JIT_IMAGE_WIDTH',
    2: 'LP_JIT_IMAGE_HEIGHT',
    3: 'LP_JIT_IMAGE_DEPTH',
    4: 'LP_JIT_IMAGE_NUM_SAMPLES',
    5: 'LP_JIT_IMAGE_SAMPLE_STRIDE',
    6: 'LP_JIT_IMAGE_ROW_STRIDE',
    7: 'LP_JIT_IMAGE_IMG_STRIDE',
    8: 'LP_JIT_IMAGE_RESIDENCY',
    9: 'LP_JIT_IMAGE_BASE_OFFSET',
    10: 'LP_JIT_IMAGE_NUM_FIELDS',
}
LP_JIT_IMAGE_BASE = 0
LP_JIT_IMAGE_WIDTH = 1
LP_JIT_IMAGE_HEIGHT = 2
LP_JIT_IMAGE_DEPTH = 3
LP_JIT_IMAGE_NUM_SAMPLES = 4
LP_JIT_IMAGE_SAMPLE_STRIDE = 5
LP_JIT_IMAGE_ROW_STRIDE = 6
LP_JIT_IMAGE_IMG_STRIDE = 7
LP_JIT_IMAGE_RESIDENCY = 8
LP_JIT_IMAGE_BASE_OFFSET = 9
LP_JIT_IMAGE_NUM_FIELDS = 10
c__Ea_LP_JIT_IMAGE_BASE = ctypes.c_uint32 # enum
class struct_lp_jit_resources(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('constants', struct_lp_jit_buffer * 16),
    ('ssbos', struct_lp_jit_buffer * 32),
    ('textures', struct_lp_jit_texture * 128),
    ('samplers', struct_lp_jit_sampler * 32),
    ('images', struct_lp_jit_image * 64),
     ]


# values for enumeration 'c__Ea_LP_JIT_RES_CONSTANTS'
c__Ea_LP_JIT_RES_CONSTANTS__enumvalues = {
    0: 'LP_JIT_RES_CONSTANTS',
    1: 'LP_JIT_RES_SSBOS',
    2: 'LP_JIT_RES_TEXTURES',
    3: 'LP_JIT_RES_SAMPLERS',
    4: 'LP_JIT_RES_IMAGES',
    5: 'LP_JIT_RES_COUNT',
}
LP_JIT_RES_CONSTANTS = 0
LP_JIT_RES_SSBOS = 1
LP_JIT_RES_TEXTURES = 2
LP_JIT_RES_SAMPLERS = 3
LP_JIT_RES_IMAGES = 4
LP_JIT_RES_COUNT = 5
c__Ea_LP_JIT_RES_CONSTANTS = ctypes.c_uint32 # enum
try:
    lp_build_jit_resources_type = _libraries['FIXME_STUB'].lp_build_jit_resources_type
    lp_build_jit_resources_type.restype = LLVMTypeRef
    lp_build_jit_resources_type.argtypes = [ctypes.POINTER(struct_gallivm_state)]
except AttributeError:
    pass

# values for enumeration 'c__Ea_LP_JIT_VERTEX_HEADER_VERTEX_ID'
c__Ea_LP_JIT_VERTEX_HEADER_VERTEX_ID__enumvalues = {
    0: 'LP_JIT_VERTEX_HEADER_VERTEX_ID',
    1: 'LP_JIT_VERTEX_HEADER_CLIP_POS',
    2: 'LP_JIT_VERTEX_HEADER_DATA',
}
LP_JIT_VERTEX_HEADER_VERTEX_ID = 0
LP_JIT_VERTEX_HEADER_CLIP_POS = 1
LP_JIT_VERTEX_HEADER_DATA = 2
c__Ea_LP_JIT_VERTEX_HEADER_VERTEX_ID = ctypes.c_uint32 # enum
try:
    lp_build_create_jit_vertex_header_type = _libraries['FIXME_STUB'].lp_build_create_jit_vertex_header_type
    lp_build_create_jit_vertex_header_type.restype = LLVMTypeRef
    lp_build_create_jit_vertex_header_type.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.c_int32]
except AttributeError:
    pass
class struct_lp_sampler_dynamic_state(Structure):
    pass

try:
    lp_build_jit_fill_sampler_dynamic_state = _libraries['FIXME_STUB'].lp_build_jit_fill_sampler_dynamic_state
    lp_build_jit_fill_sampler_dynamic_state.restype = None
    lp_build_jit_fill_sampler_dynamic_state.argtypes = [ctypes.POINTER(struct_lp_sampler_dynamic_state)]
except AttributeError:
    pass
try:
    lp_build_jit_fill_image_dynamic_state = _libraries['FIXME_STUB'].lp_build_jit_fill_image_dynamic_state
    lp_build_jit_fill_image_dynamic_state.restype = None
    lp_build_jit_fill_image_dynamic_state.argtypes = [ctypes.POINTER(struct_lp_sampler_dynamic_state)]
except AttributeError:
    pass
try:
    lp_build_sample_function_type = _libraries['FIXME_STUB'].lp_build_sample_function_type
    lp_build_sample_function_type.restype = LLVMTypeRef
    lp_build_sample_function_type.argtypes = [ctypes.POINTER(struct_gallivm_state), uint32_t]
except AttributeError:
    pass
try:
    lp_build_size_function_type = _libraries['FIXME_STUB'].lp_build_size_function_type
    lp_build_size_function_type.restype = LLVMTypeRef
    lp_build_size_function_type.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(struct_lp_sampler_size_query_params)]
except AttributeError:
    pass
try:
    lp_build_image_function_type = _libraries['FIXME_STUB'].lp_build_image_function_type
    lp_build_image_function_type.restype = LLVMTypeRef
    lp_build_image_function_type.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(struct_lp_img_params), ctypes.c_bool, ctypes.c_bool]
except AttributeError:
    pass
class struct_lp_texture_handle_state(Structure):
    pass

class struct_lp_static_texture_state(Structure):
    pass


# values for enumeration 'c_uint32'
c_uint32__enumvalues = {
    0: 'PIPE_BUFFER',
    1: 'PIPE_TEXTURE_1D',
    2: 'PIPE_TEXTURE_2D',
    3: 'PIPE_TEXTURE_3D',
    4: 'PIPE_TEXTURE_CUBE',
    5: 'PIPE_TEXTURE_RECT',
    6: 'PIPE_TEXTURE_1D_ARRAY',
    7: 'PIPE_TEXTURE_2D_ARRAY',
    8: 'PIPE_TEXTURE_CUBE_ARRAY',
    9: 'PIPE_MAX_TEXTURE_TYPES',
}
PIPE_BUFFER = 0
PIPE_TEXTURE_1D = 1
PIPE_TEXTURE_2D = 2
PIPE_TEXTURE_3D = 3
PIPE_TEXTURE_CUBE = 4
PIPE_TEXTURE_RECT = 5
PIPE_TEXTURE_1D_ARRAY = 6
PIPE_TEXTURE_2D_ARRAY = 7
PIPE_TEXTURE_CUBE_ARRAY = 8
PIPE_MAX_TEXTURE_TYPES = 9
c_uint32 = ctypes.c_uint32 # enum
struct_lp_static_texture_state._pack_ = 1 # source:False
struct_lp_static_texture_state._fields_ = [
    ('format', pipe_format),
    ('res_format', pipe_format),
    ('swizzle_r', ctypes.c_uint32, 3),
    ('swizzle_g', ctypes.c_uint32, 3),
    ('swizzle_b', ctypes.c_uint32, 3),
    ('swizzle_a', ctypes.c_uint32, 3),
    ('target', c_uint32, 5),
    ('res_target', c_uint32, 5),
    ('pot_width', ctypes.c_uint32, 1),
    ('pot_height', ctypes.c_uint32, 1),
    ('pot_depth', ctypes.c_uint32, 1),
    ('level_zero_only', ctypes.c_uint32, 1),
    ('tiled', ctypes.c_uint32, 1),
    ('tiled_samples', ctypes.c_uint32, 5),
]

struct_lp_texture_handle_state._pack_ = 1 # source:False
struct_lp_texture_handle_state._fields_ = [
    ('static_state', struct_lp_static_texture_state),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('dynamic_state', struct_lp_jit_texture),
]

class struct_lp_texture_functions(Structure):
    pass

struct_lp_texture_functions._pack_ = 1 # source:False
struct_lp_texture_functions._fields_ = [
    ('sample_functions', ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(None)))),
    ('sampler_count', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('fetch_functions', ctypes.POINTER(ctypes.POINTER(None))),
    ('size_function', ctypes.POINTER(None)),
    ('samples_function', ctypes.POINTER(None)),
    ('image_functions', ctypes.POINTER(ctypes.POINTER(None))),
    ('state', struct_lp_texture_handle_state),
    ('sampled', ctypes.c_bool),
    ('storage', ctypes.c_bool),
    ('PADDING_1', ctypes.c_ubyte * 6),
    ('matrix', ctypes.POINTER(None)),
]

class struct_lp_texture_handle(Structure):
    pass

struct_lp_texture_handle._pack_ = 1 # source:False
struct_lp_texture_handle._fields_ = [
    ('functions', ctypes.POINTER(None)),
    ('sampler_index', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_lp_jit_bindless_texture(Structure):
    pass

struct_lp_jit_bindless_texture._pack_ = 1 # source:False
struct_lp_jit_bindless_texture._fields_ = [
    ('base', ctypes.POINTER(None)),
    ('residency', ctypes.POINTER(None)),
    ('sampler_index', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_lp_descriptor(Structure):
    pass

class union_lp_descriptor_0(Union):
    pass

class struct_lp_descriptor_0_0(Structure):
    pass

struct_lp_descriptor_0_0._pack_ = 1 # source:False
struct_lp_descriptor_0_0._fields_ = [
    ('texture', struct_lp_jit_bindless_texture),
    ('sampler', struct_lp_jit_sampler),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_lp_descriptor_0_1(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('image', struct_lp_jit_image),
     ]

union_lp_descriptor_0._pack_ = 1 # source:False
union_lp_descriptor_0._anonymous_ = ('_0', '_1',)
union_lp_descriptor_0._fields_ = [
    ('_0', struct_lp_descriptor_0_0),
    ('_1', struct_lp_descriptor_0_1),
    ('buffer', struct_lp_jit_buffer),
    ('accel_struct', ctypes.c_uint64),
    ('PADDING_0', ctypes.c_ubyte * 48),
]

struct_lp_descriptor._pack_ = 1 # source:False
struct_lp_descriptor._anonymous_ = ('_0',)
struct_lp_descriptor._fields_ = [
    ('_0', union_lp_descriptor_0),
    ('functions', ctypes.POINTER(None)),
]

try:
    lp_mantissa = _libraries['FIXME_STUB'].lp_mantissa
    lp_mantissa.restype = ctypes.c_uint32
    lp_mantissa.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_const_shift = _libraries['FIXME_STUB'].lp_const_shift
    lp_const_shift.restype = ctypes.c_uint32
    lp_const_shift.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_const_offset = _libraries['FIXME_STUB'].lp_const_offset
    lp_const_offset.restype = ctypes.c_uint32
    lp_const_offset.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_const_scale = _libraries['FIXME_STUB'].lp_const_scale
    lp_const_scale.restype = ctypes.c_double
    lp_const_scale.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_const_min = _libraries['FIXME_STUB'].lp_const_min
    lp_const_min.restype = ctypes.c_double
    lp_const_min.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_const_max = _libraries['FIXME_STUB'].lp_const_max
    lp_const_max.restype = ctypes.c_double
    lp_const_max.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_const_eps = _libraries['FIXME_STUB'].lp_const_eps
    lp_const_eps.restype = ctypes.c_double
    lp_const_eps.argtypes = [struct_lp_type]
except AttributeError:
    pass
try:
    lp_build_undef = _libraries['FIXME_STUB'].lp_build_undef
    lp_build_undef.restype = LLVMValueRef
    lp_build_undef.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type]
except AttributeError:
    pass
try:
    lp_build_zero = _libraries['FIXME_STUB'].lp_build_zero
    lp_build_zero.restype = LLVMValueRef
    lp_build_zero.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type]
except AttributeError:
    pass
try:
    lp_build_one = _libraries['FIXME_STUB'].lp_build_one
    lp_build_one.restype = LLVMValueRef
    lp_build_one.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type]
except AttributeError:
    pass
try:
    lp_build_const_elem = _libraries['FIXME_STUB'].lp_build_const_elem
    lp_build_const_elem.restype = LLVMValueRef
    lp_build_const_elem.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type, ctypes.c_double]
except AttributeError:
    pass
try:
    lp_build_const_vec = _libraries['FIXME_STUB'].lp_build_const_vec
    lp_build_const_vec.restype = LLVMValueRef
    lp_build_const_vec.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type, ctypes.c_double]
except AttributeError:
    pass
try:
    lp_build_const_int_vec = _libraries['FIXME_STUB'].lp_build_const_int_vec
    lp_build_const_int_vec.restype = LLVMValueRef
    lp_build_const_int_vec.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type, ctypes.c_int64]
except AttributeError:
    pass
try:
    lp_build_const_channel_vec = _libraries['FIXME_STUB'].lp_build_const_channel_vec
    lp_build_const_channel_vec.restype = LLVMValueRef
    lp_build_const_channel_vec.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type]
except AttributeError:
    pass
try:
    lp_build_const_aos = _libraries['FIXME_STUB'].lp_build_const_aos
    lp_build_const_aos.restype = LLVMValueRef
    lp_build_const_aos.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.POINTER(ctypes.c_ubyte)]
except AttributeError:
    pass
try:
    lp_build_const_mask_aos = _libraries['FIXME_STUB'].lp_build_const_mask_aos
    lp_build_const_mask_aos.restype = LLVMValueRef
    lp_build_const_mask_aos.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type, ctypes.c_uint32, ctypes.c_uint32]
except AttributeError:
    pass
try:
    lp_build_const_mask_aos_swizzled = _libraries['FIXME_STUB'].lp_build_const_mask_aos_swizzled
    lp_build_const_mask_aos_swizzled.restype = LLVMValueRef
    lp_build_const_mask_aos_swizzled.argtypes = [ctypes.POINTER(struct_gallivm_state), struct_lp_type, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_ubyte)]
except AttributeError:
    pass
try:
    lp_build_const_int32 = _libraries['FIXME_STUB'].lp_build_const_int32
    lp_build_const_int32.restype = LLVMValueRef
    lp_build_const_int32.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.c_int32]
except AttributeError:
    pass
int64_t = ctypes.c_int64
try:
    lp_build_const_int64 = _libraries['FIXME_STUB'].lp_build_const_int64
    lp_build_const_int64.restype = LLVMValueRef
    lp_build_const_int64.argtypes = [ctypes.POINTER(struct_gallivm_state), int64_t]
except AttributeError:
    pass
try:
    lp_build_const_float = _libraries['FIXME_STUB'].lp_build_const_float
    lp_build_const_float.restype = LLVMValueRef
    lp_build_const_float.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.c_float]
except AttributeError:
    pass
try:
    lp_build_const_double = _libraries['FIXME_STUB'].lp_build_const_double
    lp_build_const_double.restype = LLVMValueRef
    lp_build_const_double.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.c_float]
except AttributeError:
    pass
try:
    lp_build_const_int_pointer = _libraries['FIXME_STUB'].lp_build_const_int_pointer
    lp_build_const_int_pointer.restype = LLVMValueRef
    lp_build_const_int_pointer.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(None)]
except AttributeError:
    pass
try:
    lp_build_const_string = _libraries['FIXME_STUB'].lp_build_const_string
    lp_build_const_string.restype = LLVMValueRef
    lp_build_const_string.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
try:
    lp_build_const_func_pointer = _libraries['FIXME_STUB'].lp_build_const_func_pointer
    lp_build_const_func_pointer.restype = LLVMValueRef
    lp_build_const_func_pointer.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(None), LLVMTypeRef, ctypes.POINTER(ctypes.POINTER(struct_LLVMOpaqueType)), ctypes.c_uint32, ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
try:
    lp_build_const_func_pointer_from_type = _libraries['FIXME_STUB'].lp_build_const_func_pointer_from_type
    lp_build_const_func_pointer_from_type.restype = LLVMValueRef
    lp_build_const_func_pointer_from_type.argtypes = [ctypes.POINTER(struct_gallivm_state), ctypes.POINTER(None), LLVMTypeRef, ctypes.POINTER(ctypes.c_char)]
except AttributeError:
    pass
try:
    nir_serialize = _libraries['FIXME_STUB'].nir_serialize
    nir_serialize.restype = None
    nir_serialize.argtypes = [ctypes.POINTER(struct_blob), ctypes.POINTER(struct_nir_shader), ctypes.c_bool]
except AttributeError:
    pass
try:
    nir_deserialize = _libraries['FIXME_STUB'].nir_deserialize
    nir_deserialize.restype = ctypes.POINTER(struct_nir_shader)
    nir_deserialize.argtypes = [ctypes.POINTER(None), ctypes.POINTER(struct_nir_shader_compiler_options), ctypes.POINTER(struct_blob_reader)]
except AttributeError:
    pass
try:
    nir_serialize_function = _libraries['FIXME_STUB'].nir_serialize_function
    nir_serialize_function.restype = None
    nir_serialize_function.argtypes = [ctypes.POINTER(struct_blob), ctypes.POINTER(struct_nir_function)]
except AttributeError:
    pass
try:
    nir_deserialize_function = _libraries['FIXME_STUB'].nir_deserialize_function
    nir_deserialize_function.restype = ctypes.POINTER(struct_nir_function)
    nir_deserialize_function.argtypes = [ctypes.POINTER(None), ctypes.POINTER(struct_nir_shader_compiler_options), ctypes.POINTER(struct_blob_reader)]
except AttributeError:
    pass
__all__ = \
    ['DERIVATIVE_GROUP_LINEAR', 'DERIVATIVE_GROUP_NONE',
    'DERIVATIVE_GROUP_QUADS', 'FRAG_DEPTH_LAYOUT_ANY',
    'FRAG_DEPTH_LAYOUT_GREATER', 'FRAG_DEPTH_LAYOUT_LESS',
    'FRAG_DEPTH_LAYOUT_NONE', 'FRAG_DEPTH_LAYOUT_UNCHANGED',
    'FRAG_STENCIL_LAYOUT_ANY', 'FRAG_STENCIL_LAYOUT_GREATER',
    'FRAG_STENCIL_LAYOUT_LESS', 'FRAG_STENCIL_LAYOUT_NONE',
    'FRAG_STENCIL_LAYOUT_UNCHANGED', 'GLSL_SAMPLER_DIM_1D',
    'GLSL_SAMPLER_DIM_2D', 'GLSL_SAMPLER_DIM_3D',
    'GLSL_SAMPLER_DIM_BUF', 'GLSL_SAMPLER_DIM_CUBE',
    'GLSL_SAMPLER_DIM_EXTERNAL', 'GLSL_SAMPLER_DIM_MS',
    'GLSL_SAMPLER_DIM_RECT', 'GLSL_SAMPLER_DIM_SUBPASS',
    'GLSL_SAMPLER_DIM_SUBPASS_MS', 'GLSL_TYPE_ARRAY',
    'GLSL_TYPE_ATOMIC_UINT', 'GLSL_TYPE_BFLOAT16', 'GLSL_TYPE_BOOL',
    'GLSL_TYPE_COOPERATIVE_MATRIX', 'GLSL_TYPE_DOUBLE',
    'GLSL_TYPE_ERROR', 'GLSL_TYPE_FLOAT', 'GLSL_TYPE_FLOAT16',
    'GLSL_TYPE_FLOAT_E4M3FN', 'GLSL_TYPE_FLOAT_E5M2',
    'GLSL_TYPE_IMAGE', 'GLSL_TYPE_INT', 'GLSL_TYPE_INT16',
    'GLSL_TYPE_INT64', 'GLSL_TYPE_INT8', 'GLSL_TYPE_INTERFACE',
    'GLSL_TYPE_SAMPLER', 'GLSL_TYPE_STRUCT', 'GLSL_TYPE_SUBROUTINE',
    'GLSL_TYPE_TEXTURE', 'GLSL_TYPE_UINT', 'GLSL_TYPE_UINT16',
    'GLSL_TYPE_UINT64', 'GLSL_TYPE_UINT8', 'GLSL_TYPE_VOID',
    'LLVMArrayTypeKind', 'LLVMAtomicRMWBinOp',
    'LLVMAtomicRMWBinOpAdd', 'LLVMAtomicRMWBinOpAnd',
    'LLVMAtomicRMWBinOpFAdd', 'LLVMAtomicRMWBinOpFSub',
    'LLVMAtomicRMWBinOpMax', 'LLVMAtomicRMWBinOpMin',
    'LLVMAtomicRMWBinOpNand', 'LLVMAtomicRMWBinOpOr',
    'LLVMAtomicRMWBinOpSub', 'LLVMAtomicRMWBinOpUMax',
    'LLVMAtomicRMWBinOpUMin', 'LLVMAtomicRMWBinOpXchg',
    'LLVMAtomicRMWBinOpXor', 'LLVMAtomicRMWBinOp__enumvalues',
    'LLVMBFloatTypeKind', 'LLVMBasicBlockRef', 'LLVMBuilderRef',
    'LLVMDoubleTypeKind', 'LLVMFP128TypeKind', 'LLVMFloatTypeKind',
    'LLVMFunctionTypeKind', 'LLVMHalfTypeKind', 'LLVMIntEQ',
    'LLVMIntNE', 'LLVMIntPredicate', 'LLVMIntPredicate__enumvalues',
    'LLVMIntSGE', 'LLVMIntSGT', 'LLVMIntSLE', 'LLVMIntSLT',
    'LLVMIntUGE', 'LLVMIntUGT', 'LLVMIntULE', 'LLVMIntULT',
    'LLVMIntegerTypeKind', 'LLVMLabelTypeKind',
    'LLVMMetadataTypeKind', 'LLVMModuleRef', 'LLVMPPC_FP128TypeKind',
    'LLVMPointerTypeKind', 'LLVMScalableVectorTypeKind',
    'LLVMStructTypeKind', 'LLVMTokenTypeKind', 'LLVMTypeKind',
    'LLVMTypeKind__enumvalues', 'LLVMTypeRef', 'LLVMValueRef',
    'LLVMVectorTypeKind', 'LLVMVoidTypeKind', 'LLVMX86_AMXTypeKind',
    'LLVMX86_FP80TypeKind', 'LLVMX86_MMXTypeKind',
    'LP_BLD_TEX_MODIFIER_EXPLICIT_DERIV',
    'LP_BLD_TEX_MODIFIER_EXPLICIT_LOD',
    'LP_BLD_TEX_MODIFIER_LOD_BIAS', 'LP_BLD_TEX_MODIFIER_LOD_ZERO',
    'LP_BLD_TEX_MODIFIER_NONE', 'LP_BLD_TEX_MODIFIER_PROJECTED',
    'LP_JIT_BUFFER_BASE', 'LP_JIT_BUFFER_NUM_ELEMENTS',
    'LP_JIT_BUFFER_NUM_FIELDS', 'LP_JIT_IMAGE_BASE',
    'LP_JIT_IMAGE_BASE_OFFSET', 'LP_JIT_IMAGE_DEPTH',
    'LP_JIT_IMAGE_HEIGHT', 'LP_JIT_IMAGE_IMG_STRIDE',
    'LP_JIT_IMAGE_NUM_FIELDS', 'LP_JIT_IMAGE_NUM_SAMPLES',
    'LP_JIT_IMAGE_RESIDENCY', 'LP_JIT_IMAGE_ROW_STRIDE',
    'LP_JIT_IMAGE_SAMPLE_STRIDE', 'LP_JIT_IMAGE_WIDTH',
    'LP_JIT_RES_CONSTANTS', 'LP_JIT_RES_COUNT', 'LP_JIT_RES_IMAGES',
    'LP_JIT_RES_SAMPLERS', 'LP_JIT_RES_SSBOS', 'LP_JIT_RES_TEXTURES',
    'LP_JIT_SAMPLER_BORDER_COLOR', 'LP_JIT_SAMPLER_INDEX_DUMMY',
    'LP_JIT_SAMPLER_LOD_BIAS', 'LP_JIT_SAMPLER_MAX_LOD',
    'LP_JIT_SAMPLER_MIN_LOD', 'LP_JIT_SAMPLER_NUM_FIELDS',
    'LP_JIT_TEXTURE_BASE', 'LP_JIT_TEXTURE_DEPTH',
    'LP_JIT_TEXTURE_FIRST_LEVEL', 'LP_JIT_TEXTURE_HEIGHT',
    'LP_JIT_TEXTURE_IMG_STRIDE', 'LP_JIT_TEXTURE_LAST_LEVEL',
    'LP_JIT_TEXTURE_MIP_OFFSETS', 'LP_JIT_TEXTURE_NUM_FIELDS',
    'LP_JIT_TEXTURE_ROW_STRIDE', 'LP_JIT_TEXTURE_WIDTH',
    'LP_JIT_VERTEX_HEADER_CLIP_POS', 'LP_JIT_VERTEX_HEADER_DATA',
    'LP_JIT_VERTEX_HEADER_VERTEX_ID',
    'LP_NIR_CALL_CONTEXT_BLOCK_ID_0',
    'LP_NIR_CALL_CONTEXT_BLOCK_ID_1',
    'LP_NIR_CALL_CONTEXT_BLOCK_ID_2',
    'LP_NIR_CALL_CONTEXT_BLOCK_SIZE_0',
    'LP_NIR_CALL_CONTEXT_BLOCK_SIZE_1',
    'LP_NIR_CALL_CONTEXT_BLOCK_SIZE_2', 'LP_NIR_CALL_CONTEXT_CONTEXT',
    'LP_NIR_CALL_CONTEXT_GRID_SIZE_0',
    'LP_NIR_CALL_CONTEXT_GRID_SIZE_1',
    'LP_NIR_CALL_CONTEXT_GRID_SIZE_2', 'LP_NIR_CALL_CONTEXT_MAX_ARGS',
    'LP_NIR_CALL_CONTEXT_RESOURCES', 'LP_NIR_CALL_CONTEXT_SCRATCH',
    'LP_NIR_CALL_CONTEXT_SHARED', 'LP_NIR_CALL_CONTEXT_THREAD_ID_0',
    'LP_NIR_CALL_CONTEXT_THREAD_ID_1',
    'LP_NIR_CALL_CONTEXT_THREAD_ID_2', 'LP_NIR_CALL_CONTEXT_WORK_DIM',
    'LP_SAMPLER_LOD_PER_ELEMENT', 'LP_SAMPLER_LOD_PER_QUAD',
    'LP_SAMPLER_LOD_SCALAR', 'MESA_PRIM_COUNT', 'MESA_PRIM_LINES',
    'MESA_PRIM_LINES_ADJACENCY', 'MESA_PRIM_LINE_LOOP',
    'MESA_PRIM_LINE_STRIP', 'MESA_PRIM_LINE_STRIP_ADJACENCY',
    'MESA_PRIM_MAX', 'MESA_PRIM_PATCHES', 'MESA_PRIM_POINTS',
    'MESA_PRIM_POLYGON', 'MESA_PRIM_QUADS', 'MESA_PRIM_QUAD_STRIP',
    'MESA_PRIM_TRIANGLES', 'MESA_PRIM_TRIANGLES_ADJACENCY',
    'MESA_PRIM_TRIANGLE_FAN', 'MESA_PRIM_TRIANGLE_STRIP',
    'MESA_PRIM_TRIANGLE_STRIP_ADJACENCY', 'MESA_PRIM_UNKNOWN',
    'MESA_SHADER_ANY_HIT', 'MESA_SHADER_CALLABLE',
    'MESA_SHADER_CLOSEST_HIT', 'MESA_SHADER_COMPUTE',
    'MESA_SHADER_FRAGMENT', 'MESA_SHADER_GEOMETRY',
    'MESA_SHADER_INTERSECTION', 'MESA_SHADER_KERNEL',
    'MESA_SHADER_MESH', 'MESA_SHADER_MISS', 'MESA_SHADER_NONE',
    'MESA_SHADER_RAYGEN', 'MESA_SHADER_TASK', 'MESA_SHADER_TESS_CTRL',
    'MESA_SHADER_TESS_EVAL', 'MESA_SHADER_VERTEX', 'PIPE_BUFFER',
    'PIPE_FORMAT_A16_FLOAT', 'PIPE_FORMAT_A16_SINT',
    'PIPE_FORMAT_A16_SNORM', 'PIPE_FORMAT_A16_UINT',
    'PIPE_FORMAT_A16_UNORM', 'PIPE_FORMAT_A1B5G5R5_UINT',
    'PIPE_FORMAT_A1B5G5R5_UNORM', 'PIPE_FORMAT_A1R5G5B5_UINT',
    'PIPE_FORMAT_A1R5G5B5_UNORM', 'PIPE_FORMAT_A2B10G10R10_UINT',
    'PIPE_FORMAT_A2B10G10R10_UNORM', 'PIPE_FORMAT_A2R10G10B10_UINT',
    'PIPE_FORMAT_A2R10G10B10_UNORM', 'PIPE_FORMAT_A32_FLOAT',
    'PIPE_FORMAT_A32_SINT', 'PIPE_FORMAT_A32_UINT',
    'PIPE_FORMAT_A4B4G4R4_UINT', 'PIPE_FORMAT_A4B4G4R4_UNORM',
    'PIPE_FORMAT_A4R4G4B4_UINT', 'PIPE_FORMAT_A4R4G4B4_UNORM',
    'PIPE_FORMAT_A4R4_UNORM', 'PIPE_FORMAT_A8B8G8R8_SINT',
    'PIPE_FORMAT_A8B8G8R8_SNORM', 'PIPE_FORMAT_A8B8G8R8_SRGB',
    'PIPE_FORMAT_A8B8G8R8_SSCALED', 'PIPE_FORMAT_A8B8G8R8_UINT',
    'PIPE_FORMAT_A8B8G8R8_UNORM', 'PIPE_FORMAT_A8B8G8R8_USCALED',
    'PIPE_FORMAT_A8R8G8B8_SINT', 'PIPE_FORMAT_A8R8G8B8_SNORM',
    'PIPE_FORMAT_A8R8G8B8_SRGB', 'PIPE_FORMAT_A8R8G8B8_UINT',
    'PIPE_FORMAT_A8R8G8B8_UNORM', 'PIPE_FORMAT_A8R8_UNORM',
    'PIPE_FORMAT_A8_SINT', 'PIPE_FORMAT_A8_SNORM',
    'PIPE_FORMAT_A8_UINT', 'PIPE_FORMAT_A8_UNORM',
    'PIPE_FORMAT_ASTC_10x10', 'PIPE_FORMAT_ASTC_10x10_FLOAT',
    'PIPE_FORMAT_ASTC_10x10_SRGB', 'PIPE_FORMAT_ASTC_10x5',
    'PIPE_FORMAT_ASTC_10x5_FLOAT', 'PIPE_FORMAT_ASTC_10x5_SRGB',
    'PIPE_FORMAT_ASTC_10x6', 'PIPE_FORMAT_ASTC_10x6_FLOAT',
    'PIPE_FORMAT_ASTC_10x6_SRGB', 'PIPE_FORMAT_ASTC_10x8',
    'PIPE_FORMAT_ASTC_10x8_FLOAT', 'PIPE_FORMAT_ASTC_10x8_SRGB',
    'PIPE_FORMAT_ASTC_12x10', 'PIPE_FORMAT_ASTC_12x10_FLOAT',
    'PIPE_FORMAT_ASTC_12x10_SRGB', 'PIPE_FORMAT_ASTC_12x12',
    'PIPE_FORMAT_ASTC_12x12_FLOAT', 'PIPE_FORMAT_ASTC_12x12_SRGB',
    'PIPE_FORMAT_ASTC_3x3x3', 'PIPE_FORMAT_ASTC_3x3x3_SRGB',
    'PIPE_FORMAT_ASTC_4x3x3', 'PIPE_FORMAT_ASTC_4x3x3_SRGB',
    'PIPE_FORMAT_ASTC_4x4', 'PIPE_FORMAT_ASTC_4x4_FLOAT',
    'PIPE_FORMAT_ASTC_4x4_SRGB', 'PIPE_FORMAT_ASTC_4x4x3',
    'PIPE_FORMAT_ASTC_4x4x3_SRGB', 'PIPE_FORMAT_ASTC_4x4x4',
    'PIPE_FORMAT_ASTC_4x4x4_SRGB', 'PIPE_FORMAT_ASTC_5x4',
    'PIPE_FORMAT_ASTC_5x4_FLOAT', 'PIPE_FORMAT_ASTC_5x4_SRGB',
    'PIPE_FORMAT_ASTC_5x4x4', 'PIPE_FORMAT_ASTC_5x4x4_SRGB',
    'PIPE_FORMAT_ASTC_5x5', 'PIPE_FORMAT_ASTC_5x5_FLOAT',
    'PIPE_FORMAT_ASTC_5x5_SRGB', 'PIPE_FORMAT_ASTC_5x5x4',
    'PIPE_FORMAT_ASTC_5x5x4_SRGB', 'PIPE_FORMAT_ASTC_5x5x5',
    'PIPE_FORMAT_ASTC_5x5x5_SRGB', 'PIPE_FORMAT_ASTC_6x5',
    'PIPE_FORMAT_ASTC_6x5_FLOAT', 'PIPE_FORMAT_ASTC_6x5_SRGB',
    'PIPE_FORMAT_ASTC_6x5x5', 'PIPE_FORMAT_ASTC_6x5x5_SRGB',
    'PIPE_FORMAT_ASTC_6x6', 'PIPE_FORMAT_ASTC_6x6_FLOAT',
    'PIPE_FORMAT_ASTC_6x6_SRGB', 'PIPE_FORMAT_ASTC_6x6x5',
    'PIPE_FORMAT_ASTC_6x6x5_SRGB', 'PIPE_FORMAT_ASTC_6x6x6',
    'PIPE_FORMAT_ASTC_6x6x6_SRGB', 'PIPE_FORMAT_ASTC_8x5',
    'PIPE_FORMAT_ASTC_8x5_FLOAT', 'PIPE_FORMAT_ASTC_8x5_SRGB',
    'PIPE_FORMAT_ASTC_8x6', 'PIPE_FORMAT_ASTC_8x6_FLOAT',
    'PIPE_FORMAT_ASTC_8x6_SRGB', 'PIPE_FORMAT_ASTC_8x8',
    'PIPE_FORMAT_ASTC_8x8_FLOAT', 'PIPE_FORMAT_ASTC_8x8_SRGB',
    'PIPE_FORMAT_ATC_RGB', 'PIPE_FORMAT_ATC_RGBA_EXPLICIT',
    'PIPE_FORMAT_ATC_RGBA_INTERPOLATED', 'PIPE_FORMAT_AYUV',
    'PIPE_FORMAT_B10G10R10A2_SINT', 'PIPE_FORMAT_B10G10R10A2_SNORM',
    'PIPE_FORMAT_B10G10R10A2_SSCALED', 'PIPE_FORMAT_B10G10R10A2_UINT',
    'PIPE_FORMAT_B10G10R10A2_UNORM',
    'PIPE_FORMAT_B10G10R10A2_USCALED', 'PIPE_FORMAT_B10G10R10X2_SINT',
    'PIPE_FORMAT_B10G10R10X2_SNORM', 'PIPE_FORMAT_B10G10R10X2_UNORM',
    'PIPE_FORMAT_B2G3R3_UINT', 'PIPE_FORMAT_B2G3R3_UNORM',
    'PIPE_FORMAT_B4G4R4A4_UINT', 'PIPE_FORMAT_B4G4R4A4_UNORM',
    'PIPE_FORMAT_B4G4R4X4_UNORM', 'PIPE_FORMAT_B5G5R5A1_UINT',
    'PIPE_FORMAT_B5G5R5A1_UNORM', 'PIPE_FORMAT_B5G5R5X1_UNORM',
    'PIPE_FORMAT_B5G6R5_SRGB', 'PIPE_FORMAT_B5G6R5_UINT',
    'PIPE_FORMAT_B5G6R5_UNORM', 'PIPE_FORMAT_B8G8R8A8_SINT',
    'PIPE_FORMAT_B8G8R8A8_SNORM', 'PIPE_FORMAT_B8G8R8A8_SRGB',
    'PIPE_FORMAT_B8G8R8A8_SSCALED', 'PIPE_FORMAT_B8G8R8A8_UINT',
    'PIPE_FORMAT_B8G8R8A8_UNORM', 'PIPE_FORMAT_B8G8R8A8_USCALED',
    'PIPE_FORMAT_B8G8R8X8_SINT', 'PIPE_FORMAT_B8G8R8X8_SNORM',
    'PIPE_FORMAT_B8G8R8X8_SRGB', 'PIPE_FORMAT_B8G8R8X8_UINT',
    'PIPE_FORMAT_B8G8R8X8_UNORM', 'PIPE_FORMAT_B8G8R8_SINT',
    'PIPE_FORMAT_B8G8R8_SNORM', 'PIPE_FORMAT_B8G8R8_SRGB',
    'PIPE_FORMAT_B8G8R8_SSCALED', 'PIPE_FORMAT_B8G8R8_UINT',
    'PIPE_FORMAT_B8G8R8_UNORM', 'PIPE_FORMAT_B8G8R8_USCALED',
    'PIPE_FORMAT_B8G8_R8G8_UNORM', 'PIPE_FORMAT_B8R8_G8R8_UNORM',
    'PIPE_FORMAT_BPTC_RGBA_UNORM', 'PIPE_FORMAT_BPTC_RGB_FLOAT',
    'PIPE_FORMAT_BPTC_RGB_UFLOAT', 'PIPE_FORMAT_BPTC_SRGBA',
    'PIPE_FORMAT_COUNT', 'PIPE_FORMAT_DXT1_RGB',
    'PIPE_FORMAT_DXT1_RGBA', 'PIPE_FORMAT_DXT1_SRGB',
    'PIPE_FORMAT_DXT1_SRGBA', 'PIPE_FORMAT_DXT3_RGBA',
    'PIPE_FORMAT_DXT3_SRGBA', 'PIPE_FORMAT_DXT5_RGBA',
    'PIPE_FORMAT_DXT5_SRGBA', 'PIPE_FORMAT_ETC1_RGB8',
    'PIPE_FORMAT_ETC2_R11_SNORM', 'PIPE_FORMAT_ETC2_R11_UNORM',
    'PIPE_FORMAT_ETC2_RG11_SNORM', 'PIPE_FORMAT_ETC2_RG11_UNORM',
    'PIPE_FORMAT_ETC2_RGB8', 'PIPE_FORMAT_ETC2_RGB8A1',
    'PIPE_FORMAT_ETC2_RGBA8', 'PIPE_FORMAT_ETC2_SRGB8',
    'PIPE_FORMAT_ETC2_SRGB8A1', 'PIPE_FORMAT_ETC2_SRGBA8',
    'PIPE_FORMAT_FXT1_RGB', 'PIPE_FORMAT_FXT1_RGBA',
    'PIPE_FORMAT_G16R16_SINT', 'PIPE_FORMAT_G16R16_SNORM',
    'PIPE_FORMAT_G16R16_UNORM', 'PIPE_FORMAT_G8B8_G8R8_UNORM',
    'PIPE_FORMAT_G8R8_B8R8_UNORM', 'PIPE_FORMAT_G8R8_G8B8_UNORM',
    'PIPE_FORMAT_G8R8_SINT', 'PIPE_FORMAT_G8R8_SNORM',
    'PIPE_FORMAT_G8R8_UNORM', 'PIPE_FORMAT_G8_B8R8_420_UNORM',
    'PIPE_FORMAT_G8_B8R8_422_UNORM', 'PIPE_FORMAT_G8_B8_R8_420_UNORM',
    'PIPE_FORMAT_I16_FLOAT', 'PIPE_FORMAT_I16_SINT',
    'PIPE_FORMAT_I16_SNORM', 'PIPE_FORMAT_I16_UINT',
    'PIPE_FORMAT_I16_UNORM', 'PIPE_FORMAT_I32_FLOAT',
    'PIPE_FORMAT_I32_SINT', 'PIPE_FORMAT_I32_UINT',
    'PIPE_FORMAT_I8_SINT', 'PIPE_FORMAT_I8_SNORM',
    'PIPE_FORMAT_I8_UINT', 'PIPE_FORMAT_I8_UNORM', 'PIPE_FORMAT_IYUV',
    'PIPE_FORMAT_L16A16_FLOAT', 'PIPE_FORMAT_L16A16_SINT',
    'PIPE_FORMAT_L16A16_SNORM', 'PIPE_FORMAT_L16A16_UINT',
    'PIPE_FORMAT_L16A16_UNORM', 'PIPE_FORMAT_L16_FLOAT',
    'PIPE_FORMAT_L16_SINT', 'PIPE_FORMAT_L16_SNORM',
    'PIPE_FORMAT_L16_UINT', 'PIPE_FORMAT_L16_UNORM',
    'PIPE_FORMAT_L32A32_FLOAT', 'PIPE_FORMAT_L32A32_SINT',
    'PIPE_FORMAT_L32A32_UINT', 'PIPE_FORMAT_L32_FLOAT',
    'PIPE_FORMAT_L32_SINT', 'PIPE_FORMAT_L32_UINT',
    'PIPE_FORMAT_L4A4_UNORM', 'PIPE_FORMAT_L8A8_SINT',
    'PIPE_FORMAT_L8A8_SNORM', 'PIPE_FORMAT_L8A8_SRGB',
    'PIPE_FORMAT_L8A8_UINT', 'PIPE_FORMAT_L8A8_UNORM',
    'PIPE_FORMAT_L8_SINT', 'PIPE_FORMAT_L8_SNORM',
    'PIPE_FORMAT_L8_SRGB', 'PIPE_FORMAT_L8_UINT',
    'PIPE_FORMAT_L8_UNORM', 'PIPE_FORMAT_LATC1_SNORM',
    'PIPE_FORMAT_LATC1_UNORM', 'PIPE_FORMAT_LATC2_SNORM',
    'PIPE_FORMAT_LATC2_UNORM', 'PIPE_FORMAT_NONE', 'PIPE_FORMAT_NV12',
    'PIPE_FORMAT_NV15', 'PIPE_FORMAT_NV16', 'PIPE_FORMAT_NV20',
    'PIPE_FORMAT_NV21', 'PIPE_FORMAT_P010', 'PIPE_FORMAT_P012',
    'PIPE_FORMAT_P016', 'PIPE_FORMAT_P030',
    'PIPE_FORMAT_R10G10B10A2_SINT', 'PIPE_FORMAT_R10G10B10A2_SNORM',
    'PIPE_FORMAT_R10G10B10A2_SSCALED', 'PIPE_FORMAT_R10G10B10A2_UINT',
    'PIPE_FORMAT_R10G10B10A2_UNORM',
    'PIPE_FORMAT_R10G10B10A2_USCALED', 'PIPE_FORMAT_R10G10B10X2_SINT',
    'PIPE_FORMAT_R10G10B10X2_SNORM', 'PIPE_FORMAT_R10G10B10X2_UNORM',
    'PIPE_FORMAT_R10G10B10X2_USCALED',
    'PIPE_FORMAT_R10G10B10_420_UNORM_PACKED',
    'PIPE_FORMAT_R10SG10SB10SA2U_NORM',
    'PIPE_FORMAT_R10_G10B10_420_UNORM',
    'PIPE_FORMAT_R10_G10B10_422_UNORM', 'PIPE_FORMAT_R11G11B10_FLOAT',
    'PIPE_FORMAT_R16A16_FLOAT', 'PIPE_FORMAT_R16A16_SINT',
    'PIPE_FORMAT_R16A16_SNORM', 'PIPE_FORMAT_R16A16_UINT',
    'PIPE_FORMAT_R16A16_UNORM', 'PIPE_FORMAT_R16G16B16A16_FLOAT',
    'PIPE_FORMAT_R16G16B16A16_SINT', 'PIPE_FORMAT_R16G16B16A16_SNORM',
    'PIPE_FORMAT_R16G16B16A16_SSCALED',
    'PIPE_FORMAT_R16G16B16A16_UINT', 'PIPE_FORMAT_R16G16B16A16_UNORM',
    'PIPE_FORMAT_R16G16B16A16_USCALED',
    'PIPE_FORMAT_R16G16B16X16_FLOAT', 'PIPE_FORMAT_R16G16B16X16_SINT',
    'PIPE_FORMAT_R16G16B16X16_SNORM', 'PIPE_FORMAT_R16G16B16X16_UINT',
    'PIPE_FORMAT_R16G16B16X16_UNORM', 'PIPE_FORMAT_R16G16B16_FLOAT',
    'PIPE_FORMAT_R16G16B16_SINT', 'PIPE_FORMAT_R16G16B16_SNORM',
    'PIPE_FORMAT_R16G16B16_SSCALED', 'PIPE_FORMAT_R16G16B16_UINT',
    'PIPE_FORMAT_R16G16B16_UNORM', 'PIPE_FORMAT_R16G16B16_USCALED',
    'PIPE_FORMAT_R16G16_FLOAT', 'PIPE_FORMAT_R16G16_SINT',
    'PIPE_FORMAT_R16G16_SNORM', 'PIPE_FORMAT_R16G16_SSCALED',
    'PIPE_FORMAT_R16G16_UINT', 'PIPE_FORMAT_R16G16_UNORM',
    'PIPE_FORMAT_R16G16_USCALED', 'PIPE_FORMAT_R16_FLOAT',
    'PIPE_FORMAT_R16_SINT', 'PIPE_FORMAT_R16_SNORM',
    'PIPE_FORMAT_R16_SSCALED', 'PIPE_FORMAT_R16_UINT',
    'PIPE_FORMAT_R16_UNORM', 'PIPE_FORMAT_R16_USCALED',
    'PIPE_FORMAT_R1_UNORM', 'PIPE_FORMAT_R32A32_FLOAT',
    'PIPE_FORMAT_R32A32_SINT', 'PIPE_FORMAT_R32A32_UINT',
    'PIPE_FORMAT_R32G32B32A32_FIXED',
    'PIPE_FORMAT_R32G32B32A32_FLOAT', 'PIPE_FORMAT_R32G32B32A32_SINT',
    'PIPE_FORMAT_R32G32B32A32_SNORM',
    'PIPE_FORMAT_R32G32B32A32_SSCALED',
    'PIPE_FORMAT_R32G32B32A32_UINT', 'PIPE_FORMAT_R32G32B32A32_UNORM',
    'PIPE_FORMAT_R32G32B32A32_USCALED',
    'PIPE_FORMAT_R32G32B32X32_FLOAT', 'PIPE_FORMAT_R32G32B32X32_SINT',
    'PIPE_FORMAT_R32G32B32X32_UINT', 'PIPE_FORMAT_R32G32B32_FIXED',
    'PIPE_FORMAT_R32G32B32_FLOAT', 'PIPE_FORMAT_R32G32B32_SINT',
    'PIPE_FORMAT_R32G32B32_SNORM', 'PIPE_FORMAT_R32G32B32_SSCALED',
    'PIPE_FORMAT_R32G32B32_UINT', 'PIPE_FORMAT_R32G32B32_UNORM',
    'PIPE_FORMAT_R32G32B32_USCALED', 'PIPE_FORMAT_R32G32_FIXED',
    'PIPE_FORMAT_R32G32_FLOAT', 'PIPE_FORMAT_R32G32_SINT',
    'PIPE_FORMAT_R32G32_SNORM', 'PIPE_FORMAT_R32G32_SSCALED',
    'PIPE_FORMAT_R32G32_UINT', 'PIPE_FORMAT_R32G32_UNORM',
    'PIPE_FORMAT_R32G32_USCALED', 'PIPE_FORMAT_R32_FIXED',
    'PIPE_FORMAT_R32_FLOAT', 'PIPE_FORMAT_R32_SINT',
    'PIPE_FORMAT_R32_SNORM', 'PIPE_FORMAT_R32_SSCALED',
    'PIPE_FORMAT_R32_UINT', 'PIPE_FORMAT_R32_UNORM',
    'PIPE_FORMAT_R32_USCALED', 'PIPE_FORMAT_R3G3B2_UINT',
    'PIPE_FORMAT_R3G3B2_UNORM', 'PIPE_FORMAT_R4A4_UNORM',
    'PIPE_FORMAT_R4G4B4A4_UINT', 'PIPE_FORMAT_R4G4B4A4_UNORM',
    'PIPE_FORMAT_R4G4B4X4_UNORM', 'PIPE_FORMAT_R5G5B5A1_UINT',
    'PIPE_FORMAT_R5G5B5A1_UNORM', 'PIPE_FORMAT_R5G5B5X1_UNORM',
    'PIPE_FORMAT_R5G6B5_SRGB', 'PIPE_FORMAT_R5G6B5_UINT',
    'PIPE_FORMAT_R5G6B5_UNORM', 'PIPE_FORMAT_R5SG5SB6U_NORM',
    'PIPE_FORMAT_R64G64B64A64_FLOAT', 'PIPE_FORMAT_R64G64B64A64_SINT',
    'PIPE_FORMAT_R64G64B64A64_UINT', 'PIPE_FORMAT_R64G64B64_FLOAT',
    'PIPE_FORMAT_R64G64B64_SINT', 'PIPE_FORMAT_R64G64B64_UINT',
    'PIPE_FORMAT_R64G64_FLOAT', 'PIPE_FORMAT_R64G64_SINT',
    'PIPE_FORMAT_R64G64_UINT', 'PIPE_FORMAT_R64_FLOAT',
    'PIPE_FORMAT_R64_SINT', 'PIPE_FORMAT_R64_UINT',
    'PIPE_FORMAT_R8A8_SINT', 'PIPE_FORMAT_R8A8_SNORM',
    'PIPE_FORMAT_R8A8_UINT', 'PIPE_FORMAT_R8A8_UNORM',
    'PIPE_FORMAT_R8B8_R8G8_UNORM', 'PIPE_FORMAT_R8G8B8A8_SINT',
    'PIPE_FORMAT_R8G8B8A8_SNORM', 'PIPE_FORMAT_R8G8B8A8_SRGB',
    'PIPE_FORMAT_R8G8B8A8_SSCALED', 'PIPE_FORMAT_R8G8B8A8_UINT',
    'PIPE_FORMAT_R8G8B8A8_UNORM', 'PIPE_FORMAT_R8G8B8A8_USCALED',
    'PIPE_FORMAT_R8G8B8X8_SINT', 'PIPE_FORMAT_R8G8B8X8_SNORM',
    'PIPE_FORMAT_R8G8B8X8_SRGB', 'PIPE_FORMAT_R8G8B8X8_UINT',
    'PIPE_FORMAT_R8G8B8X8_UNORM',
    'PIPE_FORMAT_R8G8B8_420_UNORM_PACKED', 'PIPE_FORMAT_R8G8B8_SINT',
    'PIPE_FORMAT_R8G8B8_SNORM', 'PIPE_FORMAT_R8G8B8_SRGB',
    'PIPE_FORMAT_R8G8B8_SSCALED', 'PIPE_FORMAT_R8G8B8_UINT',
    'PIPE_FORMAT_R8G8B8_UNORM', 'PIPE_FORMAT_R8G8B8_USCALED',
    'PIPE_FORMAT_R8G8Bx_SNORM', 'PIPE_FORMAT_R8G8_B8G8_UNORM',
    'PIPE_FORMAT_R8G8_R8B8_UNORM', 'PIPE_FORMAT_R8G8_SINT',
    'PIPE_FORMAT_R8G8_SNORM', 'PIPE_FORMAT_R8G8_SRGB',
    'PIPE_FORMAT_R8G8_SSCALED', 'PIPE_FORMAT_R8G8_UINT',
    'PIPE_FORMAT_R8G8_UNORM', 'PIPE_FORMAT_R8G8_USCALED',
    'PIPE_FORMAT_R8SG8SB8UX8U_NORM', 'PIPE_FORMAT_R8_B8G8_420_UNORM',
    'PIPE_FORMAT_R8_B8G8_422_UNORM', 'PIPE_FORMAT_R8_B8_G8_420_UNORM',
    'PIPE_FORMAT_R8_G8B8_420_UNORM', 'PIPE_FORMAT_R8_G8B8_422_UNORM',
    'PIPE_FORMAT_R8_G8_B8_420_UNORM', 'PIPE_FORMAT_R8_G8_B8_UNORM',
    'PIPE_FORMAT_R8_SINT', 'PIPE_FORMAT_R8_SNORM',
    'PIPE_FORMAT_R8_SRGB', 'PIPE_FORMAT_R8_SSCALED',
    'PIPE_FORMAT_R8_UINT', 'PIPE_FORMAT_R8_UNORM',
    'PIPE_FORMAT_R8_USCALED', 'PIPE_FORMAT_R9G9B9E5_FLOAT',
    'PIPE_FORMAT_RGTC1_SNORM', 'PIPE_FORMAT_RGTC1_UNORM',
    'PIPE_FORMAT_RGTC2_SNORM', 'PIPE_FORMAT_RGTC2_UNORM',
    'PIPE_FORMAT_S8X24_UINT', 'PIPE_FORMAT_S8_UINT',
    'PIPE_FORMAT_S8_UINT_Z24_UNORM', 'PIPE_FORMAT_UYVY',
    'PIPE_FORMAT_VYUY', 'PIPE_FORMAT_X1B5G5R5_UNORM',
    'PIPE_FORMAT_X1R5G5B5_UNORM', 'PIPE_FORMAT_X24S8_UINT',
    'PIPE_FORMAT_X32_S8X24_UINT',
    'PIPE_FORMAT_X4G12_X4B12X4R12_420_UNORM',
    'PIPE_FORMAT_X4R12X4G12_UNORM', 'PIPE_FORMAT_X4R12_UNORM',
    'PIPE_FORMAT_X6G10_X6B10X6R10_420_UNORM',
    'PIPE_FORMAT_X6R10X6G10_UNORM', 'PIPE_FORMAT_X6R10_UNORM',
    'PIPE_FORMAT_X8B8G8R8_SINT', 'PIPE_FORMAT_X8B8G8R8_SNORM',
    'PIPE_FORMAT_X8B8G8R8_SRGB', 'PIPE_FORMAT_X8B8G8R8_UNORM',
    'PIPE_FORMAT_X8R8G8B8_SINT', 'PIPE_FORMAT_X8R8G8B8_SNORM',
    'PIPE_FORMAT_X8R8G8B8_SRGB', 'PIPE_FORMAT_X8R8G8B8_UNORM',
    'PIPE_FORMAT_X8Z24_UNORM', 'PIPE_FORMAT_XYUV',
    'PIPE_FORMAT_Y10U10V10_420_UNORM_PACKED',
    'PIPE_FORMAT_Y10X6_U10X6_V10X6_420_UNORM',
    'PIPE_FORMAT_Y10X6_U10X6_V10X6_422_UNORM',
    'PIPE_FORMAT_Y10X6_U10X6_V10X6_444_UNORM',
    'PIPE_FORMAT_Y12X4_U12X4_V12X4_420_UNORM',
    'PIPE_FORMAT_Y12X4_U12X4_V12X4_422_UNORM',
    'PIPE_FORMAT_Y12X4_U12X4_V12X4_444_UNORM',
    'PIPE_FORMAT_Y16_U16V16_422_UNORM',
    'PIPE_FORMAT_Y16_U16_V16_420_UNORM',
    'PIPE_FORMAT_Y16_U16_V16_422_UNORM',
    'PIPE_FORMAT_Y16_U16_V16_444_UNORM', 'PIPE_FORMAT_Y210',
    'PIPE_FORMAT_Y212', 'PIPE_FORMAT_Y216', 'PIPE_FORMAT_Y410',
    'PIPE_FORMAT_Y412', 'PIPE_FORMAT_Y416',
    'PIPE_FORMAT_Y8U8V8_420_UNORM_PACKED', 'PIPE_FORMAT_Y8_400_UNORM',
    'PIPE_FORMAT_Y8_U8_V8_422_UNORM',
    'PIPE_FORMAT_Y8_U8_V8_440_UNORM',
    'PIPE_FORMAT_Y8_U8_V8_444_UNORM', 'PIPE_FORMAT_Y8_UNORM',
    'PIPE_FORMAT_YUYV', 'PIPE_FORMAT_YV12', 'PIPE_FORMAT_YV16',
    'PIPE_FORMAT_YVYU', 'PIPE_FORMAT_Z16_UNORM',
    'PIPE_FORMAT_Z16_UNORM_S8_UINT', 'PIPE_FORMAT_Z24X8_UNORM',
    'PIPE_FORMAT_Z24_UNORM_S8_UINT',
    'PIPE_FORMAT_Z24_UNORM_S8_UINT_AS_R8G8B8A8',
    'PIPE_FORMAT_Z32_FLOAT', 'PIPE_FORMAT_Z32_FLOAT_S8X24_UINT',
    'PIPE_FORMAT_Z32_UNORM', 'PIPE_MAX_TEXTURE_TYPES',
    'PIPE_TEXTURE_1D', 'PIPE_TEXTURE_1D_ARRAY', 'PIPE_TEXTURE_2D',
    'PIPE_TEXTURE_2D_ARRAY', 'PIPE_TEXTURE_3D', 'PIPE_TEXTURE_CUBE',
    'PIPE_TEXTURE_CUBE_ARRAY', 'PIPE_TEXTURE_RECT',
    'SUBGROUP_SIZE_API_CONSTANT', 'SUBGROUP_SIZE_FULL_SUBGROUPS',
    'SUBGROUP_SIZE_REQUIRE_128', 'SUBGROUP_SIZE_REQUIRE_16',
    'SUBGROUP_SIZE_REQUIRE_32', 'SUBGROUP_SIZE_REQUIRE_4',
    'SUBGROUP_SIZE_REQUIRE_64', 'SUBGROUP_SIZE_REQUIRE_8',
    'SUBGROUP_SIZE_UNIFORM', 'SUBGROUP_SIZE_VARYING',
    'TESS_PRIMITIVE_ISOLINES', 'TESS_PRIMITIVE_QUADS',
    'TESS_PRIMITIVE_TRIANGLES', 'TESS_PRIMITIVE_UNSPECIFIED',
    'TGSI_TEXTURE_1D', 'TGSI_TEXTURE_1D_ARRAY', 'TGSI_TEXTURE_2D',
    'TGSI_TEXTURE_2D_ARRAY', 'TGSI_TEXTURE_2D_ARRAY_MSAA',
    'TGSI_TEXTURE_2D_MSAA', 'TGSI_TEXTURE_3D', 'TGSI_TEXTURE_BUFFER',
    'TGSI_TEXTURE_COUNT', 'TGSI_TEXTURE_CUBE',
    'TGSI_TEXTURE_CUBE_ARRAY', 'TGSI_TEXTURE_RECT',
    'TGSI_TEXTURE_SHADOW1D', 'TGSI_TEXTURE_SHADOW1D_ARRAY',
    'TGSI_TEXTURE_SHADOW2D', 'TGSI_TEXTURE_SHADOW2D_ARRAY',
    'TGSI_TEXTURE_SHADOWCUBE', 'TGSI_TEXTURE_SHADOWCUBE_ARRAY',
    'TGSI_TEXTURE_SHADOWRECT', 'TGSI_TEXTURE_UNKNOWN',
    'UTIL_FORMAT_COLORSPACE_RGB', 'UTIL_FORMAT_COLORSPACE_SRGB',
    'UTIL_FORMAT_COLORSPACE_YUV', 'UTIL_FORMAT_COLORSPACE_ZS',
    'UTIL_FORMAT_LAYOUT_ASTC', 'UTIL_FORMAT_LAYOUT_ATC',
    'UTIL_FORMAT_LAYOUT_BPTC', 'UTIL_FORMAT_LAYOUT_ETC',
    'UTIL_FORMAT_LAYOUT_FXT1', 'UTIL_FORMAT_LAYOUT_OTHER',
    'UTIL_FORMAT_LAYOUT_PLAIN', 'UTIL_FORMAT_LAYOUT_PLANAR2',
    'UTIL_FORMAT_LAYOUT_PLANAR3', 'UTIL_FORMAT_LAYOUT_RGTC',
    'UTIL_FORMAT_LAYOUT_S3TC', 'UTIL_FORMAT_LAYOUT_SUBSAMPLED',
    'blob_align', 'blob_copy_bytes', 'blob_finish',
    'blob_finish_get_buffer', 'blob_init', 'blob_init_fixed',
    'blob_overwrite_bytes', 'blob_overwrite_intptr',
    'blob_overwrite_uint32', 'blob_overwrite_uint8',
    'blob_read_bytes', 'blob_read_intptr', 'blob_read_string',
    'blob_read_uint16', 'blob_read_uint32', 'blob_read_uint64',
    'blob_read_uint8', 'blob_reader_align', 'blob_reader_init',
    'blob_reserve_bytes', 'blob_reserve_intptr',
    'blob_reserve_uint32', 'blob_skip_bytes', 'blob_write_bytes',
    'blob_write_intptr', 'blob_write_string', 'blob_write_uint16',
    'blob_write_uint32', 'blob_write_uint64', 'blob_write_uint8',
    'c__EA_LLVMAtomicRMWBinOp', 'c__EA_LLVMIntPredicate',
    'c__EA_LLVMTypeKind', 'c__EA_nir_alu_type', 'c__EA_nir_atomic_op',
    'c__EA_nir_cf_node_type', 'c__EA_nir_divergence_options',
    'c__EA_nir_intrinsic_op', 'c__EA_nir_io_options',
    'c__EA_nir_lower_doubles_options',
    'c__EA_nir_lower_int64_options', 'c__EA_nir_lower_packing_op',
    'c__EA_nir_metadata', 'c__EA_nir_variable_mode',
    'c__Ea_LP_JIT_BUFFER_BASE', 'c__Ea_LP_JIT_IMAGE_BASE',
    'c__Ea_LP_JIT_RES_CONSTANTS', 'c__Ea_LP_JIT_SAMPLER_MIN_LOD',
    'c__Ea_LP_JIT_TEXTURE_BASE',
    'c__Ea_LP_JIT_VERTEX_HEADER_VERTEX_ID', 'c_bool', 'c_uint32',
    'c_uint64', 'func_pointer', 'gallivm_add_global_mapping',
    'gallivm_compile_module', 'gallivm_create', 'gallivm_destroy',
    'gallivm_free_ir', 'gallivm_get_perf_flags',
    'gallivm_jit_function', 'gallivm_stub_func',
    'gallivm_verify_function', 'gl_derivative_group',
    'gl_subgroup_size', 'glsl_base_type', 'glsl_sampler_dim',
    'int64_t', 'intptr_t', 'lp_bld_ppc_disable_denorms',
    'lp_build_alloca', 'lp_build_alloca_undef',
    'lp_build_array_alloca', 'lp_build_array_get2',
    'lp_build_array_get_ptr2', 'lp_build_const_aos',
    'lp_build_const_channel_vec', 'lp_build_const_double',
    'lp_build_const_elem', 'lp_build_const_float',
    'lp_build_const_func_pointer',
    'lp_build_const_func_pointer_from_type', 'lp_build_const_int32',
    'lp_build_const_int64', 'lp_build_const_int_pointer',
    'lp_build_const_int_vec', 'lp_build_const_mask_aos',
    'lp_build_const_mask_aos_swizzled', 'lp_build_const_string',
    'lp_build_const_vec', 'lp_build_context_init',
    'lp_build_count_ir_module',
    'lp_build_create_jit_vertex_header_type',
    'lp_build_cs_func_call_context', 'lp_build_elem_type',
    'lp_build_else', 'lp_build_endif', 'lp_build_flow_skip_begin',
    'lp_build_flow_skip_cond_break', 'lp_build_flow_skip_end',
    'lp_build_for_loop_begin', 'lp_build_for_loop_end', 'lp_build_if',
    'lp_build_image_function_type', 'lp_build_init',
    'lp_build_init_native_width', 'lp_build_insert_new_block',
    'lp_build_int_elem_type', 'lp_build_int_vec_type',
    'lp_build_jit_fill_image_dynamic_state',
    'lp_build_jit_fill_sampler_dynamic_state',
    'lp_build_jit_resources_type', 'lp_build_loop_begin',
    'lp_build_loop_end', 'lp_build_loop_end_cond',
    'lp_build_loop_force_reload_counter',
    'lp_build_loop_force_set_counter', 'lp_build_mask_begin',
    'lp_build_mask_check', 'lp_build_mask_end', 'lp_build_mask_force',
    'lp_build_mask_update', 'lp_build_mask_value', 'lp_build_nir_aos',
    'lp_build_nir_sample_key', 'lp_build_nir_soa',
    'lp_build_nir_soa_func', 'lp_build_nir_soa_prepasses',
    'lp_build_one', 'lp_build_opt_nir', 'lp_build_pointer_get2',
    'lp_build_pointer_get_unaligned2', 'lp_build_pointer_set',
    'lp_build_pointer_set_unaligned', 'lp_build_sample_function_type',
    'lp_build_size_function_type', 'lp_build_struct_get2',
    'lp_build_struct_get_ptr2', 'lp_build_tex_modifier',
    'lp_build_undef', 'lp_build_vec_type', 'lp_build_zero',
    'lp_check_elem_type', 'lp_check_value', 'lp_check_vec_type',
    'lp_const_eps', 'lp_const_max', 'lp_const_min', 'lp_const_offset',
    'lp_const_scale', 'lp_const_shift', 'lp_context_create',
    'lp_context_destroy', 'lp_context_ref',
    'lp_create_builder_at_entry', 'lp_dump_llvmtype', 'lp_elem_type',
    'lp_float32_vec4_type', 'lp_img_op_from_intrinsic',
    'lp_init_clock_hook', 'lp_init_env_options', 'lp_int32_vec4_type',
    'lp_int_type', 'lp_llvm_buffer_base',
    'lp_llvm_buffer_num_elements', 'lp_llvm_descriptor_base',
    'lp_mantissa', 'lp_native_vector_width',
    'lp_nir_array_build_gather_values', 'lp_nir_call_context_args',
    'lp_packed_img_op_from_intrinsic', 'lp_sampler_lod_property',
    'lp_sizeof_llvm_type', 'lp_translate_atomic_op', 'lp_type_fixed',
    'lp_type_float', 'lp_type_float_vec', 'lp_type_from_format',
    'lp_type_from_format_desc', 'lp_type_int', 'lp_type_int_vec',
    'lp_type_ufixed', 'lp_type_uint', 'lp_type_uint_vec',
    'lp_type_unorm', 'lp_type_width', 'lp_typekind_name',
    'lp_uint_type', 'lp_unorm8_vec4_type', 'lp_wider_type',
    'mesa_prim', 'mesa_shader_stage', 'nir_atomic_op',
    'nir_atomic_op__enumvalues', 'nir_atomic_op_cmpxchg',
    'nir_atomic_op_dec_wrap', 'nir_atomic_op_fadd',
    'nir_atomic_op_fcmpxchg', 'nir_atomic_op_fmax',
    'nir_atomic_op_fmin', 'nir_atomic_op_iadd', 'nir_atomic_op_iand',
    'nir_atomic_op_imax', 'nir_atomic_op_imin',
    'nir_atomic_op_inc_wrap', 'nir_atomic_op_ior',
    'nir_atomic_op_ixor', 'nir_atomic_op_ordered_add_gfx12_amd',
    'nir_atomic_op_umax', 'nir_atomic_op_umin', 'nir_atomic_op_xchg',
    'nir_cf_node_block', 'nir_cf_node_function', 'nir_cf_node_if',
    'nir_cf_node_loop', 'nir_deserialize', 'nir_deserialize_function',
    'nir_divergence_ignore_undef_if_phi_srcs',
    'nir_divergence_multiple_workgroup_per_compute_subgroup',
    'nir_divergence_options', 'nir_divergence_options__enumvalues',
    'nir_divergence_shader_record_ptr_uniform',
    'nir_divergence_single_frag_shading_rate_per_subgroup',
    'nir_divergence_single_patch_per_tcs_subgroup',
    'nir_divergence_single_patch_per_tes_subgroup',
    'nir_divergence_single_prim_per_subgroup',
    'nir_divergence_uniform_load_tears', 'nir_divergence_vertex',
    'nir_divergence_view_index_uniform', 'nir_instr_filter_cb',
    'nir_intrinsic_accept_ray_intersection',
    'nir_intrinsic_addr_mode_is', 'nir_intrinsic_al2p_nv',
    'nir_intrinsic_ald_nv', 'nir_intrinsic_alpha_to_coverage',
    'nir_intrinsic_as_uniform', 'nir_intrinsic_ast_nv',
    'nir_intrinsic_atomic_add_gen_prim_count_amd',
    'nir_intrinsic_atomic_add_gs_emit_prim_count_amd',
    'nir_intrinsic_atomic_add_shader_invocation_count_amd',
    'nir_intrinsic_atomic_add_xfb_prim_count_amd',
    'nir_intrinsic_atomic_counter_add',
    'nir_intrinsic_atomic_counter_add_deref',
    'nir_intrinsic_atomic_counter_and',
    'nir_intrinsic_atomic_counter_and_deref',
    'nir_intrinsic_atomic_counter_comp_swap',
    'nir_intrinsic_atomic_counter_comp_swap_deref',
    'nir_intrinsic_atomic_counter_exchange',
    'nir_intrinsic_atomic_counter_exchange_deref',
    'nir_intrinsic_atomic_counter_inc',
    'nir_intrinsic_atomic_counter_inc_deref',
    'nir_intrinsic_atomic_counter_max',
    'nir_intrinsic_atomic_counter_max_deref',
    'nir_intrinsic_atomic_counter_min',
    'nir_intrinsic_atomic_counter_min_deref',
    'nir_intrinsic_atomic_counter_or',
    'nir_intrinsic_atomic_counter_or_deref',
    'nir_intrinsic_atomic_counter_post_dec',
    'nir_intrinsic_atomic_counter_post_dec_deref',
    'nir_intrinsic_atomic_counter_pre_dec',
    'nir_intrinsic_atomic_counter_pre_dec_deref',
    'nir_intrinsic_atomic_counter_read',
    'nir_intrinsic_atomic_counter_read_deref',
    'nir_intrinsic_atomic_counter_xor',
    'nir_intrinsic_atomic_counter_xor_deref', 'nir_intrinsic_ballot',
    'nir_intrinsic_ballot_bit_count_exclusive',
    'nir_intrinsic_ballot_bit_count_inclusive',
    'nir_intrinsic_ballot_bit_count_reduce',
    'nir_intrinsic_ballot_bitfield_extract',
    'nir_intrinsic_ballot_find_lsb', 'nir_intrinsic_ballot_find_msb',
    'nir_intrinsic_ballot_relaxed', 'nir_intrinsic_bar_break_nv',
    'nir_intrinsic_bar_set_nv', 'nir_intrinsic_bar_sync_nv',
    'nir_intrinsic_barrier',
    'nir_intrinsic_begin_invocation_interlock',
    'nir_intrinsic_bindgen_return',
    'nir_intrinsic_bindless_image_agx',
    'nir_intrinsic_bindless_image_atomic',
    'nir_intrinsic_bindless_image_atomic_swap',
    'nir_intrinsic_bindless_image_descriptor_amd',
    'nir_intrinsic_bindless_image_format',
    'nir_intrinsic_bindless_image_fragment_mask_load_amd',
    'nir_intrinsic_bindless_image_levels',
    'nir_intrinsic_bindless_image_load',
    'nir_intrinsic_bindless_image_load_raw_intel',
    'nir_intrinsic_bindless_image_order',
    'nir_intrinsic_bindless_image_samples',
    'nir_intrinsic_bindless_image_samples_identical',
    'nir_intrinsic_bindless_image_size',
    'nir_intrinsic_bindless_image_sparse_load',
    'nir_intrinsic_bindless_image_store',
    'nir_intrinsic_bindless_image_store_block_agx',
    'nir_intrinsic_bindless_image_store_raw_intel',
    'nir_intrinsic_bindless_image_texel_address',
    'nir_intrinsic_bindless_resource_ir3',
    'nir_intrinsic_bindless_sampler_agx',
    'nir_intrinsic_brcst_active_ir3',
    'nir_intrinsic_btd_retire_intel', 'nir_intrinsic_btd_spawn_intel',
    'nir_intrinsic_btd_stack_push_intel',
    'nir_intrinsic_bvh64_intersect_ray_amd',
    'nir_intrinsic_bvh8_intersect_ray_amd',
    'nir_intrinsic_bvh_stack_rtn_amd', 'nir_intrinsic_cmat_binary_op',
    'nir_intrinsic_cmat_bitcast', 'nir_intrinsic_cmat_construct',
    'nir_intrinsic_cmat_convert', 'nir_intrinsic_cmat_copy',
    'nir_intrinsic_cmat_extract', 'nir_intrinsic_cmat_insert',
    'nir_intrinsic_cmat_length', 'nir_intrinsic_cmat_load',
    'nir_intrinsic_cmat_muladd', 'nir_intrinsic_cmat_muladd_amd',
    'nir_intrinsic_cmat_muladd_nv', 'nir_intrinsic_cmat_scalar_op',
    'nir_intrinsic_cmat_store', 'nir_intrinsic_cmat_transpose',
    'nir_intrinsic_cmat_unary_op', 'nir_intrinsic_convert_alu_types',
    'nir_intrinsic_convert_cmat_intel', 'nir_intrinsic_copy_deref',
    'nir_intrinsic_copy_fs_outputs_nv',
    'nir_intrinsic_copy_global_to_uniform_ir3',
    'nir_intrinsic_copy_push_const_to_uniform_ir3',
    'nir_intrinsic_copy_ubo_to_uniform_ir3', 'nir_intrinsic_ddx',
    'nir_intrinsic_ddx_coarse', 'nir_intrinsic_ddx_fine',
    'nir_intrinsic_ddy', 'nir_intrinsic_ddy_coarse',
    'nir_intrinsic_ddy_fine', 'nir_intrinsic_debug_break',
    'nir_intrinsic_decl_reg', 'nir_intrinsic_demote',
    'nir_intrinsic_demote_if', 'nir_intrinsic_demote_samples',
    'nir_intrinsic_deref_atomic', 'nir_intrinsic_deref_atomic_swap',
    'nir_intrinsic_deref_buffer_array_length',
    'nir_intrinsic_deref_implicit_array_length',
    'nir_intrinsic_deref_mode_is', 'nir_intrinsic_deref_texture_src',
    'nir_intrinsic_doorbell_agx', 'nir_intrinsic_dpas_intel',
    'nir_intrinsic_dpp16_shift_amd', 'nir_intrinsic_elect',
    'nir_intrinsic_elect_any_ir3',
    'nir_intrinsic_emit_primitive_poly', 'nir_intrinsic_emit_vertex',
    'nir_intrinsic_emit_vertex_nv',
    'nir_intrinsic_emit_vertex_with_counter',
    'nir_intrinsic_end_invocation_interlock',
    'nir_intrinsic_end_primitive', 'nir_intrinsic_end_primitive_nv',
    'nir_intrinsic_end_primitive_with_counter',
    'nir_intrinsic_enqueue_node_payloads',
    'nir_intrinsic_exclusive_scan',
    'nir_intrinsic_exclusive_scan_clusters_ir3',
    'nir_intrinsic_execute_callable',
    'nir_intrinsic_execute_closest_hit_amd',
    'nir_intrinsic_execute_miss_amd', 'nir_intrinsic_export_agx',
    'nir_intrinsic_export_amd',
    'nir_intrinsic_export_dual_src_blend_amd',
    'nir_intrinsic_export_row_amd',
    'nir_intrinsic_fence_helper_exit_agx',
    'nir_intrinsic_fence_mem_to_tex_agx',
    'nir_intrinsic_fence_pbe_to_tex_agx',
    'nir_intrinsic_fence_pbe_to_tex_pixel_agx',
    'nir_intrinsic_final_primitive_nv',
    'nir_intrinsic_finalize_incoming_node_payload',
    'nir_intrinsic_first_invocation', 'nir_intrinsic_fs_out_nv',
    'nir_intrinsic_gds_atomic_add_amd', 'nir_intrinsic_get_ssbo_size',
    'nir_intrinsic_get_ubo_size', 'nir_intrinsic_global_atomic',
    'nir_intrinsic_global_atomic_2x32',
    'nir_intrinsic_global_atomic_agx',
    'nir_intrinsic_global_atomic_amd',
    'nir_intrinsic_global_atomic_swap',
    'nir_intrinsic_global_atomic_swap_2x32',
    'nir_intrinsic_global_atomic_swap_agx',
    'nir_intrinsic_global_atomic_swap_amd',
    'nir_intrinsic_ignore_ray_intersection',
    'nir_intrinsic_imadsp_nv', 'nir_intrinsic_image_atomic',
    'nir_intrinsic_image_atomic_swap',
    'nir_intrinsic_image_deref_atomic',
    'nir_intrinsic_image_deref_atomic_swap',
    'nir_intrinsic_image_deref_descriptor_amd',
    'nir_intrinsic_image_deref_format',
    'nir_intrinsic_image_deref_fragment_mask_load_amd',
    'nir_intrinsic_image_deref_levels',
    'nir_intrinsic_image_deref_load',
    'nir_intrinsic_image_deref_load_info_nv',
    'nir_intrinsic_image_deref_load_param_intel',
    'nir_intrinsic_image_deref_load_raw_intel',
    'nir_intrinsic_image_deref_order',
    'nir_intrinsic_image_deref_samples',
    'nir_intrinsic_image_deref_samples_identical',
    'nir_intrinsic_image_deref_size',
    'nir_intrinsic_image_deref_sparse_load',
    'nir_intrinsic_image_deref_store',
    'nir_intrinsic_image_deref_store_block_agx',
    'nir_intrinsic_image_deref_store_raw_intel',
    'nir_intrinsic_image_deref_texel_address',
    'nir_intrinsic_image_descriptor_amd',
    'nir_intrinsic_image_format',
    'nir_intrinsic_image_fragment_mask_load_amd',
    'nir_intrinsic_image_levels', 'nir_intrinsic_image_load',
    'nir_intrinsic_image_load_raw_intel', 'nir_intrinsic_image_order',
    'nir_intrinsic_image_samples',
    'nir_intrinsic_image_samples_identical',
    'nir_intrinsic_image_size', 'nir_intrinsic_image_sparse_load',
    'nir_intrinsic_image_store',
    'nir_intrinsic_image_store_block_agx',
    'nir_intrinsic_image_store_raw_intel',
    'nir_intrinsic_image_texel_address',
    'nir_intrinsic_inclusive_scan',
    'nir_intrinsic_inclusive_scan_clusters_ir3',
    'nir_intrinsic_initialize_node_payloads',
    'nir_intrinsic_interp_deref_at_centroid',
    'nir_intrinsic_interp_deref_at_offset',
    'nir_intrinsic_interp_deref_at_sample',
    'nir_intrinsic_interp_deref_at_vertex',
    'nir_intrinsic_inverse_ballot', 'nir_intrinsic_ipa_nv',
    'nir_intrinsic_is_helper_invocation',
    'nir_intrinsic_is_sparse_resident_zink',
    'nir_intrinsic_is_sparse_texels_resident',
    'nir_intrinsic_is_subgroup_invocation_lt_amd',
    'nir_intrinsic_isberd_nv', 'nir_intrinsic_lane_permute_16_amd',
    'nir_intrinsic_last_invocation',
    'nir_intrinsic_launch_mesh_workgroups',
    'nir_intrinsic_launch_mesh_workgroups_with_payload_deref',
    'nir_intrinsic_ldc_nv', 'nir_intrinsic_ldcx_nv',
    'nir_intrinsic_ldtram_nv', 'nir_intrinsic_load_aa_line_width',
    'nir_intrinsic_load_accel_struct_amd',
    'nir_intrinsic_load_active_samples_agx',
    'nir_intrinsic_load_active_subgroup_count_agx',
    'nir_intrinsic_load_active_subgroup_invocation_agx',
    'nir_intrinsic_load_agx',
    'nir_intrinsic_load_alpha_reference_amd',
    'nir_intrinsic_load_api_sample_mask_agx',
    'nir_intrinsic_load_attrib_clamp_agx',
    'nir_intrinsic_load_attribute_pan',
    'nir_intrinsic_load_back_face_agx',
    'nir_intrinsic_load_barycentric_at_offset',
    'nir_intrinsic_load_barycentric_at_offset_nv',
    'nir_intrinsic_load_barycentric_at_sample',
    'nir_intrinsic_load_barycentric_centroid',
    'nir_intrinsic_load_barycentric_coord_at_offset',
    'nir_intrinsic_load_barycentric_coord_at_sample',
    'nir_intrinsic_load_barycentric_coord_centroid',
    'nir_intrinsic_load_barycentric_coord_pixel',
    'nir_intrinsic_load_barycentric_coord_sample',
    'nir_intrinsic_load_barycentric_model',
    'nir_intrinsic_load_barycentric_optimize_amd',
    'nir_intrinsic_load_barycentric_pixel',
    'nir_intrinsic_load_barycentric_sample',
    'nir_intrinsic_load_base_global_invocation_id',
    'nir_intrinsic_load_base_instance',
    'nir_intrinsic_load_base_vertex',
    'nir_intrinsic_load_base_workgroup_id',
    'nir_intrinsic_load_blend_const_color_a_float',
    'nir_intrinsic_load_blend_const_color_aaaa8888_unorm',
    'nir_intrinsic_load_blend_const_color_b_float',
    'nir_intrinsic_load_blend_const_color_g_float',
    'nir_intrinsic_load_blend_const_color_r_float',
    'nir_intrinsic_load_blend_const_color_rgba',
    'nir_intrinsic_load_blend_const_color_rgba8888_unorm',
    'nir_intrinsic_load_btd_global_arg_addr_intel',
    'nir_intrinsic_load_btd_local_arg_addr_intel',
    'nir_intrinsic_load_btd_resume_sbt_addr_intel',
    'nir_intrinsic_load_btd_shader_type_intel',
    'nir_intrinsic_load_btd_stack_id_intel',
    'nir_intrinsic_load_buffer_amd',
    'nir_intrinsic_load_callable_sbt_addr_intel',
    'nir_intrinsic_load_callable_sbt_stride_intel',
    'nir_intrinsic_load_clamp_vertex_color_amd',
    'nir_intrinsic_load_clip_half_line_width_amd',
    'nir_intrinsic_load_clip_z_coeff_agx',
    'nir_intrinsic_load_coalesced_input_count',
    'nir_intrinsic_load_coefficients_agx',
    'nir_intrinsic_load_color0', 'nir_intrinsic_load_color1',
    'nir_intrinsic_load_const_buf_base_addr_lvp',
    'nir_intrinsic_load_const_ir3', 'nir_intrinsic_load_constant',
    'nir_intrinsic_load_constant_agx',
    'nir_intrinsic_load_constant_base_ptr',
    'nir_intrinsic_load_converted_output_pan',
    'nir_intrinsic_load_core_count_arm', 'nir_intrinsic_load_core_id',
    'nir_intrinsic_load_core_max_id_arm',
    'nir_intrinsic_load_cull_any_enabled_amd',
    'nir_intrinsic_load_cull_back_face_enabled_amd',
    'nir_intrinsic_load_cull_ccw_amd',
    'nir_intrinsic_load_cull_front_face_enabled_amd',
    'nir_intrinsic_load_cull_line_viewport_xy_scale_and_offset_amd',
    'nir_intrinsic_load_cull_mask',
    'nir_intrinsic_load_cull_mask_and_flags_amd',
    'nir_intrinsic_load_cull_small_line_precision_amd',
    'nir_intrinsic_load_cull_small_lines_enabled_amd',
    'nir_intrinsic_load_cull_small_triangle_precision_amd',
    'nir_intrinsic_load_cull_small_triangles_enabled_amd',
    'nir_intrinsic_load_cull_triangle_viewport_xy_scale_and_offset_amd',
    'nir_intrinsic_load_debug_log_desc_amd',
    'nir_intrinsic_load_depth_never_agx', 'nir_intrinsic_load_deref',
    'nir_intrinsic_load_deref_block_intel',
    'nir_intrinsic_load_descriptor_set_agx',
    'nir_intrinsic_load_draw_id',
    'nir_intrinsic_load_esgs_vertex_stride_amd',
    'nir_intrinsic_load_exported_agx',
    'nir_intrinsic_load_fb_layers_v3d',
    'nir_intrinsic_load_fbfetch_image_desc_amd',
    'nir_intrinsic_load_fbfetch_image_fmask_desc_amd',
    'nir_intrinsic_load_fep_w_v3d', 'nir_intrinsic_load_first_vertex',
    'nir_intrinsic_load_fixed_point_size_agx',
    'nir_intrinsic_load_flat_mask',
    'nir_intrinsic_load_force_vrs_rates_amd',
    'nir_intrinsic_load_frag_coord',
    'nir_intrinsic_load_frag_coord_unscaled_ir3',
    'nir_intrinsic_load_frag_coord_w',
    'nir_intrinsic_load_frag_coord_z',
    'nir_intrinsic_load_frag_coord_zw_pan',
    'nir_intrinsic_load_frag_invocation_count',
    'nir_intrinsic_load_frag_offset_ir3',
    'nir_intrinsic_load_frag_shading_rate',
    'nir_intrinsic_load_frag_size',
    'nir_intrinsic_load_frag_size_ir3',
    'nir_intrinsic_load_from_texture_handle_agx',
    'nir_intrinsic_load_front_face',
    'nir_intrinsic_load_front_face_fsign',
    'nir_intrinsic_load_fs_input_interp_deltas',
    'nir_intrinsic_load_fs_msaa_intel',
    'nir_intrinsic_load_fully_covered',
    'nir_intrinsic_load_geometry_param_buffer_poly',
    'nir_intrinsic_load_global', 'nir_intrinsic_load_global_2x32',
    'nir_intrinsic_load_global_amd',
    'nir_intrinsic_load_global_base_ptr',
    'nir_intrinsic_load_global_block_intel',
    'nir_intrinsic_load_global_bounded',
    'nir_intrinsic_load_global_constant',
    'nir_intrinsic_load_global_constant_bounded',
    'nir_intrinsic_load_global_constant_offset',
    'nir_intrinsic_load_global_constant_uniform_block_intel',
    'nir_intrinsic_load_global_etna',
    'nir_intrinsic_load_global_invocation_id',
    'nir_intrinsic_load_global_invocation_index',
    'nir_intrinsic_load_global_ir3', 'nir_intrinsic_load_global_size',
    'nir_intrinsic_load_gs_header_ir3',
    'nir_intrinsic_load_gs_vertex_offset_amd',
    'nir_intrinsic_load_gs_wave_id_amd',
    'nir_intrinsic_load_helper_arg_hi_agx',
    'nir_intrinsic_load_helper_arg_lo_agx',
    'nir_intrinsic_load_helper_invocation',
    'nir_intrinsic_load_helper_op_id_agx',
    'nir_intrinsic_load_hit_attrib_amd',
    'nir_intrinsic_load_hs_out_patch_data_offset_amd',
    'nir_intrinsic_load_hs_patch_stride_ir3',
    'nir_intrinsic_load_initial_edgeflags_amd',
    'nir_intrinsic_load_inline_data_intel',
    'nir_intrinsic_load_input',
    'nir_intrinsic_load_input_assembly_buffer_poly',
    'nir_intrinsic_load_input_attachment_conv_pan',
    'nir_intrinsic_load_input_attachment_coord',
    'nir_intrinsic_load_input_attachment_target_pan',
    'nir_intrinsic_load_input_topology_poly',
    'nir_intrinsic_load_input_vertex',
    'nir_intrinsic_load_instance_id',
    'nir_intrinsic_load_interpolated_input',
    'nir_intrinsic_load_intersection_opaque_amd',
    'nir_intrinsic_load_invocation_id',
    'nir_intrinsic_load_is_first_fan_agx',
    'nir_intrinsic_load_is_indexed_draw',
    'nir_intrinsic_load_kernel_input', 'nir_intrinsic_load_layer_id',
    'nir_intrinsic_load_lds_ngg_gs_out_vertex_base_amd',
    'nir_intrinsic_load_leaf_opaque_intel',
    'nir_intrinsic_load_leaf_procedural_intel',
    'nir_intrinsic_load_line_coord', 'nir_intrinsic_load_line_width',
    'nir_intrinsic_load_local_invocation_id',
    'nir_intrinsic_load_local_invocation_index',
    'nir_intrinsic_load_local_pixel_agx',
    'nir_intrinsic_load_local_shared_r600',
    'nir_intrinsic_load_lshs_vertex_stride_amd',
    'nir_intrinsic_load_max_polygon_intel',
    'nir_intrinsic_load_merged_wave_info_amd',
    'nir_intrinsic_load_mesh_view_count',
    'nir_intrinsic_load_mesh_view_indices',
    'nir_intrinsic_load_multisampled_pan',
    'nir_intrinsic_load_noperspective_varyings_pan',
    'nir_intrinsic_load_num_subgroups',
    'nir_intrinsic_load_num_vertices',
    'nir_intrinsic_load_num_vertices_per_primitive_amd',
    'nir_intrinsic_load_num_workgroups',
    'nir_intrinsic_load_ordered_id_amd', 'nir_intrinsic_load_output',
    'nir_intrinsic_load_packed_passthrough_primitive_amd',
    'nir_intrinsic_load_param',
    'nir_intrinsic_load_patch_vertices_in',
    'nir_intrinsic_load_per_primitive_input',
    'nir_intrinsic_load_per_primitive_output',
    'nir_intrinsic_load_per_primitive_remap_intel',
    'nir_intrinsic_load_per_vertex_input',
    'nir_intrinsic_load_per_vertex_output',
    'nir_intrinsic_load_per_view_output',
    'nir_intrinsic_load_persp_center_rhw_ir3',
    'nir_intrinsic_load_pipeline_stat_query_enabled_amd',
    'nir_intrinsic_load_pixel_coord',
    'nir_intrinsic_load_point_coord',
    'nir_intrinsic_load_point_coord_maybe_flipped',
    'nir_intrinsic_load_poly_line_smooth_enabled',
    'nir_intrinsic_load_polygon_stipple_agx',
    'nir_intrinsic_load_polygon_stipple_buffer_amd',
    'nir_intrinsic_load_preamble',
    'nir_intrinsic_load_prim_gen_query_enabled_amd',
    'nir_intrinsic_load_prim_xfb_query_enabled_amd',
    'nir_intrinsic_load_primitive_id',
    'nir_intrinsic_load_primitive_location_ir3',
    'nir_intrinsic_load_printf_buffer_address',
    'nir_intrinsic_load_printf_buffer_size',
    'nir_intrinsic_load_provoking_last',
    'nir_intrinsic_load_provoking_vtx_amd',
    'nir_intrinsic_load_provoking_vtx_in_prim_amd',
    'nir_intrinsic_load_push_constant',
    'nir_intrinsic_load_push_constant_zink',
    'nir_intrinsic_load_r600_per_vertex_input',
    'nir_intrinsic_load_rasterization_primitive_amd',
    'nir_intrinsic_load_rasterization_samples_amd',
    'nir_intrinsic_load_rasterization_stream',
    'nir_intrinsic_load_raw_output_pan',
    'nir_intrinsic_load_raw_vertex_id_pan',
    'nir_intrinsic_load_raw_vertex_offset_pan',
    'nir_intrinsic_load_ray_base_mem_addr_intel',
    'nir_intrinsic_load_ray_flags',
    'nir_intrinsic_load_ray_geometry_index',
    'nir_intrinsic_load_ray_hit_kind',
    'nir_intrinsic_load_ray_hit_sbt_addr_intel',
    'nir_intrinsic_load_ray_hit_sbt_stride_intel',
    'nir_intrinsic_load_ray_hw_stack_size_intel',
    'nir_intrinsic_load_ray_instance_custom_index',
    'nir_intrinsic_load_ray_launch_id',
    'nir_intrinsic_load_ray_launch_size',
    'nir_intrinsic_load_ray_miss_sbt_addr_intel',
    'nir_intrinsic_load_ray_miss_sbt_stride_intel',
    'nir_intrinsic_load_ray_num_dss_rt_stacks_intel',
    'nir_intrinsic_load_ray_object_direction',
    'nir_intrinsic_load_ray_object_origin',
    'nir_intrinsic_load_ray_object_to_world',
    'nir_intrinsic_load_ray_query_global_intel',
    'nir_intrinsic_load_ray_sw_stack_size_intel',
    'nir_intrinsic_load_ray_t_max', 'nir_intrinsic_load_ray_t_min',
    'nir_intrinsic_load_ray_tracing_stack_base_lvp',
    'nir_intrinsic_load_ray_triangle_vertex_positions',
    'nir_intrinsic_load_ray_world_direction',
    'nir_intrinsic_load_ray_world_origin',
    'nir_intrinsic_load_ray_world_to_object',
    'nir_intrinsic_load_readonly_output_pan',
    'nir_intrinsic_load_reg', 'nir_intrinsic_load_reg_indirect',
    'nir_intrinsic_load_rel_patch_id_ir3',
    'nir_intrinsic_load_reloc_const_intel',
    'nir_intrinsic_load_resume_shader_address_amd',
    'nir_intrinsic_load_ring_attr_amd',
    'nir_intrinsic_load_ring_attr_offset_amd',
    'nir_intrinsic_load_ring_es2gs_offset_amd',
    'nir_intrinsic_load_ring_esgs_amd',
    'nir_intrinsic_load_ring_gs2vs_offset_amd',
    'nir_intrinsic_load_ring_gsvs_amd',
    'nir_intrinsic_load_ring_mesh_scratch_amd',
    'nir_intrinsic_load_ring_mesh_scratch_offset_amd',
    'nir_intrinsic_load_ring_task_draw_amd',
    'nir_intrinsic_load_ring_task_payload_amd',
    'nir_intrinsic_load_ring_tess_factors_amd',
    'nir_intrinsic_load_ring_tess_factors_offset_amd',
    'nir_intrinsic_load_ring_tess_offchip_amd',
    'nir_intrinsic_load_ring_tess_offchip_offset_amd',
    'nir_intrinsic_load_root_agx',
    'nir_intrinsic_load_rt_arg_scratch_offset_amd',
    'nir_intrinsic_load_rt_conversion_pan',
    'nir_intrinsic_load_sample_id', 'nir_intrinsic_load_sample_mask',
    'nir_intrinsic_load_sample_mask_in',
    'nir_intrinsic_load_sample_pos',
    'nir_intrinsic_load_sample_pos_from_id',
    'nir_intrinsic_load_sample_pos_or_center',
    'nir_intrinsic_load_sample_positions_agx',
    'nir_intrinsic_load_sample_positions_amd',
    'nir_intrinsic_load_sample_positions_pan',
    'nir_intrinsic_load_sampler_handle_agx',
    'nir_intrinsic_load_sampler_lod_parameters',
    'nir_intrinsic_load_samples_log2_agx',
    'nir_intrinsic_load_sbt_base_amd',
    'nir_intrinsic_load_sbt_offset_amd',
    'nir_intrinsic_load_sbt_stride_amd',
    'nir_intrinsic_load_scalar_arg_amd', 'nir_intrinsic_load_scratch',
    'nir_intrinsic_load_scratch_base_ptr',
    'nir_intrinsic_load_shader_call_data_offset_lvp',
    'nir_intrinsic_load_shader_index',
    'nir_intrinsic_load_shader_output_pan',
    'nir_intrinsic_load_shader_part_tests_zs_agx',
    'nir_intrinsic_load_shader_record_ptr',
    'nir_intrinsic_load_shared', 'nir_intrinsic_load_shared2_amd',
    'nir_intrinsic_load_shared_base_ptr',
    'nir_intrinsic_load_shared_block_intel',
    'nir_intrinsic_load_shared_ir3',
    'nir_intrinsic_load_shared_lock_nv',
    'nir_intrinsic_load_shared_uniform_block_intel',
    'nir_intrinsic_load_simd_width_intel',
    'nir_intrinsic_load_sm_count_nv', 'nir_intrinsic_load_sm_id_nv',
    'nir_intrinsic_load_smem_amd', 'nir_intrinsic_load_ssbo',
    'nir_intrinsic_load_ssbo_address',
    'nir_intrinsic_load_ssbo_block_intel',
    'nir_intrinsic_load_ssbo_intel', 'nir_intrinsic_load_ssbo_ir3',
    'nir_intrinsic_load_ssbo_uniform_block_intel',
    'nir_intrinsic_load_stack',
    'nir_intrinsic_load_stat_query_address_agx',
    'nir_intrinsic_load_streamout_buffer_amd',
    'nir_intrinsic_load_streamout_config_amd',
    'nir_intrinsic_load_streamout_offset_amd',
    'nir_intrinsic_load_streamout_write_index_amd',
    'nir_intrinsic_load_subgroup_eq_mask',
    'nir_intrinsic_load_subgroup_ge_mask',
    'nir_intrinsic_load_subgroup_gt_mask',
    'nir_intrinsic_load_subgroup_id',
    'nir_intrinsic_load_subgroup_id_shift_ir3',
    'nir_intrinsic_load_subgroup_invocation',
    'nir_intrinsic_load_subgroup_le_mask',
    'nir_intrinsic_load_subgroup_lt_mask',
    'nir_intrinsic_load_subgroup_size',
    'nir_intrinsic_load_sysval_agx', 'nir_intrinsic_load_sysval_nv',
    'nir_intrinsic_load_task_payload',
    'nir_intrinsic_load_task_ring_entry_amd',
    'nir_intrinsic_load_tcs_header_ir3',
    'nir_intrinsic_load_tcs_in_param_base_r600',
    'nir_intrinsic_load_tcs_mem_attrib_stride',
    'nir_intrinsic_load_tcs_num_patches_amd',
    'nir_intrinsic_load_tcs_out_param_base_r600',
    'nir_intrinsic_load_tcs_primitive_mode_amd',
    'nir_intrinsic_load_tcs_rel_patch_id_r600',
    'nir_intrinsic_load_tcs_tess_factor_base_r600',
    'nir_intrinsic_load_tcs_tess_levels_to_tes_amd',
    'nir_intrinsic_load_tess_coord',
    'nir_intrinsic_load_tess_coord_xy',
    'nir_intrinsic_load_tess_factor_base_ir3',
    'nir_intrinsic_load_tess_level_inner',
    'nir_intrinsic_load_tess_level_inner_default',
    'nir_intrinsic_load_tess_level_outer',
    'nir_intrinsic_load_tess_level_outer_default',
    'nir_intrinsic_load_tess_param_base_ir3',
    'nir_intrinsic_load_tess_param_buffer_poly',
    'nir_intrinsic_load_tess_rel_patch_id_amd',
    'nir_intrinsic_load_tex_sprite_mask_agx',
    'nir_intrinsic_load_texture_handle_agx',
    'nir_intrinsic_load_texture_scale',
    'nir_intrinsic_load_texture_size_etna',
    'nir_intrinsic_load_tlb_color_brcm',
    'nir_intrinsic_load_topology_id_intel',
    'nir_intrinsic_load_typed_buffer_amd',
    'nir_intrinsic_load_uav_ir3', 'nir_intrinsic_load_ubo',
    'nir_intrinsic_load_ubo_uniform_block_intel',
    'nir_intrinsic_load_ubo_vec4', 'nir_intrinsic_load_uniform',
    'nir_intrinsic_load_user_clip_plane',
    'nir_intrinsic_load_user_data_amd',
    'nir_intrinsic_load_uvs_index_agx',
    'nir_intrinsic_load_vbo_base_agx',
    'nir_intrinsic_load_vbo_stride_agx',
    'nir_intrinsic_load_vector_arg_amd',
    'nir_intrinsic_load_vertex_id',
    'nir_intrinsic_load_vertex_id_zero_base',
    'nir_intrinsic_load_view_index',
    'nir_intrinsic_load_viewport_offset',
    'nir_intrinsic_load_viewport_scale',
    'nir_intrinsic_load_viewport_x_offset',
    'nir_intrinsic_load_viewport_x_scale',
    'nir_intrinsic_load_viewport_y_offset',
    'nir_intrinsic_load_viewport_y_scale',
    'nir_intrinsic_load_viewport_z_offset',
    'nir_intrinsic_load_viewport_z_scale',
    'nir_intrinsic_load_vs_output_buffer_poly',
    'nir_intrinsic_load_vs_outputs_poly',
    'nir_intrinsic_load_vs_primitive_stride_ir3',
    'nir_intrinsic_load_vs_vertex_stride_ir3',
    'nir_intrinsic_load_vulkan_descriptor',
    'nir_intrinsic_load_warp_id_arm', 'nir_intrinsic_load_warp_id_nv',
    'nir_intrinsic_load_warp_max_id_arm',
    'nir_intrinsic_load_warps_per_sm_nv',
    'nir_intrinsic_load_work_dim', 'nir_intrinsic_load_workgroup_id',
    'nir_intrinsic_load_workgroup_index',
    'nir_intrinsic_load_workgroup_num_input_primitives_amd',
    'nir_intrinsic_load_workgroup_num_input_vertices_amd',
    'nir_intrinsic_load_workgroup_size',
    'nir_intrinsic_load_xfb_address',
    'nir_intrinsic_load_xfb_index_buffer',
    'nir_intrinsic_load_xfb_size',
    'nir_intrinsic_load_xfb_state_address_gfx12_amd',
    'nir_intrinsic_masked_swizzle_amd', 'nir_intrinsic_mbcnt_amd',
    'nir_intrinsic_memcpy_deref', 'nir_intrinsic_nop',
    'nir_intrinsic_nop_amd',
    'nir_intrinsic_optimization_barrier_sgpr_amd',
    'nir_intrinsic_optimization_barrier_vgpr_amd',
    'nir_intrinsic_ordered_add_loop_gfx12_amd',
    'nir_intrinsic_ordered_xfb_counter_add_gfx11_amd',
    'nir_intrinsic_overwrite_tes_arguments_amd',
    'nir_intrinsic_overwrite_vs_arguments_amd',
    'nir_intrinsic_pin_cx_handle_nv',
    'nir_intrinsic_preamble_end_ir3',
    'nir_intrinsic_preamble_start_ir3',
    'nir_intrinsic_prefetch_sam_ir3',
    'nir_intrinsic_prefetch_tex_ir3',
    'nir_intrinsic_prefetch_ubo_ir3', 'nir_intrinsic_printf',
    'nir_intrinsic_printf_abort', 'nir_intrinsic_quad_ballot_agx',
    'nir_intrinsic_quad_broadcast',
    'nir_intrinsic_quad_swap_diagonal',
    'nir_intrinsic_quad_swap_horizontal',
    'nir_intrinsic_quad_swap_vertical',
    'nir_intrinsic_quad_swizzle_amd', 'nir_intrinsic_quad_vote_all',
    'nir_intrinsic_quad_vote_any',
    'nir_intrinsic_r600_indirect_vertex_at_index',
    'nir_intrinsic_ray_intersection_ir3',
    'nir_intrinsic_read_attribute_payload_intel',
    'nir_intrinsic_read_first_invocation',
    'nir_intrinsic_read_getlast_ir3', 'nir_intrinsic_read_invocation',
    'nir_intrinsic_read_invocation_cond_ir3', 'nir_intrinsic_reduce',
    'nir_intrinsic_reduce_clusters_ir3',
    'nir_intrinsic_report_ray_intersection',
    'nir_intrinsic_resource_intel', 'nir_intrinsic_rotate',
    'nir_intrinsic_rq_confirm_intersection',
    'nir_intrinsic_rq_generate_intersection',
    'nir_intrinsic_rq_initialize', 'nir_intrinsic_rq_load',
    'nir_intrinsic_rq_proceed', 'nir_intrinsic_rq_terminate',
    'nir_intrinsic_rt_execute_callable', 'nir_intrinsic_rt_resume',
    'nir_intrinsic_rt_return_amd', 'nir_intrinsic_rt_trace_ray',
    'nir_intrinsic_sample_mask_agx',
    'nir_intrinsic_select_vertex_poly', 'nir_intrinsic_sendmsg_amd',
    'nir_intrinsic_set_vertex_and_primitive_count',
    'nir_intrinsic_shader_clock', 'nir_intrinsic_shared_append_amd',
    'nir_intrinsic_shared_atomic', 'nir_intrinsic_shared_atomic_swap',
    'nir_intrinsic_shared_consume_amd', 'nir_intrinsic_shuffle',
    'nir_intrinsic_shuffle_down',
    'nir_intrinsic_shuffle_down_uniform_ir3',
    'nir_intrinsic_shuffle_up',
    'nir_intrinsic_shuffle_up_uniform_ir3',
    'nir_intrinsic_shuffle_xor',
    'nir_intrinsic_shuffle_xor_uniform_ir3',
    'nir_intrinsic_sleep_amd',
    'nir_intrinsic_sparse_residency_code_and',
    'nir_intrinsic_ssa_bar_nv', 'nir_intrinsic_ssbo_atomic',
    'nir_intrinsic_ssbo_atomic_ir3', 'nir_intrinsic_ssbo_atomic_swap',
    'nir_intrinsic_ssbo_atomic_swap_ir3',
    'nir_intrinsic_stack_map_agx', 'nir_intrinsic_stack_unmap_agx',
    'nir_intrinsic_store_agx', 'nir_intrinsic_store_buffer_amd',
    'nir_intrinsic_store_combined_output_pan',
    'nir_intrinsic_store_const_ir3', 'nir_intrinsic_store_deref',
    'nir_intrinsic_store_deref_block_intel',
    'nir_intrinsic_store_global', 'nir_intrinsic_store_global_2x32',
    'nir_intrinsic_store_global_amd',
    'nir_intrinsic_store_global_block_intel',
    'nir_intrinsic_store_global_etna',
    'nir_intrinsic_store_global_ir3',
    'nir_intrinsic_store_hit_attrib_amd',
    'nir_intrinsic_store_local_pixel_agx',
    'nir_intrinsic_store_local_shared_r600',
    'nir_intrinsic_store_output',
    'nir_intrinsic_store_per_primitive_output',
    'nir_intrinsic_store_per_primitive_payload_intel',
    'nir_intrinsic_store_per_vertex_output',
    'nir_intrinsic_store_per_view_output',
    'nir_intrinsic_store_preamble',
    'nir_intrinsic_store_raw_output_pan', 'nir_intrinsic_store_reg',
    'nir_intrinsic_store_reg_indirect',
    'nir_intrinsic_store_scalar_arg_amd',
    'nir_intrinsic_store_scratch', 'nir_intrinsic_store_shared',
    'nir_intrinsic_store_shared2_amd',
    'nir_intrinsic_store_shared_block_intel',
    'nir_intrinsic_store_shared_ir3',
    'nir_intrinsic_store_shared_unlock_nv',
    'nir_intrinsic_store_ssbo',
    'nir_intrinsic_store_ssbo_block_intel',
    'nir_intrinsic_store_ssbo_intel', 'nir_intrinsic_store_ssbo_ir3',
    'nir_intrinsic_store_stack', 'nir_intrinsic_store_task_payload',
    'nir_intrinsic_store_tf_r600',
    'nir_intrinsic_store_tlb_sample_color_v3d',
    'nir_intrinsic_store_uvs_agx',
    'nir_intrinsic_store_vector_arg_amd',
    'nir_intrinsic_store_zs_agx',
    'nir_intrinsic_strict_wqm_coord_amd', 'nir_intrinsic_subfm_nv',
    'nir_intrinsic_suclamp_nv', 'nir_intrinsic_sueau_nv',
    'nir_intrinsic_suldga_nv', 'nir_intrinsic_sustga_nv',
    'nir_intrinsic_task_payload_atomic',
    'nir_intrinsic_task_payload_atomic_swap',
    'nir_intrinsic_terminate', 'nir_intrinsic_terminate_if',
    'nir_intrinsic_terminate_ray', 'nir_intrinsic_trace_ray',
    'nir_intrinsic_trace_ray_intel', 'nir_intrinsic_unit_test_amd',
    'nir_intrinsic_unit_test_divergent_amd',
    'nir_intrinsic_unit_test_uniform_amd',
    'nir_intrinsic_unpin_cx_handle_nv', 'nir_intrinsic_use',
    'nir_intrinsic_vild_nv', 'nir_intrinsic_vote_all',
    'nir_intrinsic_vote_any', 'nir_intrinsic_vote_feq',
    'nir_intrinsic_vote_ieq', 'nir_intrinsic_vulkan_resource_index',
    'nir_intrinsic_vulkan_resource_reindex',
    'nir_intrinsic_write_invocation_amd',
    'nir_intrinsic_xfb_counter_sub_gfx11_amd',
    'nir_io_16bit_input_output_support',
    'nir_io_always_interpolate_convergent_fs_inputs',
    'nir_io_compaction_groups_tes_inputs_into_pos_and_var_groups',
    'nir_io_compaction_rotates_color_channels',
    'nir_io_dont_use_pos_for_non_fs_varyings',
    'nir_io_has_flexible_input_interpolation_except_flat',
    'nir_io_has_intrinsics', 'nir_io_mediump_is_32bit',
    'nir_io_mix_convergent_flat_with_interpolated', 'nir_io_options',
    'nir_io_options__enumvalues', 'nir_io_prefer_scalar_fs_inputs',
    'nir_io_radv_intrinsic_component_workaround',
    'nir_io_separate_clip_cull_distance_arrays',
    'nir_io_vectorizer_ignores_types', 'nir_last_intrinsic',
    'nir_lower_bcsel64', 'nir_lower_bit_count64',
    'nir_lower_bitfield_extract64', 'nir_lower_bitfield_reverse64',
    'nir_lower_conv64', 'nir_lower_dceil', 'nir_lower_ddiv',
    'nir_lower_dfloor', 'nir_lower_dfract', 'nir_lower_divmod64',
    'nir_lower_dminmax', 'nir_lower_dmod',
    'nir_lower_doubles_options',
    'nir_lower_doubles_options__enumvalues', 'nir_lower_drcp',
    'nir_lower_dround_even', 'nir_lower_drsq', 'nir_lower_dsat',
    'nir_lower_dsign', 'nir_lower_dsqrt', 'nir_lower_dsub',
    'nir_lower_dtrunc', 'nir_lower_extract64', 'nir_lower_find_lsb64',
    'nir_lower_fp64_full_software', 'nir_lower_iabs64',
    'nir_lower_iadd3_64', 'nir_lower_iadd64', 'nir_lower_iadd_sat64',
    'nir_lower_icmp64', 'nir_lower_imul64', 'nir_lower_imul_2x32_64',
    'nir_lower_imul_high64', 'nir_lower_ineg64',
    'nir_lower_int64_options', 'nir_lower_int64_options__enumvalues',
    'nir_lower_isign64', 'nir_lower_logic64', 'nir_lower_minmax64',
    'nir_lower_packing_num_ops', 'nir_lower_packing_op',
    'nir_lower_packing_op__enumvalues',
    'nir_lower_packing_op_pack_32_2x16',
    'nir_lower_packing_op_pack_32_4x8',
    'nir_lower_packing_op_pack_64_2x32',
    'nir_lower_packing_op_pack_64_4x16',
    'nir_lower_packing_op_unpack_32_2x16',
    'nir_lower_packing_op_unpack_32_4x8',
    'nir_lower_packing_op_unpack_64_2x32',
    'nir_lower_packing_op_unpack_64_4x16',
    'nir_lower_scan_reduce_bitwise64', 'nir_lower_scan_reduce_iadd64',
    'nir_lower_shift64', 'nir_lower_subgroup_shuffle64',
    'nir_lower_uadd_sat64', 'nir_lower_ufind_msb64',
    'nir_lower_usub_sat64', 'nir_lower_vote_ieq64',
    'nir_metadata_all', 'nir_metadata_block_index',
    'nir_metadata_control_flow', 'nir_metadata_divergence',
    'nir_metadata_dominance', 'nir_metadata_instr_index',
    'nir_metadata_live_defs', 'nir_metadata_loop_analysis',
    'nir_metadata_none', 'nir_metadata_not_properly_reset',
    'nir_num_intrinsics', 'nir_num_tex_src_types',
    'nir_num_variable_modes', 'nir_serialize',
    'nir_serialize_function', 'nir_shader_compiler_options',
    'nir_tex_src_backend1', 'nir_tex_src_backend2',
    'nir_tex_src_bias', 'nir_tex_src_comparator', 'nir_tex_src_coord',
    'nir_tex_src_ddx', 'nir_tex_src_ddy', 'nir_tex_src_lod',
    'nir_tex_src_lod_bias_min_agx', 'nir_tex_src_min_lod',
    'nir_tex_src_ms_index', 'nir_tex_src_ms_mcs_intel',
    'nir_tex_src_offset', 'nir_tex_src_plane',
    'nir_tex_src_projector', 'nir_tex_src_sampler_deref',
    'nir_tex_src_sampler_deref_intrinsic',
    'nir_tex_src_sampler_handle', 'nir_tex_src_sampler_offset',
    'nir_tex_src_texture_deref',
    'nir_tex_src_texture_deref_intrinsic',
    'nir_tex_src_texture_handle', 'nir_tex_src_texture_offset',
    'nir_tex_src_type', 'nir_texop',
    'nir_texop_custom_border_color_agx', 'nir_texop_descriptor_amd',
    'nir_texop_fragment_fetch_amd',
    'nir_texop_fragment_mask_fetch_amd',
    'nir_texop_has_custom_border_color_agx', 'nir_texop_hdr_dim_nv',
    'nir_texop_image_min_lod_agx', 'nir_texop_lod',
    'nir_texop_lod_bias', 'nir_texop_query_levels',
    'nir_texop_sample_pos_nv', 'nir_texop_sampler_descriptor_amd',
    'nir_texop_samples_identical', 'nir_texop_tex',
    'nir_texop_tex_prefetch', 'nir_texop_tex_type_nv',
    'nir_texop_texture_samples', 'nir_texop_tg4', 'nir_texop_txb',
    'nir_texop_txd', 'nir_texop_txf', 'nir_texop_txf_ms',
    'nir_texop_txf_ms_fb', 'nir_texop_txf_ms_mcs_intel',
    'nir_texop_txl', 'nir_texop_txs', 'nir_type_bool',
    'nir_type_bool1', 'nir_type_bool16', 'nir_type_bool32',
    'nir_type_bool8', 'nir_type_float', 'nir_type_float16',
    'nir_type_float32', 'nir_type_float64', 'nir_type_int',
    'nir_type_int1', 'nir_type_int16', 'nir_type_int32',
    'nir_type_int64', 'nir_type_int8', 'nir_type_invalid',
    'nir_type_uint', 'nir_type_uint1', 'nir_type_uint16',
    'nir_type_uint32', 'nir_type_uint64', 'nir_type_uint8',
    'nir_var_all', 'nir_var_function_in', 'nir_var_function_inout',
    'nir_var_function_out', 'nir_var_function_temp', 'nir_var_image',
    'nir_var_mem_constant', 'nir_var_mem_generic',
    'nir_var_mem_global', 'nir_var_mem_node_payload',
    'nir_var_mem_node_payload_in', 'nir_var_mem_push_const',
    'nir_var_mem_shared', 'nir_var_mem_ssbo',
    'nir_var_mem_task_payload', 'nir_var_mem_ubo',
    'nir_var_ray_hit_attrib', 'nir_var_read_only_modes',
    'nir_var_shader_call_data', 'nir_var_shader_in',
    'nir_var_shader_out', 'nir_var_shader_temp',
    'nir_var_system_value', 'nir_var_uniform',
    'nir_var_vec_indexable_modes', 'pipe_format', 'size_t',
    'struct_LLVMOpaqueBasicBlock', 'struct_LLVMOpaqueBuilder',
    'struct_LLVMOpaqueContext', 'struct_LLVMOpaqueDIBuilder',
    'struct_LLVMOpaqueExecutionEngine',
    'struct_LLVMOpaqueMCJITMemoryManager',
    'struct_LLVMOpaqueMetadata', 'struct_LLVMOpaqueModule',
    'struct_LLVMOpaqueTargetData', 'struct_LLVMOpaqueType',
    'struct_LLVMOpaqueValue', 'struct_blob', 'struct_blob_reader',
    'struct_exec_list', 'struct_exec_node', 'struct_gallivm_state',
    'struct_gc_ctx', 'struct_glsl_cmat_description',
    'struct_glsl_struct_field', 'struct_glsl_struct_field_0_0',
    'struct_glsl_type', 'struct_hash_entry', 'struct_hash_table',
    'struct_list_head', 'struct_lp_bld_tgsi_system_values',
    'struct_lp_build_context', 'struct_lp_build_coro_suspend_info',
    'struct_lp_build_fn', 'struct_lp_build_for_loop_state',
    'struct_lp_build_fs_iface', 'struct_lp_build_gs_iface',
    'struct_lp_build_if_state', 'struct_lp_build_image_soa',
    'struct_lp_build_loop_state', 'struct_lp_build_mask_context',
    'struct_lp_build_mesh_iface', 'struct_lp_build_sampler_aos',
    'struct_lp_build_sampler_soa', 'struct_lp_build_skip_context',
    'struct_lp_build_tcs_iface', 'struct_lp_build_tes_iface',
    'struct_lp_build_tgsi_params', 'struct_lp_cached_code',
    'struct_lp_context_ref', 'struct_lp_derivatives',
    'struct_lp_descriptor', 'struct_lp_descriptor_0_0',
    'struct_lp_descriptor_0_1', 'struct_lp_generated_code',
    'struct_lp_img_params', 'struct_lp_jit_bindless_texture',
    'struct_lp_jit_buffer', 'struct_lp_jit_image',
    'struct_lp_jit_resources', 'struct_lp_jit_sampler',
    'struct_lp_jit_texture', 'struct_lp_jit_texture_0_0',
    'struct_lp_passmgr', 'struct_lp_sampler_dynamic_state',
    'struct_lp_sampler_params', 'struct_lp_sampler_size_query_params',
    'struct_lp_static_texture_state', 'struct_lp_texture_functions',
    'struct_lp_texture_handle', 'struct_lp_texture_handle_state',
    'struct_lp_type', 'struct_nir_block', 'struct_nir_cf_node',
    'struct_nir_def', 'struct_nir_function',
    'struct_nir_function_impl', 'struct_nir_instr',
    'struct_nir_intrinsic_instr', 'struct_nir_parameter',
    'struct_nir_shader', 'struct_nir_shader_compiler_options',
    'struct_nir_src', 'struct_nir_tex_instr', 'struct_nir_tex_src',
    'struct_nir_xfb_info', 'struct_set', 'struct_set_entry',
    'struct_shader_info', 'struct_shader_info_0_cs',
    'struct_shader_info_0_fs', 'struct_shader_info_0_gs',
    'struct_shader_info_0_mesh', 'struct_shader_info_0_tess',
    'struct_shader_info_0_vs', 'struct_tgsi_shader_info',
    'struct_u_printf_info', 'struct_util_format_block',
    'struct_util_format_channel_description',
    'struct_util_format_description', 'tess_primitive_mode',
    'tgsi_texture_type', 'uint16_t', 'uint32_t', 'uint64_t',
    'uint8_t', 'union_glsl_struct_field_0', 'union_glsl_type_fields',
    'union_lp_descriptor_0', 'union_lp_jit_buffer_0',
    'union_lp_jit_texture_0', 'union_shader_info_0',
    'union_util_format_description_0', 'util_format_colorspace',
    'util_format_layout']
