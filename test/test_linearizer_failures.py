import unittest
from tinygrad.codegen.opt import Opt, OptOps
from tinygrad.uop.ops import UOp, Ops, AxisType, KernelInfo, Invalid
from tinygrad.dtype import dtypes

class TestLinearizerFailures(unittest.TestCase):
  def test_failure_1(self):
    c0 = UOp(Ops.DEFINE_GLOBAL, dtypes.float.ptr(2097152), arg=0, src=())
    c1 = UOp.range(UOp.const(dtypes.index, 8), 251, AxisType.GLOBAL)
    c2 = UOp.range(UOp.const(dtypes.index, 8), 252, AxisType.GLOBAL)
    c3 = UOp.range(UOp.const(dtypes.index, 4), 250, AxisType.GLOBAL)
    c4 = UOp.range(UOp.const(dtypes.index, 16), 256, AxisType.LOCAL)
    c5 = ((c3*UOp.const(dtypes.index, 16))+c4)
    c6 = UOp.range(UOp.const(dtypes.index, 512), 249, AxisType.GLOBAL)
    c7 = ((((c1*UOp.const(dtypes.index, 8))+c2)+(c5*UOp.const(dtypes.index, 64)))+(c6*UOp.const(dtypes.index, 4096)))
    c8 = UOp(Ops.DEFINE_GLOBAL, dtypes.float.ptr(2097152), arg=1, src=())
    c9 = c8.index(c7).load()
    c10 = UOp.range(UOp.const(dtypes.index, 4), 254, AxisType.REDUCE)
    c11 = ((c10*UOp.const(dtypes.index, 8))+c2)
    c12 = UOp.range(UOp.const(dtypes.index, 4), 253, AxisType.REDUCE)
    c13 = ((c12*UOp.const(dtypes.index, 8))+c1)
    c14 = (c11.alu(Ops.CMPLT, UOp.const(dtypes.index, 27))&c13.alu(Ops.CMPLT, UOp.const(dtypes.index, 27)))
    c15 = (c13%UOp.const(dtypes.index, 9))
    c16 = c15.alu(Ops.CMPLT, UOp.const(dtypes.index, 6))
    c17 = (c11%UOp.const(dtypes.index, 9))
    c18 = c17.alu(Ops.CMPLT, UOp.const(dtypes.index, 6))
    c19 = UOp(Ops.DEFINE_GLOBAL, dtypes.float.ptr(36864), arg=2, src=())
    c20 = ((c14&c18)&c16)
    c21 = UOp.range(UOp.const(dtypes.index, 4), 255, AxisType.REDUCE)
    c22 = UOp.range(UOp.const(dtypes.index, 16), 257, AxisType.GROUP_REDUCE)
    c23 = ((c21*UOp.const(dtypes.index, 16))+c22)
    c24 = c19.index(c20.where((((((c13//UOp.const(dtypes.index, 9))*UOp.const(dtypes.index, 3))+(c11//UOp.const(dtypes.index, 9)))+(c5*UOp.const(dtypes.index, 9)))+(c23*UOp.const(dtypes.index, 576))), UOp.const(dtypes.index, Invalid))).load()
    c25 = UOp(Ops.DEFINE_GLOBAL, dtypes.float.ptr(1179648), arg=3, src=())
    c26 = c20.where(((((c15*UOp.const(dtypes.index, 6))+c17)+(c23*UOp.const(dtypes.index, 36)))+(c6*UOp.const(dtypes.index, 2304))), UOp.const(dtypes.index, Invalid))
    c27 = c25.index(c26).load()
    c28 = UOp.const(dtypes.float, 0.0).alu(Ops.CMPLT, c27)
    c29 = UOp(Ops.DEFINE_GLOBAL, dtypes.float.ptr(64), arg=4, src=())
    c30 = c29.index(c23).load()
    c31 = UOp(Ops.DEFINE_GLOBAL, dtypes.float.ptr(64), arg=5, src=())
    c32 = c31.index(c23).load()
    c33 = UOp(Ops.DEFINE_GLOBAL, dtypes.float.ptr(64), arg=6, src=())
    c34 = c33.index(c23).load()
    c35 = UOp(Ops.DEFINE_GLOBAL, dtypes.float.ptr(64), arg=7, src=())
    c36 = c35.index(c23).load()
    c37 = UOp(Ops.DEFINE_GLOBAL, dtypes.float.ptr(1179648), arg=8, src=())
    c38 = c37.index(c26).load()
    c39 = UOp(Ops.DEFINE_GLOBAL, dtypes.float.ptr(64), arg=9, src=())
    c40 = c39.index(c23).load()
    c41 = UOp.const(dtypes.float, 0.0).alu(Ops.CMPLT, c9).where(((c14&c16)&c18).where((c24*c28.where((((((c28.where(c27, UOp.const(dtypes.float, 0.0))+(c30*UOp.const(dtypes.float, -1.0)))*c32)*UOp.const(dtypes.float, 2.0))+(c34*((c36+UOp.const(
    dtypes.float, 1e-05)).sqrt().reciprocal()*c38)))+c40), UOp.const(dtypes.float, 0.0))).reduce(c21, c22, arg=Ops.ADD), UOp.const(dtypes.float, 0.0)).reduce(c12, c10, arg=Ops.ADD), UOp.const(dtypes.float, 0.0))
    c42 = c0.index(c7).store(c41, c6, c3, c4, c1, c2)
    ast = c42.sink(arg=KernelInfo(name='test', axis_types=(), dont_use_locals=False, applied_opts=(Opt(op=OptOps.LOCAL, axis=1, arg=16), Opt(op=OptOps.GROUP, axis=2, arg=16)), opts_to_apply=None))
    print(ast)

if __name__ == '__main__':
  unittest.main()
